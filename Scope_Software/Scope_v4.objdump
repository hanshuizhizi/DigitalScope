
Scope_v4.elf:     file format elf32-littlenios2
Scope_v4.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x000063e8 memsz 0x000063e8 flags r-x
    LOAD off    0x00008000 vaddr 0x00120000 paddr 0x00086408 align 2**12
         filesz 0x00001740 memsz 0x00001f98 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005a14  000801b8  000801b8  000011b8  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000083c  00085bcc  00085bcc  00006bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001740  00120000  00086408  00008000  2**4
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000858  00121740  00087b48  00009740  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00009740  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000007a8  00000000  00000000  00009768  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000af57  00000000  00000000  00009f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003a7d  00000000  00000000  00014e67  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003feb  00000000  00000000  000188e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000122c  00000000  00000000  0001c8d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002067  00000000  00000000  0001dafc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000303b  00000000  00000000  0001fb63  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000030  00000000  00000000  00022ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000188  00000000  00000000  00022bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00025ab1  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  00025ab4  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00025ac0  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00025ac1  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00025ac2  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  00025acd  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00025ad8  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000005  00000000  00000000  00025ae3  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000020  00000000  00000000  00025ae8  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0005d863  00000000  00000000  00025b08  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b8 l    d  .text	00000000 .text
00085bcc l    d  .rodata	00000000 .rodata
00120000 l    d  .rwdata	00000000 .rwdata
00121740 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Scope_v4_bsp//obj/HAL/src/crt0.o
00080200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00080094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 char57.c
00000000 l    df *ABS*	00000000 keyproc.c
00000000 l    df *ABS*	00000000 lcdout.c
00000000 l    df *ABS*	00000000 mainloop.c
000807ec l     F .text	00000098 key_lookup
00085f78 l     O .rodata	00000030 process_key.1653
00085f4c l     O .rodata	00000014 keys.1658
00085f60 l     O .rodata	00000018 keycodes.1657
00000000 l    df *ABS*	00000000 menu.c
00121740 l     O .bss	00000004 menu_display
00085fe0 l     O .rodata	00000070 menu
00121744 l     O .bss	00000004 menu_entry
00080c50 l     F .text	000000d0 display_entry
0008606c l     O .rodata	0000001c process.1664
00086050 l     O .rodata	0000001c process.1669
00000000 l    df *ABS*	00000000 menuact.c
00121748 l     O .bss	00000004 trigger_mode
0012174c l     O .bss	00000004 scale
00121750 l     O .bss	00000004 sweep
00121754 l     O .bss	00000004 level
00121758 l     O .bss	00000004 slope
0012175c l     O .bss	00000004 delay
00086110 l     O .rodata	00000088 sweep_rates
000861e8 l     O .rodata	0000000c modes.1637
000861b8 l     O .rodata	0000000c scale_stat.1650
00081594 l     F .text	000000c0 adjust_trg_delay
00081870 l     F .text	00000198 cvt_num_field
00121700 l     O .rwdata	00000008 slopes.1690
00000000 l    df *ABS*	00000000 stubfncs.c
00121760 l     O .bss	00000004 trg_level
00121764 l     O .bss	00000004 old_trg_level
00000000 l    df *ABS*	00000000 testcode.c
000861f4 l     O .rodata	000001e0 waveform.1501
00000000 l    df *ABS*	00000000 tracutil.c
00121768 l     O .bss	00000004 trace_status
0012176c l     O .bss	00000004 sampling
00121770 l     O .bss	00000004 sample_size
00121774 l     O .bss	00000004 cur_scale
001217b0 l     O .bss	0000012c saved_axis_x
001218dc l     O .bss	00000176 saved_axis_y
00121a52 l     O .bss	000002a0 saved_menu
00121cf2 l     O .bss	000000f0 saved_area
00121778 l     O .bss	00000004 saved_pos_x
0012177c l     O .bss	00000004 saved_pos_y
00121780 l     O .bss	00000004 saved_end_x
00121784 l     O .bss	00000004 saved_end_y
00000000 l    df *ABS*	00000000 obj/default/Rot_Enc.o
00082aa0 l       .text	00000000 Set_up_handler
00082ac4 l       .text	00000000 Call_handler_setup
00082acc l       .text	00000000 Renable_interrupts
00120000 l       .rwdata	00000000 keyCodeStored
00082b24 l       .text	00000000 Check_Validity
00082b5c l       .text	00000000 Error
00082b54 l       .text	00000000 Store_Value
00082b5c l       .text	00000000 Done_Handler
00082b9c l       .text	00000000 illegal_key
00082b94 l       .text	00000000 legal_key
00082ba0 l       .text	00000000 end_key_available
00082bc8 l       .text	00000000 valid_key
00000000 l    df *ABS*	00000000 obj/default/display.o
00082bf0 l       .text	00000000 GetArgs
00082c08 l       .text	00000000 MoveLeft
00082bfc l       .text	00000000 AdjustFirstCol
00082c0c l       .text	00000000 CalcAddr
00082c30 l       .text	00000000 InitVars
00082c48 l       .text	00000000 CheckRow
00082c70 l       .text	00000000 EndClear
00082c50 l       .text	00000000 CheckCol
00082c64 l       .text	00000000 DoneCol
00082c58 l       .text	00000000 ClearPixel
00082c80 l       .text	00000000 GetAddr
00000000 l    df *ABS*	00000000 lib2-divmod.c
00082ca0 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
00120418 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00083cb4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0012171c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_sys_init.c
00083f08 l     F .text	00000038 alt_dev_reg
001204f8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000841dc l     F .text	00000204 altera_avalon_jtag_uart_irq
000843e0 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00084b5c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00084cb8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00084ce4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00084ebc l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00084ff4 l     F .text	00000050 alt_get_errno
00085044 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00083da0 g     F .text	00000078 alt_main
00121e0c g     O .bss	00000100 alt_irq
00081500 g     F .text	00000048 trg_delay_down
00040000 g       *ABS*	00000000 __alt_mem_VRAM
00086408 g       *ABS*	00000000 __flash_rwdata_start
00081004 g     F .text	00000068 display_scale
00121f98 g       *ABS*	00000000 __alt_heap_start
00081d68 g     F .text	00000028 trace_rearm
00081ac4 g     F .text	00000044 sample_done
00080dac g     F .text	00000020 get_trigger_mode
00083e38 g     F .text	00000020 __malloc_unlock
00080d20 g     F .text	00000020 no_menu_action
00081a7c g     F .text	00000024 set_delay
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000001c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00080204 g     F .text	00000024 no_action
00121794 g     O .bss	00000004 errno
00080308 g     F .text	00000030 menu_right
00081238 g     F .text	00000048 set_trg_level
001217a0 g     O .bss	00000004 alt_argv
00080884 g     F .text	00000064 init_menu
00129700 g       *ABS*	00000000 _gp
00081cd0 g     F .text	00000020 is_sampling
00082aa0 g     F .text	00000000 Init_Rot
000802d8 g     F .text	00000030 menu_left
00121580 g     O .rwdata	00000180 alt_fd_list
00085480 g     F .text	00000090 alt_find_dev
000857e0 g     F .text	00000028 memcpy
00084f7c g     F .text	00000078 alt_io_redirect
000812d0 g     F .text	00000054 trg_level_up
00085bcc g       *ABS*	00000000 __DTOR_END__
00080d6c g     F .text	00000040 set_trigger_mode
00082c80 g     F .text	00000000 plot_pixel
000845e0 g     F .text	00000218 altera_avalon_jtag_uart_read
00082dd0 g     F .text	00000014 malloc
00110000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00082dc0 g     F .text	00000008 __udivsi3
000824f8 g     F .text	00000110 restore_trace
000856d8 g     F .text	0000008c alt_icache_flush
00121790 g     O .bss	00000004 __malloc_top_pad
00082438 g     F .text	000000c0 set_save_area
0008357c g     F .text	00000064 _sbrk_r
00081aa0 g     F .text	00000024 start_sample
00080f3c g     F .text	00000064 scale_down
00121730 g     O .rwdata	00000004 alt_max_fd
00082b80 g     F .text	00000000 key_available
0012178c g     O .bss	00000004 __malloc_max_sbrked_mem
000811d0 g     F .text	00000068 display_sweep
00081dbc g     F .text	000003d8 set_display_scale
00082bf0 g     F .text	00000000 get_addr
00082608 g     F .text	00000048 do_trace
00121710 g     O .rwdata	00000004 _global_impure_ptr
00121f98 g       *ABS*	00000000 __bss_end
00083bc4 g     F .text	000000f0 alt_iic_isr_register
0008535c g     F .text	00000104 alt_tick
00081c34 g     F .text	00000064 init_trace
00082b00 g     F .text	00000000 Rot_Handler
00083b78 g     F .text	0000004c alt_ic_irq_enabled
000814c0 g     F .text	00000040 set_trg_delay
000852c4 g     F .text	00000098 alt_alarm_stop
000802a8 g     F .text	00000030 menu_down
00121798 g     O .bss	00000004 alt_irq_active
00081b08 g     F .text	0000012c get_test_sample
000800ec g     F .exceptions	000000cc alt_irq_handler
00121558 g     O .rwdata	00000028 alt_dev_null
00080338 g     F .text	000000a8 clear_region
00085bcc g     O .rodata	00000380 char_patterns
00084c74 g     F .text	00000044 alt_dcache_flush_all
00080aa4 g     F .text	0000006c previous_entry
00121740 g       *ABS*	00000000 __ram_rwdata_end
00121728 g     O .rwdata	00000008 alt_dev_list
00081c98 g     F .text	00000038 set_mode
00086408 g       *ABS*	00000000 __ram_rodata_end
00082dc8 g     F .text	00000008 __umodsi3
00080e94 g     F .text	00000068 display_mode
00121f98 g       *ABS*	00000000 end
00080d40 g     F .text	0000002c no_display
00081324 g     F .text	0000009c display_trg_level
0008114c g     F .text	00000084 sweep_up
000809d8 g     F .text	0000005c reset_menu
000808e8 g     F .text	00000038 clear_menu
0008411c g     F .text	000000c0 altera_avalon_jtag_uart_init
00081548 g     F .text	0000004c trg_delay_up
00085bcc g       *ABS*	00000000 __CTOR_LIST__
00140000 g       *ABS*	00000000 __alt_stack_pointer
000847f8 g     F .text	00000224 altera_avalon_jtag_uart_write
0008371c g     F .text	000002d0 _free_r
000859b8 g     F .text	000001d8 __call_exitprocs
00121708 g     O .rwdata	00000004 __malloc_sbrk_base
000801b8 g     F .text	0000004c _start
001217a8 g     O .bss	00000004 _alt_tick_rate
001217ac g     O .bss	00000004 _alt_nticks
00081408 g     F .text	00000054 trg_slope_toggle
00083f74 g     F .text	00000044 alt_sys_init
00085830 g     F .text	00000188 __register_exitproc
00084484 g     F .text	00000068 altera_avalon_jtag_uart_close
00120000 g       *ABS*	00000000 __ram_rwdata_start
00085bcc g       *ABS*	00000000 __ram_rodata_start
00121de4 g     O .bss	00000028 __malloc_current_mallinfo
00083fb8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00085624 g     F .text	000000b4 alt_get_fd
00082c30 g     F .text	00000000 clear_display
00085798 g     F .text	00000048 memcmp
00084078 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00121f98 g       *ABS*	00000000 __alt_stack_base
000840c8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00082334 g     F .text	00000104 restore_menu_trace
00120010 g     O .rwdata	00000408 __malloc_av_
00085510 g     F .text	00000114 alt_find_file
00084d34 g     F .text	000000a0 alt_dev_llist_insert
00083e18 g     F .text	00000020 __malloc_lock
00083e58 g     F .text	000000b0 sbrk
00081d90 g     F .text	0000002c set_trace_size
000806a8 g     F .text	00000098 plot_string
00121740 g       *ABS*	00000000 __bss_start
00080740 g     F .text	000000ac main
001217a4 g     O .bss	00000004 alt_envp
00121788 g     O .bss	00000004 __malloc_max_total_mem
00084018 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00082650 g     F .text	00000450 plot_trace
00140000 g       *ABS*	00000000 __alt_heap_limit
00121f0c g     O .bss	0000008c _atexit0
00082df8 g     F .text	00000784 _malloc_r
000810cc g     F .text	00000080 sweep_down
00121734 g     O .rwdata	00000004 alt_errno
00080dcc g     F .text	00000064 mode_down
00081a28 g     F .text	00000024 set_sample_rate
00082d14 g     F .text	00000050 __divsi3
00081a4c g     F .text	00000030 set_trigger
000835e0 g     F .text	0000013c _malloc_trim_r
00085bcc g       *ABS*	00000000 __CTOR_END__
000809a0 g     F .text	00000038 refresh_menu
00085bcc g       *ABS*	00000000 __flash_rodata_start
00085bcc g       *ABS*	00000000 __DTOR_LIST__
00080278 g     F .text	00000030 menu_up
00080bb0 g     F .text	000000a0 menu_entry_right
00083f40 g     F .text	00000034 alt_irq_init
00085264 g     F .text	00000060 alt_release_fd
00085764 g     F .text	00000014 atexit
00081d28 g     F .text	00000040 trace_done
00121714 g     O .rwdata	00000004 _impure_ptr
0012179c g     O .bss	00000004 alt_argc
000813c0 g     F .text	00000048 set_trg_slope
00081280 g     F .text	00000050 trg_level_down
00084e30 g     F .text	0000005c _do_dtors
00080540 g     F .text	00000168 plot_char
00080020 g       .exceptions	00000000 alt_irq_entry
00081a08 g     F .text	00000020 init_analog
00080b10 g     F .text	000000a0 menu_entry_left
00121720 g     O .rwdata	00000008 alt_fs_list
00082194 g     F .text	000001a0 clear_saved_areas
000803e0 g     F .text	000000b4 plot_hline
00080020 g       *ABS*	00000000 __ram_exceptions_start
00080efc g     F .text	00000040 set_scale
000839ec g     F .text	00000050 alt_ic_isr_register
00121740 g       *ABS*	00000000 _edata
00121f98 g       *ABS*	00000000 _end
00080e30 g     F .text	00000064 mode_up
000801b8 g       *ABS*	00000000 __ram_exceptions_end
00080000 g       *ABS*	00000000 __alt_mem_EEROM
000844ec g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00083ad8 g     F .text	000000a0 alt_ic_irq_disable
0012170c g     O .rwdata	00000004 __malloc_trim_threshold
00085460 g     F .text	00000020 altera_nios2_qsys_irq_init
00085778 g     F .text	00000020 exit
00081654 g     F .text	0000021c display_trg_delay
00082d64 g     F .text	0000005c __modsi3
00140000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
0008145c g     F .text	00000064 display_trg_slope
00085b90 g     F .text	0000003c _exit
00084a1c g     F .text	00000140 alt_alarm_start
00085808 g     F .text	00000028 strlen
00085110 g     F .text	00000154 open
00120000 g       *ABS*	00000000 __alt_mem_SRAM
00084e8c g     F .text	00000030 alt_icache_flush_all
00082bb0 g     F .text	00000000 get_key
00121718 g     O .rwdata	00000004 alt_priority_mask
00083a3c g     F .text	0000009c alt_ic_irq_enable
00080494 g     F .text	000000ac plot_vline
00080920 g     F .text	00000080 display_menu
00121738 g     O .rwdata	00000008 alt_alarm_list
00084dd4 g     F .text	0000005c _do_ctors
00080a34 g     F .text	00000070 next_entry
00084bac g     F .text	000000c8 close
00081cf0 g     F .text	00000038 trace_rdy
00083d20 g     F .text	00000080 alt_load
0008106c g     F .text	00000060 set_sweep
00080fa0 g     F .text	00000064 scale_up
00080228 g     F .text	00000050 menu_key
00082de4 g     F .text	00000014 free



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08406e14 	ori	at,at,440
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__alt_mem_VRAM-0x40000>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)

00080094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   800fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80100:	0005313a 	rdctl	r2,ipending
   80104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80114:	00800044 	movi	r2,1
   80118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8011c:	e0fffb17 	ldw	r3,-20(fp)
   80120:	e0bffc17 	ldw	r2,-16(fp)
   80124:	1884703a 	and	r2,r3,r2
   80128:	10001726 	beq	r2,zero,80188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	00c004b4 	movhi	r3,18
   80130:	18c78304 	addi	r3,r3,7692
   80134:	e0bffd17 	ldw	r2,-12(fp)
   80138:	100490fa 	slli	r2,r2,3
   8013c:	1885883a 	add	r2,r3,r2
   80140:	10c00017 	ldw	r3,0(r2)
   80144:	010004b4 	movhi	r4,18
   80148:	21078304 	addi	r4,r4,7692
   8014c:	e0bffd17 	ldw	r2,-12(fp)
   80150:	100490fa 	slli	r2,r2,3
   80154:	2085883a 	add	r2,r4,r2
   80158:	10800104 	addi	r2,r2,4
   8015c:	10800017 	ldw	r2,0(r2)
   80160:	1009883a 	mov	r4,r2
   80164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8016c:	0005313a 	rdctl	r2,ipending
   80170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   8017c:	e0bffb17 	ldw	r2,-20(fp)
   80180:	103fe31e 	bne	r2,zero,80110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   80184:	00000706 	br	801a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80188:	e0bffc17 	ldw	r2,-16(fp)
   8018c:	1085883a 	add	r2,r2,r2
   80190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80194:	e0bffd17 	ldw	r2,-12(fp)
   80198:	10800044 	addi	r2,r2,1
   8019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a0:	003fde06 	br	8011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a4:	e037883a 	mov	sp,fp
   801a8:	dfc00117 	ldw	ra,4(sp)
   801ac:	df000017 	ldw	fp,0(sp)
   801b0:	dec00204 	addi	sp,sp,8
   801b4:	f800283a 	ret

Disassembly of section .text:

000801b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   801b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   801bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   801c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   801c4:	00bffd16 	blt	zero,r2,801bc <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801c8:	06c00534 	movhi	sp,20
    ori sp, sp, %lo(__alt_stack_pointer)
   801cc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   801d0:	068004b4 	movhi	gp,18
    ori gp, gp, %lo(_gp)
   801d4:	d6a5c014 	ori	gp,gp,38656
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801d8:	008004b4 	movhi	r2,18
    ori r2, r2, %lo(__bss_start)
   801dc:	1085d014 	ori	r2,r2,5952

    movhi r3, %hi(__bss_end)
   801e0:	00c004b4 	movhi	r3,18
    ori r3, r3, %lo(__bss_end)
   801e4:	18c7e614 	ori	r3,r3,8088

    beq r2, r3, 1f
   801e8:	10c00326 	beq	r2,r3,801f8 <_start+0x40>

0:
    stw zero, (r2)
   801ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801f4:	10fffd36 	bltu	r2,r3,801ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801f8:	0083d200 	call	83d20 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801fc:	0083da00 	call	83da0 <alt_main>

00080200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80200:	003fff06 	br	80200 <alt_after_alt_main>

00080204 <no_action>:
   Last Modified:    Mar. 8, 1994

*/

enum status  no_action(enum status cur_state)
{
   80204:	defffe04 	addi	sp,sp,-8
   80208:	df000115 	stw	fp,4(sp)
   8020c:	df000104 	addi	fp,sp,4
   80210:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* return the current state */
    return  cur_state;
   80214:	e0bfff17 	ldw	r2,-4(fp)

}
   80218:	e037883a 	mov	sp,fp
   8021c:	df000017 	ldw	fp,0(sp)
   80220:	dec00104 	addi	sp,sp,4
   80224:	f800283a 	ret

00080228 <menu_key>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_key(enum status cur_state)
{
   80228:	defffd04 	addi	sp,sp,-12
   8022c:	dfc00215 	stw	ra,8(sp)
   80230:	df000115 	stw	fp,4(sp)
   80234:	df000104 	addi	fp,sp,4
   80238:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* check if need to turn the menu on or off */
    if (cur_state == MENU_ON)
   8023c:	e0bfff17 	ldw	r2,-4(fp)
   80240:	1000021e 	bne	r2,zero,8024c <menu_key+0x24>
        /* currently the menu is on, turn it off */
	clear_menu();
   80244:	00808e80 	call	808e8 <clear_menu>
   80248:	00000106 	br	80250 <menu_key+0x28>
    else
        /* currently the menu is off, turn it on */
	display_menu();
   8024c:	00809200 	call	80920 <display_menu>


    /* all done, return the "opposite" of the current state */
    if (cur_state == MENU_ON)
   80250:	e0bfff17 	ldw	r2,-4(fp)
   80254:	1000021e 	bne	r2,zero,80260 <menu_key+0x38>
        /* state was MENU_ON, change it to MENU_OFF */
        return  MENU_OFF;
   80258:	00800044 	movi	r2,1
   8025c:	00000106 	br	80264 <menu_key+0x3c>
    else
        /* state was MENU_OFF, change it to MENU_ON */
        return  MENU_ON;
   80260:	0005883a 	mov	r2,zero

}
   80264:	e037883a 	mov	sp,fp
   80268:	dfc00117 	ldw	ra,4(sp)
   8026c:	df000017 	ldw	fp,0(sp)
   80270:	dec00204 	addi	sp,sp,8
   80274:	f800283a 	ret

00080278 <menu_up>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_up(enum status cur_state)
{
   80278:	defffd04 	addi	sp,sp,-12
   8027c:	dfc00215 	stw	ra,8(sp)
   80280:	df000115 	stw	fp,4(sp)
   80284:	df000104 	addi	fp,sp,4
   80288:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* go to the previous menu entry */
    previous_entry();
   8028c:	0080aa40 	call	80aa4 <previous_entry>


    /* return the current state */
    return  cur_state;
   80290:	e0bfff17 	ldw	r2,-4(fp)

}
   80294:	e037883a 	mov	sp,fp
   80298:	dfc00117 	ldw	ra,4(sp)
   8029c:	df000017 	ldw	fp,0(sp)
   802a0:	dec00204 	addi	sp,sp,8
   802a4:	f800283a 	ret

000802a8 <menu_down>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_down(enum status cur_state)
{
   802a8:	defffd04 	addi	sp,sp,-12
   802ac:	dfc00215 	stw	ra,8(sp)
   802b0:	df000115 	stw	fp,4(sp)
   802b4:	df000104 	addi	fp,sp,4
   802b8:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* go to the next menu entry */
    next_entry();
   802bc:	0080a340 	call	80a34 <next_entry>


    /* return the current state */
    return  cur_state;
   802c0:	e0bfff17 	ldw	r2,-4(fp)

}
   802c4:	e037883a 	mov	sp,fp
   802c8:	dfc00117 	ldw	ra,4(sp)
   802cc:	df000017 	ldw	fp,0(sp)
   802d0:	dec00204 	addi	sp,sp,8
   802d4:	f800283a 	ret

000802d8 <menu_left>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_left(enum status cur_state)
{
   802d8:	defffd04 	addi	sp,sp,-12
   802dc:	dfc00215 	stw	ra,8(sp)
   802e0:	df000115 	stw	fp,4(sp)
   802e4:	df000104 	addi	fp,sp,4
   802e8:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* invoke the <Left> key function for the current menu entry */
    menu_entry_left();
   802ec:	0080b100 	call	80b10 <menu_entry_left>


    /* return the current state */
    return  cur_state;
   802f0:	e0bfff17 	ldw	r2,-4(fp)

}
   802f4:	e037883a 	mov	sp,fp
   802f8:	dfc00117 	ldw	ra,4(sp)
   802fc:	df000017 	ldw	fp,0(sp)
   80300:	dec00204 	addi	sp,sp,8
   80304:	f800283a 	ret

00080308 <menu_right>:
   Last Modified:    Mar. 8, 1994

*/

enum status  menu_right(enum status cur_state)
{
   80308:	defffd04 	addi	sp,sp,-12
   8030c:	dfc00215 	stw	ra,8(sp)
   80310:	df000115 	stw	fp,4(sp)
   80314:	df000104 	addi	fp,sp,4
   80318:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* invoke the <Right> key function for the current menu entry */
    menu_entry_right();
   8031c:	0080bb00 	call	80bb0 <menu_entry_right>


    /* return the current state */
    return  cur_state;
   80320:	e0bfff17 	ldw	r2,-4(fp)

}
   80324:	e037883a 	mov	sp,fp
   80328:	dfc00117 	ldw	ra,4(sp)
   8032c:	df000017 	ldw	fp,0(sp)
   80330:	dec00204 	addi	sp,sp,8
   80334:	f800283a 	ret

00080338 <clear_region>:
   Last Modified:    Mar. 8, 1994

*/

void  clear_region(int x_ul, int y_ul, int x_size, int y_size)
{
   80338:	defff804 	addi	sp,sp,-32
   8033c:	dfc00715 	stw	ra,28(sp)
   80340:	df000615 	stw	fp,24(sp)
   80344:	df000604 	addi	fp,sp,24
   80348:	e13ffc15 	stw	r4,-16(fp)
   8034c:	e17ffd15 	stw	r5,-12(fp)
   80350:	e1bffe15 	stw	r6,-8(fp)
   80354:	e1ffff15 	stw	r7,-4(fp)
    int  y;		/* y coordinate to clear */



    /* loop, clearing the display */
    for (x = x_ul; x < (x_ul + x_size); x++)  {
   80358:	e0bffc17 	ldw	r2,-16(fp)
   8035c:	e0bffa15 	stw	r2,-24(fp)
   80360:	00001406 	br	803b4 <clear_region+0x7c>
        for (y = y_ul; y < (y_ul + y_size); y++)  {
   80364:	e0bffd17 	ldw	r2,-12(fp)
   80368:	e0bffb15 	stw	r2,-20(fp)
   8036c:	00000906 	br	80394 <clear_region+0x5c>

	    /* clear this pixel */
	    plot_pixel(x, y, PIXEL_WHITE);
   80370:	e0fffa17 	ldw	r3,-24(fp)
   80374:	e0bffb17 	ldw	r2,-20(fp)
   80378:	1809883a 	mov	r4,r3
   8037c:	100b883a 	mov	r5,r2
   80380:	01803fc4 	movi	r6,255
   80384:	0082c800 	call	82c80 <plot_pixel>



    /* loop, clearing the display */
    for (x = x_ul; x < (x_ul + x_size); x++)  {
        for (y = y_ul; y < (y_ul + y_size); y++)  {
   80388:	e0bffb17 	ldw	r2,-20(fp)
   8038c:	10800044 	addi	r2,r2,1
   80390:	e0bffb15 	stw	r2,-20(fp)
   80394:	e0fffd17 	ldw	r3,-12(fp)
   80398:	e0bfff17 	ldw	r2,-4(fp)
   8039c:	1885883a 	add	r2,r3,r2
   803a0:	e0fffb17 	ldw	r3,-20(fp)
   803a4:	18bff216 	blt	r3,r2,80370 <clear_region+0x38>
    int  y;		/* y coordinate to clear */



    /* loop, clearing the display */
    for (x = x_ul; x < (x_ul + x_size); x++)  {
   803a8:	e0bffa17 	ldw	r2,-24(fp)
   803ac:	10800044 	addi	r2,r2,1
   803b0:	e0bffa15 	stw	r2,-24(fp)
   803b4:	e0fffc17 	ldw	r3,-16(fp)
   803b8:	e0bffe17 	ldw	r2,-8(fp)
   803bc:	1885883a 	add	r2,r3,r2
   803c0:	e0fffa17 	ldw	r3,-24(fp)
   803c4:	18bfe716 	blt	r3,r2,80364 <clear_region+0x2c>
        }
    }


    /* done clearing the display region - return */
    return;
   803c8:	0001883a 	nop

}
   803cc:	e037883a 	mov	sp,fp
   803d0:	dfc00117 	ldw	ra,4(sp)
   803d4:	df000017 	ldw	fp,0(sp)
   803d8:	dec00204 	addi	sp,sp,8
   803dc:	f800283a 	ret

000803e0 <plot_hline>:
   Last Modified:    Mar. 7, 1994

*/

void  plot_hline(int start_x, int start_y, int length, char color)
{
   803e0:	defff704 	addi	sp,sp,-36
   803e4:	dfc00815 	stw	ra,32(sp)
   803e8:	df000715 	stw	fp,28(sp)
   803ec:	df000704 	addi	fp,sp,28
   803f0:	e13ffc15 	stw	r4,-16(fp)
   803f4:	e17ffd15 	stw	r5,-12(fp)
   803f8:	e1bffe15 	stw	r6,-8(fp)
   803fc:	3805883a 	mov	r2,r7
   80400:	e0bfff05 	stb	r2,-4(fp)
    int  end_x;		/* ending x position to plot */



    /* check if a line to the "right" or "left" */
    if (length > 0)  {
   80404:	e0bffe17 	ldw	r2,-8(fp)
   80408:	0080070e 	bge	zero,r2,80428 <plot_hline+0x48>

        /* line to the "right" - start at start_x, end at start_x + length */
	init_x = start_x;
   8040c:	e0bffc17 	ldw	r2,-16(fp)
   80410:	e0bffa15 	stw	r2,-24(fp)
	end_x = start_x + length;
   80414:	e0fffc17 	ldw	r3,-16(fp)
   80418:	e0bffe17 	ldw	r2,-8(fp)
   8041c:	1885883a 	add	r2,r3,r2
   80420:	e0bffb15 	stw	r2,-20(fp)
   80424:	00000606 	br	80440 <plot_hline+0x60>
    }
    else  {

        /* line to the "left" - start at start_x + length, end at start_x */
	init_x = start_x + length;
   80428:	e0fffc17 	ldw	r3,-16(fp)
   8042c:	e0bffe17 	ldw	r2,-8(fp)
   80430:	1885883a 	add	r2,r3,r2
   80434:	e0bffa15 	stw	r2,-24(fp)
	end_x = start_x;
   80438:	e0bffc17 	ldw	r2,-16(fp)
   8043c:	e0bffb15 	stw	r2,-20(fp)
    }


    /* loop, outputting points for the line (always draw to the "right") */
    for (x = init_x; x < end_x; x++)
   80440:	e0bffa17 	ldw	r2,-24(fp)
   80444:	e0bff915 	stw	r2,-28(fp)
   80448:	00000906 	br	80470 <plot_hline+0x90>
        /* plot a point of the line */
	plot_pixel(x, start_y, color);
   8044c:	e13ff917 	ldw	r4,-28(fp)
   80450:	e0fffd17 	ldw	r3,-12(fp)
   80454:	e0bfff07 	ldb	r2,-4(fp)
   80458:	180b883a 	mov	r5,r3
   8045c:	100d883a 	mov	r6,r2
   80460:	0082c800 	call	82c80 <plot_pixel>
	end_x = start_x;
    }


    /* loop, outputting points for the line (always draw to the "right") */
    for (x = init_x; x < end_x; x++)
   80464:	e0bff917 	ldw	r2,-28(fp)
   80468:	10800044 	addi	r2,r2,1
   8046c:	e0bff915 	stw	r2,-28(fp)
   80470:	e0fff917 	ldw	r3,-28(fp)
   80474:	e0bffb17 	ldw	r2,-20(fp)
   80478:	18bff416 	blt	r3,r2,8044c <plot_hline+0x6c>
        /* plot a point of the line */
	plot_pixel(x, start_y, color);


    /* done plotting the line - return */
    return;
   8047c:	0001883a 	nop

}
   80480:	e037883a 	mov	sp,fp
   80484:	dfc00117 	ldw	ra,4(sp)
   80488:	df000017 	ldw	fp,0(sp)
   8048c:	dec00204 	addi	sp,sp,8
   80490:	f800283a 	ret

00080494 <plot_vline>:
   Last Modified:    Mar. 7, 1994

*/

void  plot_vline(int start_x, int start_y, int length)
{
   80494:	defff804 	addi	sp,sp,-32
   80498:	dfc00715 	stw	ra,28(sp)
   8049c:	df000615 	stw	fp,24(sp)
   804a0:	df000604 	addi	fp,sp,24
   804a4:	e13ffd15 	stw	r4,-12(fp)
   804a8:	e17ffe15 	stw	r5,-8(fp)
   804ac:	e1bfff15 	stw	r6,-4(fp)
    int  end_y;		/* ending y position to plot */



    /* check if an "up" or "down" line */
    if (length > 0)  {
   804b0:	e0bfff17 	ldw	r2,-4(fp)
   804b4:	0080070e 	bge	zero,r2,804d4 <plot_vline+0x40>

        /* line going "down" - start at start_y, end at start_y + length */
	init_y = start_y;
   804b8:	e0bffe17 	ldw	r2,-8(fp)
   804bc:	e0bffb15 	stw	r2,-20(fp)
	end_y = start_y + length;
   804c0:	e0fffe17 	ldw	r3,-8(fp)
   804c4:	e0bfff17 	ldw	r2,-4(fp)
   804c8:	1885883a 	add	r2,r3,r2
   804cc:	e0bffc15 	stw	r2,-16(fp)
   804d0:	00000606 	br	804ec <plot_vline+0x58>
    }
    else  {

        /* line going "up" - start at start_y + length, end at start_y */
	init_y = start_y + length;
   804d4:	e0fffe17 	ldw	r3,-8(fp)
   804d8:	e0bfff17 	ldw	r2,-4(fp)
   804dc:	1885883a 	add	r2,r3,r2
   804e0:	e0bffb15 	stw	r2,-20(fp)
	end_y = start_y;
   804e4:	e0bffe17 	ldw	r2,-8(fp)
   804e8:	e0bffc15 	stw	r2,-16(fp)
    }


    /* loop, outputting points for the line (always draw "down") */
    for (y = init_y; y < end_y; y++)
   804ec:	e0bffb17 	ldw	r2,-20(fp)
   804f0:	e0bffa15 	stw	r2,-24(fp)
   804f4:	00000906 	br	8051c <plot_vline+0x88>
        /* plot a point of the line */
	plot_pixel(start_x, y, PIXEL_BLACK);
   804f8:	e0fffd17 	ldw	r3,-12(fp)
   804fc:	e0bffa17 	ldw	r2,-24(fp)
   80500:	1809883a 	mov	r4,r3
   80504:	100b883a 	mov	r5,r2
   80508:	000d883a 	mov	r6,zero
   8050c:	0082c800 	call	82c80 <plot_pixel>
	end_y = start_y;
    }


    /* loop, outputting points for the line (always draw "down") */
    for (y = init_y; y < end_y; y++)
   80510:	e0bffa17 	ldw	r2,-24(fp)
   80514:	10800044 	addi	r2,r2,1
   80518:	e0bffa15 	stw	r2,-24(fp)
   8051c:	e0fffa17 	ldw	r3,-24(fp)
   80520:	e0bffc17 	ldw	r2,-16(fp)
   80524:	18bff416 	blt	r3,r2,804f8 <plot_vline+0x64>
        /* plot a point of the line */
	plot_pixel(start_x, y, PIXEL_BLACK);


    /* done plotting the line - return */
    return;
   80528:	0001883a 	nop

}
   8052c:	e037883a 	mov	sp,fp
   80530:	dfc00117 	ldw	ra,4(sp)
   80534:	df000017 	ldw	fp,0(sp)
   80538:	dec00204 	addi	sp,sp,8
   8053c:	f800283a 	ret

00080540 <plot_char>:
   Last Modified:    May 27, 2008

*/

void  plot_char(int pos_x, int pos_y, char c, enum char_style style)
{
   80540:	defff504 	addi	sp,sp,-44
   80544:	dfc00a15 	stw	ra,40(sp)
   80548:	df000915 	stw	fp,36(sp)
   8054c:	df000904 	addi	fp,sp,36
   80550:	e13ffc15 	stw	r4,-16(fp)
   80554:	e17ffd15 	stw	r5,-12(fp)
   80558:	3005883a 	mov	r2,r6
   8055c:	e1ffff15 	stw	r7,-4(fp)
   80560:	e0bffe05 	stb	r2,-8(fp)
    int  y;		/* y pixel position for the character */



    /* setup the pixel positions for the character */
    x = pos_x * HORIZ_SIZE;
   80564:	e0bffc17 	ldw	r2,-16(fp)
   80568:	108001a4 	muli	r2,r2,6
   8056c:	e0bffb15 	stw	r2,-20(fp)
    y = pos_y * VERT_SIZE;
   80570:	e0bffd17 	ldw	r2,-12(fp)
   80574:	100490fa 	slli	r2,r2,3
   80578:	e0bffa15 	stw	r2,-24(fp)


    /* loop outputting the bits to the screen */
    for (row = 0; row < VERT_SIZE; row++)  {
   8057c:	e03ff915 	stw	zero,-28(fp)
   80580:	00004006 	br	80684 <plot_char+0x144>

        /* get the character bits for this row from the character table */
	if (row == (VERT_SIZE - 1))
   80584:	e0bff917 	ldw	r2,-28(fp)
   80588:	108001d8 	cmpnei	r2,r2,7
   8058c:	1000021e 	bne	r2,zero,80598 <plot_char+0x58>
	    /* last row - blank it */
	    bits = 0;
   80590:	e03ff715 	stw	zero,-36(fp)
   80594:	00000a06 	br	805c0 <plot_char+0x80>
	else
	    /* in middle of character, get the row from the bit patterns */
            bits = char_patterns[(c * (VERT_SIZE - 1)) + row];
   80598:	e0bffe07 	ldb	r2,-8(fp)
   8059c:	10c001e4 	muli	r3,r2,7
   805a0:	e0bff917 	ldw	r2,-28(fp)
   805a4:	1885883a 	add	r2,r3,r2
   805a8:	00c00234 	movhi	r3,8
   805ac:	18d6f304 	addi	r3,r3,23500
   805b0:	1885883a 	add	r2,r3,r2
   805b4:	10800003 	ldbu	r2,0(r2)
   805b8:	10803fcc 	andi	r2,r2,255
   805bc:	e0bff715 	stw	r2,-36(fp)

	/* take care of "normal/reverse video" */
	if (style == REVERSE)
   805c0:	e0bfff17 	ldw	r2,-4(fp)
   805c4:	10800058 	cmpnei	r2,r2,1
   805c8:	1000031e 	bne	r2,zero,805d8 <plot_char+0x98>
	    /* invert the bits for "reverse video" */
	    bits = ~bits;
   805cc:	e0bff717 	ldw	r2,-36(fp)
   805d0:	0084303a 	nor	r2,zero,r2
   805d4:	e0bff715 	stw	r2,-36(fp)

        /* get the bits "in position" (high bit is output first */
	bits <<= (8 - HORIZ_SIZE);
   805d8:	e0bff717 	ldw	r2,-36(fp)
   805dc:	1085883a 	add	r2,r2,r2
   805e0:	1085883a 	add	r2,r2,r2
   805e4:	e0bff715 	stw	r2,-36(fp)


	/* now output the row of the character, pixel by pixel */
	for (col = 0; col < HORIZ_SIZE; col++)  {
   805e8:	e03ff815 	stw	zero,-32(fp)
   805ec:	00001c06 	br	80660 <plot_char+0x120>

            /* output this pixel in the appropriate color */
	    if ((bits & 0x80) == 0)
   805f0:	e0bff717 	ldw	r2,-36(fp)
   805f4:	1080200c 	andi	r2,r2,128
   805f8:	10000a1e 	bne	r2,zero,80624 <plot_char+0xe4>
	        /* blank pixel - output in PIXEL_WHITE */
		plot_pixel(x + col, y, PIXEL_WHITE);
   805fc:	e0fffb17 	ldw	r3,-20(fp)
   80600:	e0bff817 	ldw	r2,-32(fp)
   80604:	1885883a 	add	r2,r3,r2
   80608:	1007883a 	mov	r3,r2
   8060c:	e0bffa17 	ldw	r2,-24(fp)
   80610:	1809883a 	mov	r4,r3
   80614:	100b883a 	mov	r5,r2
   80618:	01803fc4 	movi	r6,255
   8061c:	0082c800 	call	82c80 <plot_pixel>
   80620:	00000906 	br	80648 <plot_char+0x108>
	    else
	        /* black pixel - output in PIXEL_BLACK */
		plot_pixel(x + col, y, PIXEL_BLACK);
   80624:	e0fffb17 	ldw	r3,-20(fp)
   80628:	e0bff817 	ldw	r2,-32(fp)
   8062c:	1885883a 	add	r2,r3,r2
   80630:	1007883a 	mov	r3,r2
   80634:	e0bffa17 	ldw	r2,-24(fp)
   80638:	1809883a 	mov	r4,r3
   8063c:	100b883a 	mov	r5,r2
   80640:	000d883a 	mov	r6,zero
   80644:	0082c800 	call	82c80 <plot_pixel>

	    /* shift the next bit into position */
	    bits <<= 1;
   80648:	e0bff717 	ldw	r2,-36(fp)
   8064c:	1085883a 	add	r2,r2,r2
   80650:	e0bff715 	stw	r2,-36(fp)
        /* get the bits "in position" (high bit is output first */
	bits <<= (8 - HORIZ_SIZE);


	/* now output the row of the character, pixel by pixel */
	for (col = 0; col < HORIZ_SIZE; col++)  {
   80654:	e0bff817 	ldw	r2,-32(fp)
   80658:	10800044 	addi	r2,r2,1
   8065c:	e0bff815 	stw	r2,-32(fp)
   80660:	e0bff817 	ldw	r2,-32(fp)
   80664:	10800190 	cmplti	r2,r2,6
   80668:	103fe11e 	bne	r2,zero,805f0 <plot_char+0xb0>
	    bits <<= 1;
        }


	/* next row - update the y position */
	y++;
   8066c:	e0bffa17 	ldw	r2,-24(fp)
   80670:	10800044 	addi	r2,r2,1
   80674:	e0bffa15 	stw	r2,-24(fp)
    x = pos_x * HORIZ_SIZE;
    y = pos_y * VERT_SIZE;


    /* loop outputting the bits to the screen */
    for (row = 0; row < VERT_SIZE; row++)  {
   80678:	e0bff917 	ldw	r2,-28(fp)
   8067c:	10800044 	addi	r2,r2,1
   80680:	e0bff915 	stw	r2,-28(fp)
   80684:	e0bff917 	ldw	r2,-28(fp)
   80688:	10800210 	cmplti	r2,r2,8
   8068c:	103fbd1e 	bne	r2,zero,80584 <plot_char+0x44>
	y++;
    }


    /* all done, return */
    return;
   80690:	0001883a 	nop

}
   80694:	e037883a 	mov	sp,fp
   80698:	dfc00117 	ldw	ra,4(sp)
   8069c:	df000017 	ldw	fp,0(sp)
   806a0:	dec00204 	addi	sp,sp,8
   806a4:	f800283a 	ret

000806a8 <plot_string>:
   Last Modified:    Mar. 17, 1997

*/

void  plot_string(int pos_x, int pos_y, const char *s, enum char_style style)
{
   806a8:	defffa04 	addi	sp,sp,-24
   806ac:	dfc00515 	stw	ra,20(sp)
   806b0:	df000415 	stw	fp,16(sp)
   806b4:	df000404 	addi	fp,sp,16
   806b8:	e13ffc15 	stw	r4,-16(fp)
   806bc:	e17ffd15 	stw	r5,-12(fp)
   806c0:	e1bffe15 	stw	r6,-8(fp)
   806c4:	e1ffff15 	stw	r7,-4(fp)
      /* none */



    /* loop, outputting characters from string s */
    while (*s != '\0')
   806c8:	00001106 	br	80710 <plot_string+0x68>

        /* output this character and move to the next character and screen position */
	plot_char(pos_x++, pos_y, *s++, style);
   806cc:	e0fffc17 	ldw	r3,-16(fp)
   806d0:	e0bffc17 	ldw	r2,-16(fp)
   806d4:	10800044 	addi	r2,r2,1
   806d8:	e0bffc15 	stw	r2,-16(fp)
   806dc:	e0bffe17 	ldw	r2,-8(fp)
   806e0:	10800003 	ldbu	r2,0(r2)
   806e4:	10803fcc 	andi	r2,r2,255
   806e8:	1080201c 	xori	r2,r2,128
   806ec:	10bfe004 	addi	r2,r2,-128
   806f0:	e13ffe17 	ldw	r4,-8(fp)
   806f4:	21000044 	addi	r4,r4,1
   806f8:	e13ffe15 	stw	r4,-8(fp)
   806fc:	1809883a 	mov	r4,r3
   80700:	e17ffd17 	ldw	r5,-12(fp)
   80704:	100d883a 	mov	r6,r2
   80708:	e1ffff17 	ldw	r7,-4(fp)
   8070c:	00805400 	call	80540 <plot_char>
      /* none */



    /* loop, outputting characters from string s */
    while (*s != '\0')
   80710:	e0bffe17 	ldw	r2,-8(fp)
   80714:	10800003 	ldbu	r2,0(r2)
   80718:	10803fcc 	andi	r2,r2,255
   8071c:	1080201c 	xori	r2,r2,128
   80720:	10bfe004 	addi	r2,r2,-128
   80724:	103fe91e 	bne	r2,zero,806cc <plot_string+0x24>
        /* output this character and move to the next character and screen position */
	plot_char(pos_x++, pos_y, *s++, style);


    /* all done, return */
    return;
   80728:	0001883a 	nop

}
   8072c:	e037883a 	mov	sp,fp
   80730:	dfc00117 	ldw	ra,4(sp)
   80734:	df000017 	ldw	fp,0(sp)
   80738:	dec00204 	addi	sp,sp,8
   8073c:	f800283a 	ret

00080740 <main>:
   Last Modified:    May 27, 2008

*/

int  main()
{
   80740:	defffb04 	addi	sp,sp,-20
   80744:	dfc00415 	stw	ra,16(sp)
   80748:	df000315 	stw	fp,12(sp)
   8074c:	df000304 	addi	fp,sp,12
    /* variables */
    enum keycode        key;		    /* an input key */

    enum status         state = MENU_ON;    /* current program state */
   80750:	e03ffd15 	stw	zero,-12(fp)
        {  no_action,   no_action   } }; /* illegal key */



    /* first initialize everything */
    clear_display();		/* clear the display */
   80754:	0082c300 	call	82c30 <clear_display>

    init_trace();		/* initialize the trace routines */
   80758:	0081c340 	call	81c34 <init_trace>
    init_menu();		/* initialize the menu system */
   8075c:	00808840 	call	80884 <init_menu>

    Init_Rot();
   80760:	0082aa00 	call	82aa0 <Init_Rot>
   80764:	00000106 	br	8076c <main+0x2c>
	    key = key_lookup();

	    /* execute processing routine for that key */
	    state = process_key[key][state](state);
	}
    }
   80768:	0001883a 	nop
    Init_Rot();
    /* infinite loop processing input */
    while(TRUE)  {

        /* check if ready to do a trace */
	if (trace_rdy())
   8076c:	0081cf00 	call	81cf0 <trace_rdy>
   80770:	10000126 	beq	r2,zero,80778 <main+0x38>
	    /* ready for a trace - do it */
	    do_trace();
   80774:	00826080 	call	82608 <do_trace>
	display_menu();
   80778:	00809200 	call	80920 <display_menu>

	/* check if have a trace to display */
	if (is_sampling() && ((sample = sample_done()) != NULL))  {
   8077c:	0081cd00 	call	81cd0 <is_sampling>
   80780:	10000726 	beq	r2,zero,807a0 <main+0x60>
   80784:	0081ac40 	call	81ac4 <sample_done>
   80788:	e0bffe15 	stw	r2,-8(fp)
   8078c:	e0bffe17 	ldw	r2,-8(fp)
   80790:	10000326 	beq	r2,zero,807a0 <main+0x60>

	    /* have a trace - output it */
	    plot_trace(sample);
   80794:	e13ffe17 	ldw	r4,-8(fp)
   80798:	00826500 	call	82650 <plot_trace>
	    /* done processing this trace */
	    trace_done();
   8079c:	0081d280 	call	81d28 <trace_done>
	}


	/* now check for keypad input */
	if (key_available())  {
   807a0:	0082b800 	call	82b80 <key_available>
   807a4:	10803fcc 	andi	r2,r2,255
   807a8:	103fef26 	beq	r2,zero,80768 <main+0x28>

	    /* have keypad input - get the key */
	    key = key_lookup();
   807ac:	00807ec0 	call	807ec <key_lookup>
   807b0:	e0bfff15 	stw	r2,-4(fp)

	    /* execute processing routine for that key */
	    state = process_key[key][state](state);
   807b4:	00c00234 	movhi	r3,8
   807b8:	18d7de04 	addi	r3,r3,24440
   807bc:	e0bfff17 	ldw	r2,-4(fp)
   807c0:	1089883a 	add	r4,r2,r2
   807c4:	e0bffd17 	ldw	r2,-12(fp)
   807c8:	2085883a 	add	r2,r4,r2
   807cc:	1085883a 	add	r2,r2,r2
   807d0:	1085883a 	add	r2,r2,r2
   807d4:	1885883a 	add	r2,r3,r2
   807d8:	10800017 	ldw	r2,0(r2)
   807dc:	e13ffd17 	ldw	r4,-12(fp)
   807e0:	103ee83a 	callr	r2
   807e4:	e0bffd15 	stw	r2,-12(fp)
	}
    }
   807e8:	003fdf06 	br	80768 <main+0x28>

000807ec <key_lookup>:
   Last Modified:    Mar. 17, 1997

*/

static  enum keycode  key_lookup()
{
   807ec:	defffc04 	addi	sp,sp,-16
   807f0:	dfc00315 	stw	ra,12(sp)
   807f4:	df000215 	stw	fp,8(sp)
   807f8:	df000204 	addi	fp,sp,8
    int  i;           	/* general loop index */



    /* get a key */
    key = get_key();
   807fc:	0082bb00 	call	82bb0 <get_key>
   80800:	10803fcc 	andi	r2,r2,255
   80804:	1080201c 	xori	r2,r2,128
   80808:	10bfe004 	addi	r2,r2,-128
   8080c:	e0bfff15 	stw	r2,-4(fp)


    /* lookup key in keys array */
    for (i = 0; ((i < (sizeof(keys)/sizeof(int))) && (key != keys[i])); i++);
   80810:	e03ffe15 	stw	zero,-8(fp)
   80814:	00000306 	br	80824 <key_lookup+0x38>
   80818:	e0bffe17 	ldw	r2,-8(fp)
   8081c:	10800044 	addi	r2,r2,1
   80820:	e0bffe15 	stw	r2,-8(fp)
   80824:	e0bffe17 	ldw	r2,-8(fp)
   80828:	10800168 	cmpgeui	r2,r2,5
   8082c:	1000091e 	bne	r2,zero,80854 <key_lookup+0x68>
   80830:	00c00234 	movhi	r3,8
   80834:	18d7d304 	addi	r3,r3,24396
   80838:	e0bffe17 	ldw	r2,-8(fp)
   8083c:	1085883a 	add	r2,r2,r2
   80840:	1085883a 	add	r2,r2,r2
   80844:	1885883a 	add	r2,r3,r2
   80848:	10c00017 	ldw	r3,0(r2)
   8084c:	e0bfff17 	ldw	r2,-4(fp)
   80850:	18bff11e 	bne	r3,r2,80818 <key_lookup+0x2c>


    /* return the appropriate key type */
    return  keycodes[i];
   80854:	00c00234 	movhi	r3,8
   80858:	18d7d804 	addi	r3,r3,24416
   8085c:	e0bffe17 	ldw	r2,-8(fp)
   80860:	1085883a 	add	r2,r2,r2
   80864:	1085883a 	add	r2,r2,r2
   80868:	1885883a 	add	r2,r3,r2
   8086c:	10800017 	ldw	r2,0(r2)

}
   80870:	e037883a 	mov	sp,fp
   80874:	dfc00117 	ldw	ra,4(sp)
   80878:	df000017 	ldw	fp,0(sp)
   8087c:	dec00204 	addi	sp,sp,8
   80880:	f800283a 	ret

00080884 <init_menu>:
   Last Modified:    Mar. 17, 1997

*/

void  init_menu(void)
{
   80884:	defffe04 	addi	sp,sp,-8
   80888:	dfc00115 	stw	ra,4(sp)
   8088c:	df000015 	stw	fp,0(sp)
   80890:	d839883a 	mov	fp,sp
      /* none */



    /* set the menu parameters */
    menu_entry = 0;		/* first menu entry */
   80894:	d0201115 	stw	zero,-32700(gp)
    menu_display = FALSE;	/* menu is not currently displayed (but it will be shortly) */
   80898:	d0201015 	stw	zero,-32704(gp)


    /* set the scope (option) parameters */
    set_trigger_mode(NORMAL_TRIGGER);	/* normal triggering */
   8089c:	0009883a 	mov	r4,zero
   808a0:	0080d6c0 	call	80d6c <set_trigger_mode>
    set_scale(SCALE_AXES);		/* scale is axes */
   808a4:	01000044 	movi	r4,1
   808a8:	0080efc0 	call	80efc <set_scale>
    set_sweep(0);			/* first sweep rate */
   808ac:	0009883a 	mov	r4,zero
   808b0:	008106c0 	call	8106c <set_sweep>
    set_trg_level((MIN_TRG_LEVEL_SET + MAX_TRG_LEVEL_SET) / 2);	/* middle trigger level */
   808b4:	01000fc4 	movi	r4,63
   808b8:	00812380 	call	81238 <set_trg_level>
    set_trg_slope(SLOPE_POSITIVE);	/* positive slope */
   808bc:	0009883a 	mov	r4,zero
   808c0:	00813c00 	call	813c0 <set_trg_slope>
    set_trg_delay(MIN_DELAY);		/* minimum delay */
   808c4:	0009883a 	mov	r4,zero
   808c8:	00814c00 	call	814c0 <set_trg_delay>


    /* now display the menu */
    display_menu();
   808cc:	00809200 	call	80920 <display_menu>


    /* done initializing, return */
    return;
   808d0:	0001883a 	nop

}
   808d4:	e037883a 	mov	sp,fp
   808d8:	dfc00117 	ldw	ra,4(sp)
   808dc:	df000017 	ldw	fp,0(sp)
   808e0:	dec00204 	addi	sp,sp,8
   808e4:	f800283a 	ret

000808e8 <clear_menu>:
   Last Modified:    Mar. 13, 1994

*/

void  clear_menu(void)
{
   808e8:	defffe04 	addi	sp,sp,-8
   808ec:	dfc00115 	stw	ra,4(sp)
   808f0:	df000015 	stw	fp,0(sp)
   808f4:	d839883a 	mov	fp,sp
      /* none */



    /* check if the menu is currently being displayed */
    if (menu_display)  {
   808f8:	d0a01017 	ldw	r2,-32704(gp)
   808fc:	10000126 	beq	r2,zero,80904 <clear_menu+0x1c>

        /* menu is being displayed - turn it off and restore the trace in that area */
	restore_menu_trace();
   80900:	00823340 	call	82334 <restore_menu_trace>
    }


    /* no longer displaying the menu */
    menu_display = FALSE;
   80904:	d0201015 	stw	zero,-32704(gp)


    /* all done, return */
    return;
   80908:	0001883a 	nop

}
   8090c:	e037883a 	mov	sp,fp
   80910:	dfc00117 	ldw	ra,4(sp)
   80914:	df000017 	ldw	fp,0(sp)
   80918:	dec00204 	addi	sp,sp,8
   8091c:	f800283a 	ret

00080920 <display_menu>:
   Last Modified:    Mar. 13, 1994

*/

void  display_menu(void)
{
   80920:	defffd04 	addi	sp,sp,-12
   80924:	dfc00215 	stw	ra,8(sp)
   80928:	df000115 	stw	fp,4(sp)
   8092c:	df000104 	addi	fp,sp,4
    int  i;		/* loop index */



    /* check if the menu is currently being displayed */
    if (!menu_display)  {
   80930:	d0a01017 	ldw	r2,-32704(gp)
   80934:	1000121e 	bne	r2,zero,80980 <display_menu+0x60>

        /* menu is not being displayed - turn it on */
	/* display it entry by entry */
	for (i = 0; i < NO_MENU_ENTRIES; i++)  {
   80938:	e03fff15 	stw	zero,-4(fp)
   8093c:	00000d06 	br	80974 <display_menu+0x54>

	    /* display this entry - check if it should be highlighted */
	    if (i == menu_entry)
   80940:	d0a01117 	ldw	r2,-32700(gp)
   80944:	e0ffff17 	ldw	r3,-4(fp)
   80948:	1880041e 	bne	r3,r2,8095c <display_menu+0x3c>
	        /* currently selected entry - highlight it */
	        display_entry(i, TRUE);
   8094c:	e13fff17 	ldw	r4,-4(fp)
   80950:	01400044 	movi	r5,1
   80954:	0080c500 	call	80c50 <display_entry>
   80958:	00000306 	br	80968 <display_menu+0x48>
	    else
	        /* not the currently selected entry - "normal video" */
	        display_entry(i, FALSE);
   8095c:	e13fff17 	ldw	r4,-4(fp)
   80960:	000b883a 	mov	r5,zero
   80964:	0080c500 	call	80c50 <display_entry>
    /* check if the menu is currently being displayed */
    if (!menu_display)  {

        /* menu is not being displayed - turn it on */
	/* display it entry by entry */
	for (i = 0; i < NO_MENU_ENTRIES; i++)  {
   80968:	e0bfff17 	ldw	r2,-4(fp)
   8096c:	10800044 	addi	r2,r2,1
   80970:	e0bfff15 	stw	r2,-4(fp)
   80974:	e0bfff17 	ldw	r2,-4(fp)
   80978:	108001f0 	cmpltui	r2,r2,7
   8097c:	103ff01e 	bne	r2,zero,80940 <display_menu+0x20>
        }
    }


    /* now are displaying the menu */
    menu_display = TRUE;
   80980:	00800044 	movi	r2,1
   80984:	d0a01015 	stw	r2,-32704(gp)


    /* all done, return */
    return;
   80988:	0001883a 	nop

}
   8098c:	e037883a 	mov	sp,fp
   80990:	dfc00117 	ldw	ra,4(sp)
   80994:	df000017 	ldw	fp,0(sp)
   80998:	dec00204 	addi	sp,sp,8
   8099c:	f800283a 	ret

000809a0 <refresh_menu>:
   Last Modified:    Mar. 8, 1994

*/

void  refresh_menu(void)
{
   809a0:	defffe04 	addi	sp,sp,-8
   809a4:	dfc00115 	stw	ra,4(sp)
   809a8:	df000015 	stw	fp,0(sp)
   809ac:	d839883a 	mov	fp,sp
      /* none */



    /* check if the menu is currently being displayed */
    if (menu_display)  {
   809b0:	d0a01017 	ldw	r2,-32704(gp)
   809b4:	10000226 	beq	r2,zero,809c0 <refresh_menu+0x20>

    	/* menu is currently being displayed - need to refresh it */
	/* do this by turning off the display, then forcing it back on */
	menu_display = FALSE;
   809b8:	d0201015 	stw	zero,-32704(gp)
	display_menu();
   809bc:	00809200 	call	80920 <display_menu>
    }


    /* refreshed the menu if it was displayed, now return */
    return;
   809c0:	0001883a 	nop

}
   809c4:	e037883a 	mov	sp,fp
   809c8:	dfc00117 	ldw	ra,4(sp)
   809cc:	df000017 	ldw	fp,0(sp)
   809d0:	dec00204 	addi	sp,sp,8
   809d4:	f800283a 	ret

000809d8 <reset_menu>:
   Last Modified:    Mar. 17, 1997

*/

void  reset_menu(void)
{
   809d8:	defffe04 	addi	sp,sp,-8
   809dc:	dfc00115 	stw	ra,4(sp)
   809e0:	df000015 	stw	fp,0(sp)
   809e4:	d839883a 	mov	fp,sp
      /* none */



    /* check if the menu is currently being displayed */
    if (menu_display)  {
   809e8:	d0a01017 	ldw	r2,-32704(gp)
   809ec:	10000426 	beq	r2,zero,80a00 <reset_menu+0x28>

        /* menu is being displayed */
	/* remove highlight from currently selected entry */
	display_entry(menu_entry, FALSE);
   809f0:	d0a01117 	ldw	r2,-32700(gp)
   809f4:	1009883a 	mov	r4,r2
   809f8:	000b883a 	mov	r5,zero
   809fc:	0080c500 	call	80c50 <display_entry>
    }


    /* reset the currently selected entry */
    menu_entry = 0;
   80a00:	d0201115 	stw	zero,-32700(gp)


    /* finally, highlight the first entry if the menu is being displayed */
    if (menu_display)
   80a04:	d0a01017 	ldw	r2,-32704(gp)
   80a08:	10000426 	beq	r2,zero,80a1c <reset_menu+0x44>
	display_entry(menu_entry, TRUE);
   80a0c:	d0a01117 	ldw	r2,-32700(gp)
   80a10:	1009883a 	mov	r4,r2
   80a14:	01400044 	movi	r5,1
   80a18:	0080c500 	call	80c50 <display_entry>



    /* all done, return */
    return;
   80a1c:	0001883a 	nop

}
   80a20:	e037883a 	mov	sp,fp
   80a24:	dfc00117 	ldw	ra,4(sp)
   80a28:	df000017 	ldw	fp,0(sp)
   80a2c:	dec00204 	addi	sp,sp,8
   80a30:	f800283a 	ret

00080a34 <next_entry>:
   Last Modified:    Mar. 13, 1994

*/

void  next_entry(void)
{
   80a34:	defffe04 	addi	sp,sp,-8
   80a38:	dfc00115 	stw	ra,4(sp)
   80a3c:	df000015 	stw	fp,0(sp)
   80a40:	d839883a 	mov	fp,sp
      /* none */



    /* only update if not at end of the menu */
    if (menu_entry < (NO_MENU_ENTRIES - 1))  {
   80a44:	d0a01117 	ldw	r2,-32700(gp)
   80a48:	108001a8 	cmpgeui	r2,r2,6
   80a4c:	10000f1e 	bne	r2,zero,80a8c <next_entry+0x58>

        /* not at the end of the menu */

	/* turn off current entry if displaying */
	if (menu_display)
   80a50:	d0a01017 	ldw	r2,-32704(gp)
   80a54:	10000426 	beq	r2,zero,80a68 <next_entry+0x34>
            /* displaying menu - turn off currently selected entry */
	    display_entry(menu_entry, FALSE);
   80a58:	d0a01117 	ldw	r2,-32700(gp)
   80a5c:	1009883a 	mov	r4,r2
   80a60:	000b883a 	mov	r5,zero
   80a64:	0080c500 	call	80c50 <display_entry>

	/* update the menu entry to the next one */
	menu_entry++;
   80a68:	d0a01117 	ldw	r2,-32700(gp)
   80a6c:	10800044 	addi	r2,r2,1
   80a70:	d0a01115 	stw	r2,-32700(gp)

	/* now highlight this entry if displaying the menu */
	if (menu_display)
   80a74:	d0a01017 	ldw	r2,-32704(gp)
   80a78:	10000426 	beq	r2,zero,80a8c <next_entry+0x58>
            /* displaying menu - highlight newly selected entry */
	    display_entry(menu_entry, TRUE);
   80a7c:	d0a01117 	ldw	r2,-32700(gp)
   80a80:	1009883a 	mov	r4,r2
   80a84:	01400044 	movi	r5,1
   80a88:	0080c500 	call	80c50 <display_entry>
    }


    /* all done, return */
    return;
   80a8c:	0001883a 	nop

}
   80a90:	e037883a 	mov	sp,fp
   80a94:	dfc00117 	ldw	ra,4(sp)
   80a98:	df000017 	ldw	fp,0(sp)
   80a9c:	dec00204 	addi	sp,sp,8
   80aa0:	f800283a 	ret

00080aa4 <previous_entry>:
   Last Modified:    Mar. 13, 1994

*/

void  previous_entry(void)
{
   80aa4:	defffe04 	addi	sp,sp,-8
   80aa8:	dfc00115 	stw	ra,4(sp)
   80aac:	df000015 	stw	fp,0(sp)
   80ab0:	d839883a 	mov	fp,sp
      /* none */



    /* only update if not at the start of the menu */
    if (menu_entry > 0)  {
   80ab4:	d0a01117 	ldw	r2,-32700(gp)
   80ab8:	00800f0e 	bge	zero,r2,80af8 <previous_entry+0x54>

        /* not at the start of the menu */

	/* turn off current entry if displaying */
	if (menu_display)
   80abc:	d0a01017 	ldw	r2,-32704(gp)
   80ac0:	10000426 	beq	r2,zero,80ad4 <previous_entry+0x30>
            /* displaying menu - turn off currently selected entry */
	    display_entry(menu_entry, FALSE);
   80ac4:	d0a01117 	ldw	r2,-32700(gp)
   80ac8:	1009883a 	mov	r4,r2
   80acc:	000b883a 	mov	r5,zero
   80ad0:	0080c500 	call	80c50 <display_entry>

	/* update the menu entry to the previous one */
	menu_entry--;
   80ad4:	d0a01117 	ldw	r2,-32700(gp)
   80ad8:	10bfffc4 	addi	r2,r2,-1
   80adc:	d0a01115 	stw	r2,-32700(gp)

	/* now highlight this entry if displaying the menu */
	if (menu_display)
   80ae0:	d0a01017 	ldw	r2,-32704(gp)
   80ae4:	10000426 	beq	r2,zero,80af8 <previous_entry+0x54>
            /* displaying menu - highlight newly selected entry */
	    display_entry(menu_entry, TRUE);
   80ae8:	d0a01117 	ldw	r2,-32700(gp)
   80aec:	1009883a 	mov	r4,r2
   80af0:	01400044 	movi	r5,1
   80af4:	0080c500 	call	80c50 <display_entry>

    }


    /* all done, return */
    return;
   80af8:	0001883a 	nop

}
   80afc:	e037883a 	mov	sp,fp
   80b00:	dfc00117 	ldw	ra,4(sp)
   80b04:	df000017 	ldw	fp,0(sp)
   80b08:	dec00204 	addi	sp,sp,8
   80b0c:	f800283a 	ret

00080b10 <menu_entry_left>:
   Last Modified:    May 9, 2006

*/

void  menu_entry_left(void)
{
   80b10:	defffe04 	addi	sp,sp,-8
   80b14:	dfc00115 	stw	ra,4(sp)
   80b18:	df000015 	stw	fp,0(sp)
   80b1c:	d839883a 	mov	fp,sp
       /*  Level           Slope             Delay                        */



    /* invoke the appropriate <Left> key function */
    process[menu_entry]();
   80b20:	d0a01117 	ldw	r2,-32700(gp)
   80b24:	00c00234 	movhi	r3,8
   80b28:	18d81b04 	addi	r3,r3,24684
   80b2c:	1085883a 	add	r2,r2,r2
   80b30:	1085883a 	add	r2,r2,r2
   80b34:	1885883a 	add	r2,r3,r2
   80b38:	10800017 	ldw	r2,0(r2)
   80b3c:	103ee83a 	callr	r2

    /* if displaying menu entries, display the new value */
    /* note: since it is being changed - know this option is selected */
    if (menu_display)  {
   80b40:	d0a01017 	ldw	r2,-32704(gp)
   80b44:	10001426 	beq	r2,zero,80b98 <menu_entry_left+0x88>
        menu[menu_entry].display((MENU_X + menu[menu_entry].opt_off),
   80b48:	d0a01117 	ldw	r2,-32700(gp)
   80b4c:	00c00234 	movhi	r3,8
   80b50:	18d7f804 	addi	r3,r3,24544
   80b54:	1004913a 	slli	r2,r2,4
   80b58:	1885883a 	add	r2,r3,r2
   80b5c:	10800304 	addi	r2,r2,12
   80b60:	11c00017 	ldw	r7,0(r2)
   80b64:	d0a01117 	ldw	r2,-32700(gp)
   80b68:	00c00234 	movhi	r3,8
   80b6c:	18d7f804 	addi	r3,r3,24544
   80b70:	1004913a 	slli	r2,r2,4
   80b74:	1885883a 	add	r2,r3,r2
   80b78:	10800204 	addi	r2,r2,8
   80b7c:	10800017 	ldw	r2,0(r2)
   80b80:	10c00fc4 	addi	r3,r2,63
   80b84:	d0a01117 	ldw	r2,-32700(gp)
   80b88:	1809883a 	mov	r4,r3
   80b8c:	100b883a 	mov	r5,r2
   80b90:	000d883a 	mov	r6,zero
   80b94:	383ee83a 	callr	r7
    			         (MENU_Y + menu_entry), OPTION_SELECTED);
    }


    /* all done, return */
    return;
   80b98:	0001883a 	nop

}
   80b9c:	e037883a 	mov	sp,fp
   80ba0:	dfc00117 	ldw	ra,4(sp)
   80ba4:	df000017 	ldw	fp,0(sp)
   80ba8:	dec00204 	addi	sp,sp,8
   80bac:	f800283a 	ret

00080bb0 <menu_entry_right>:
   Last Modified:    May 9, 2006

*/

void  menu_entry_right(void)
{
   80bb0:	defffe04 	addi	sp,sp,-8
   80bb4:	dfc00115 	stw	ra,4(sp)
   80bb8:	df000015 	stw	fp,0(sp)
   80bbc:	d839883a 	mov	fp,sp
       /*  Level         Slope             Delay                        */



    /* invoke the appropriate <Right> key function */
    process[menu_entry]();
   80bc0:	d0a01117 	ldw	r2,-32700(gp)
   80bc4:	00c00234 	movhi	r3,8
   80bc8:	18d81404 	addi	r3,r3,24656
   80bcc:	1085883a 	add	r2,r2,r2
   80bd0:	1085883a 	add	r2,r2,r2
   80bd4:	1885883a 	add	r2,r3,r2
   80bd8:	10800017 	ldw	r2,0(r2)
   80bdc:	103ee83a 	callr	r2

    /* if displaying menu entries, display the new value */
    /* note: since it is being changed - know this option is selected */
    if (menu_display)  {
   80be0:	d0a01017 	ldw	r2,-32704(gp)
   80be4:	10001426 	beq	r2,zero,80c38 <menu_entry_right+0x88>
        menu[menu_entry].display((MENU_X + menu[menu_entry].opt_off),
   80be8:	d0a01117 	ldw	r2,-32700(gp)
   80bec:	00c00234 	movhi	r3,8
   80bf0:	18d7f804 	addi	r3,r3,24544
   80bf4:	1004913a 	slli	r2,r2,4
   80bf8:	1885883a 	add	r2,r3,r2
   80bfc:	10800304 	addi	r2,r2,12
   80c00:	11c00017 	ldw	r7,0(r2)
   80c04:	d0a01117 	ldw	r2,-32700(gp)
   80c08:	00c00234 	movhi	r3,8
   80c0c:	18d7f804 	addi	r3,r3,24544
   80c10:	1004913a 	slli	r2,r2,4
   80c14:	1885883a 	add	r2,r3,r2
   80c18:	10800204 	addi	r2,r2,8
   80c1c:	10800017 	ldw	r2,0(r2)
   80c20:	10c00fc4 	addi	r3,r2,63
   80c24:	d0a01117 	ldw	r2,-32700(gp)
   80c28:	1809883a 	mov	r4,r3
   80c2c:	100b883a 	mov	r5,r2
   80c30:	000d883a 	mov	r6,zero
   80c34:	383ee83a 	callr	r7
    			         (MENU_Y + menu_entry), OPTION_SELECTED);
    }


    /* all done, return */
    return;
   80c38:	0001883a 	nop

}
   80c3c:	e037883a 	mov	sp,fp
   80c40:	dfc00117 	ldw	ra,4(sp)
   80c44:	df000017 	ldw	fp,0(sp)
   80c48:	dec00204 	addi	sp,sp,8
   80c4c:	f800283a 	ret

00080c50 <display_entry>:
   Last Modified:    Aug. 13, 2004

*/

static void  display_entry(int entry, int selected)
{
   80c50:	defffc04 	addi	sp,sp,-16
   80c54:	dfc00315 	stw	ra,12(sp)
   80c58:	df000215 	stw	fp,8(sp)
   80c5c:	df000204 	addi	fp,sp,8
   80c60:	e13ffe15 	stw	r4,-8(fp)
   80c64:	e17fff15 	stw	r5,-4(fp)
      /* none */



    /* output the menu entry with the appropriate color */
    plot_string((MENU_X + menu[entry].h_off), (MENU_Y + entry), menu[entry].s,
   80c68:	00c00234 	movhi	r3,8
   80c6c:	18d7f804 	addi	r3,r3,24544
   80c70:	e0bffe17 	ldw	r2,-8(fp)
   80c74:	1004913a 	slli	r2,r2,4
   80c78:	1885883a 	add	r2,r3,r2
   80c7c:	10800104 	addi	r2,r2,4
   80c80:	10800017 	ldw	r2,0(r2)
   80c84:	11000fc4 	addi	r4,r2,63
   80c88:	00c00234 	movhi	r3,8
   80c8c:	18d7f804 	addi	r3,r3,24544
   80c90:	e0bffe17 	ldw	r2,-8(fp)
   80c94:	1004913a 	slli	r2,r2,4
   80c98:	1885883a 	add	r2,r3,r2
   80c9c:	10c00017 	ldw	r3,0(r2)
   80ca0:	e0bfff17 	ldw	r2,-4(fp)
   80ca4:	1004c03a 	cmpne	r2,r2,zero
   80ca8:	10803fcc 	andi	r2,r2,255
   80cac:	e17ffe17 	ldw	r5,-8(fp)
   80cb0:	180d883a 	mov	r6,r3
   80cb4:	100f883a 	mov	r7,r2
   80cb8:	00806a80 	call	806a8 <plot_string>
    		(selected ? SELECTED : NORMAL));
    /* also output the menu option with the appropriate color */
    menu[entry].display((MENU_X + menu[entry].opt_off), (MENU_Y + entry),
   80cbc:	00c00234 	movhi	r3,8
   80cc0:	18d7f804 	addi	r3,r3,24544
   80cc4:	e0bffe17 	ldw	r2,-8(fp)
   80cc8:	1004913a 	slli	r2,r2,4
   80ccc:	1885883a 	add	r2,r3,r2
   80cd0:	10800304 	addi	r2,r2,12
   80cd4:	10c00017 	ldw	r3,0(r2)
   80cd8:	01000234 	movhi	r4,8
   80cdc:	2117f804 	addi	r4,r4,24544
   80ce0:	e0bffe17 	ldw	r2,-8(fp)
   80ce4:	1004913a 	slli	r2,r2,4
   80ce8:	2085883a 	add	r2,r4,r2
   80cec:	10800204 	addi	r2,r2,8
   80cf0:	10800017 	ldw	r2,0(r2)
   80cf4:	10800fc4 	addi	r2,r2,63
   80cf8:	1009883a 	mov	r4,r2
   80cfc:	e17ffe17 	ldw	r5,-8(fp)
   80d00:	000d883a 	mov	r6,zero
   80d04:	183ee83a 	callr	r3
    			(selected ? OPTION_SELECTED : OPTION_NORMAL));


    /* all done outputting this menu entry - return */
    return;
   80d08:	0001883a 	nop

}
   80d0c:	e037883a 	mov	sp,fp
   80d10:	dfc00117 	ldw	ra,4(sp)
   80d14:	df000017 	ldw	fp,0(sp)
   80d18:	dec00204 	addi	sp,sp,8
   80d1c:	f800283a 	ret

00080d20 <no_menu_action>:
   Last Modified:    Mar. 8, 1994

*/

void  no_menu_action()
{
   80d20:	deffff04 	addi	sp,sp,-4
   80d24:	df000015 	stw	fp,0(sp)
   80d28:	d839883a 	mov	fp,sp
      /* none */



    /* nothing to do - return */
    return;
   80d2c:	0001883a 	nop

}
   80d30:	e037883a 	mov	sp,fp
   80d34:	df000017 	ldw	fp,0(sp)
   80d38:	dec00104 	addi	sp,sp,4
   80d3c:	f800283a 	ret

00080d40 <no_display>:
   Last Modified:    Mar. 8, 1994

*/

void  no_display(int x_pos, int y_pos, int style)
{
   80d40:	defffc04 	addi	sp,sp,-16
   80d44:	df000315 	stw	fp,12(sp)
   80d48:	df000304 	addi	fp,sp,12
   80d4c:	e13ffd15 	stw	r4,-12(fp)
   80d50:	e17ffe15 	stw	r5,-8(fp)
   80d54:	e1bfff15 	stw	r6,-4(fp)
      /* none */



    /* nothing to do - return */
    return;
   80d58:	0001883a 	nop

}
   80d5c:	e037883a 	mov	sp,fp
   80d60:	df000017 	ldw	fp,0(sp)
   80d64:	dec00104 	addi	sp,sp,4
   80d68:	f800283a 	ret

00080d6c <set_trigger_mode>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trigger_mode(enum trigger_type m)
{
   80d6c:	defffd04 	addi	sp,sp,-12
   80d70:	dfc00215 	stw	ra,8(sp)
   80d74:	df000115 	stw	fp,4(sp)
   80d78:	df000104 	addi	fp,sp,4
   80d7c:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the trigger mode */
    trigger_mode = m;
   80d80:	e0bfff17 	ldw	r2,-4(fp)
   80d84:	d0a01215 	stw	r2,-32696(gp)

    /* set the new mode */
    set_mode(trigger_mode);
   80d88:	d0a01217 	ldw	r2,-32696(gp)
   80d8c:	1009883a 	mov	r4,r2
   80d90:	0081c980 	call	81c98 <set_mode>


    /* all done setting the trigger mode - return */
    return;
   80d94:	0001883a 	nop

}
   80d98:	e037883a 	mov	sp,fp
   80d9c:	dfc00117 	ldw	ra,4(sp)
   80da0:	df000017 	ldw	fp,0(sp)
   80da4:	dec00204 	addi	sp,sp,8
   80da8:	f800283a 	ret

00080dac <get_trigger_mode>:
   Last Modified:    May 9, 2006

*/

enum trigger_type  get_trigger_mode()
{
   80dac:	deffff04 	addi	sp,sp,-4
   80db0:	df000015 	stw	fp,0(sp)
   80db4:	d839883a 	mov	fp,sp
      /* none */



    /* return the current trigger mode */
    return  trigger_mode;
   80db8:	d0a01217 	ldw	r2,-32696(gp)

}
   80dbc:	e037883a 	mov	sp,fp
   80dc0:	df000017 	ldw	fp,0(sp)
   80dc4:	dec00104 	addi	sp,sp,4
   80dc8:	f800283a 	ret

00080dcc <mode_down>:
   Last Modified:    May 9, 2006

*/

void  mode_down()
{
   80dcc:	defffe04 	addi	sp,sp,-8
   80dd0:	dfc00115 	stw	ra,4(sp)
   80dd4:	df000015 	stw	fp,0(sp)
   80dd8:	d839883a 	mov	fp,sp
      /* none */



    /* move to the "next" triggering mode */
    if (trigger_mode == NORMAL_TRIGGER)
   80ddc:	d0a01217 	ldw	r2,-32696(gp)
   80de0:	1000031e 	bne	r2,zero,80df0 <mode_down+0x24>
        trigger_mode = AUTO_TRIGGER;
   80de4:	00800044 	movi	r2,1
   80de8:	d0a01215 	stw	r2,-32696(gp)
   80dec:	00000706 	br	80e0c <mode_down+0x40>
    else if (trigger_mode == AUTO_TRIGGER)
   80df0:	d0a01217 	ldw	r2,-32696(gp)
   80df4:	10800058 	cmpnei	r2,r2,1
   80df8:	1000031e 	bne	r2,zero,80e08 <mode_down+0x3c>
        trigger_mode = ONESHOT_TRIGGER;
   80dfc:	00800084 	movi	r2,2
   80e00:	d0a01215 	stw	r2,-32696(gp)
   80e04:	00000106 	br	80e0c <mode_down+0x40>
    else
        trigger_mode = NORMAL_TRIGGER;
   80e08:	d0201215 	stw	zero,-32696(gp)

    /* set the new mode */
    set_mode(trigger_mode);
   80e0c:	d0a01217 	ldw	r2,-32696(gp)
   80e10:	1009883a 	mov	r4,r2
   80e14:	0081c980 	call	81c98 <set_mode>


    /* all done with the trigger mode - return */
    return;
   80e18:	0001883a 	nop

}
   80e1c:	e037883a 	mov	sp,fp
   80e20:	dfc00117 	ldw	ra,4(sp)
   80e24:	df000017 	ldw	fp,0(sp)
   80e28:	dec00204 	addi	sp,sp,8
   80e2c:	f800283a 	ret

00080e30 <mode_up>:
   Last Modified:    May 9, 2006

*/

void  mode_up()
{
   80e30:	defffe04 	addi	sp,sp,-8
   80e34:	dfc00115 	stw	ra,4(sp)
   80e38:	df000015 	stw	fp,0(sp)
   80e3c:	d839883a 	mov	fp,sp
      /* none */



    /* move to the "previous" triggering mode */
    if (trigger_mode == NORMAL_TRIGGER)
   80e40:	d0a01217 	ldw	r2,-32696(gp)
   80e44:	1000031e 	bne	r2,zero,80e54 <mode_up+0x24>
        trigger_mode = ONESHOT_TRIGGER;
   80e48:	00800084 	movi	r2,2
   80e4c:	d0a01215 	stw	r2,-32696(gp)
   80e50:	00000706 	br	80e70 <mode_up+0x40>
    else if (trigger_mode == AUTO_TRIGGER)
   80e54:	d0a01217 	ldw	r2,-32696(gp)
   80e58:	10800058 	cmpnei	r2,r2,1
   80e5c:	1000021e 	bne	r2,zero,80e68 <mode_up+0x38>
        trigger_mode = NORMAL_TRIGGER;
   80e60:	d0201215 	stw	zero,-32696(gp)
   80e64:	00000206 	br	80e70 <mode_up+0x40>
    else
        trigger_mode = AUTO_TRIGGER;
   80e68:	00800044 	movi	r2,1
   80e6c:	d0a01215 	stw	r2,-32696(gp)

    /* set the new mode */
    set_mode(trigger_mode);
   80e70:	d0a01217 	ldw	r2,-32696(gp)
   80e74:	1009883a 	mov	r4,r2
   80e78:	0081c980 	call	81c98 <set_mode>


    /* all done with the trigger mode - return */
    return;
   80e7c:	0001883a 	nop

}
   80e80:	e037883a 	mov	sp,fp
   80e84:	dfc00117 	ldw	ra,4(sp)
   80e88:	df000017 	ldw	fp,0(sp)
   80e8c:	dec00204 	addi	sp,sp,8
   80e90:	f800283a 	ret

00080e94 <display_mode>:
   Last Modified:    May 9, 2006

*/

void  display_mode(int x_pos, int y_pos, int style)
{
   80e94:	defffb04 	addi	sp,sp,-20
   80e98:	dfc00415 	stw	ra,16(sp)
   80e9c:	df000315 	stw	fp,12(sp)
   80ea0:	df000304 	addi	fp,sp,12
   80ea4:	e13ffd15 	stw	r4,-12(fp)
   80ea8:	e17ffe15 	stw	r5,-8(fp)
   80eac:	e1bfff15 	stw	r6,-4(fp)
                                             " One-Shot "  };



    /* display the trigger mode */
    plot_string(x_pos, y_pos, modes[trigger_mode], style);
   80eb0:	d0a01217 	ldw	r2,-32696(gp)
   80eb4:	00c00234 	movhi	r3,8
   80eb8:	18d87a04 	addi	r3,r3,25064
   80ebc:	1085883a 	add	r2,r2,r2
   80ec0:	1085883a 	add	r2,r2,r2
   80ec4:	1885883a 	add	r2,r3,r2
   80ec8:	10c00017 	ldw	r3,0(r2)
   80ecc:	e0bfff17 	ldw	r2,-4(fp)
   80ed0:	e13ffd17 	ldw	r4,-12(fp)
   80ed4:	e17ffe17 	ldw	r5,-8(fp)
   80ed8:	180d883a 	mov	r6,r3
   80edc:	100f883a 	mov	r7,r2
   80ee0:	00806a80 	call	806a8 <plot_string>


    /* all done displaying the trigger mode - return */
    return;
   80ee4:	0001883a 	nop

}
   80ee8:	e037883a 	mov	sp,fp
   80eec:	dfc00117 	ldw	ra,4(sp)
   80ef0:	df000017 	ldw	fp,0(sp)
   80ef4:	dec00204 	addi	sp,sp,8
   80ef8:	f800283a 	ret

00080efc <set_scale>:
   Last Modified:    Mar. 13, 1994

*/

void  set_scale(enum scale_type s)
{
   80efc:	defffd04 	addi	sp,sp,-12
   80f00:	dfc00215 	stw	ra,8(sp)
   80f04:	df000115 	stw	fp,4(sp)
   80f08:	df000104 	addi	fp,sp,4
   80f0c:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the scale type */
    scale = s;
   80f10:	e0bfff17 	ldw	r2,-4(fp)
   80f14:	d0a01315 	stw	r2,-32692(gp)

    /* output the scale appropriately */
    set_display_scale(scale);
   80f18:	d0a01317 	ldw	r2,-32692(gp)
   80f1c:	1009883a 	mov	r4,r2
   80f20:	0081dbc0 	call	81dbc <set_display_scale>


    /* all done setting the scale type - return */
    return;
   80f24:	0001883a 	nop

}
   80f28:	e037883a 	mov	sp,fp
   80f2c:	dfc00117 	ldw	ra,4(sp)
   80f30:	df000017 	ldw	fp,0(sp)
   80f34:	dec00204 	addi	sp,sp,8
   80f38:	f800283a 	ret

00080f3c <scale_down>:
   Last Modified:    May 9, 2006

*/

void  scale_down()
{
   80f3c:	defffe04 	addi	sp,sp,-8
   80f40:	dfc00115 	stw	ra,4(sp)
   80f44:	df000015 	stw	fp,0(sp)
   80f48:	d839883a 	mov	fp,sp
      /* none */



    /* change to the "next" scale type */
    if (scale == SCALE_NONE)
   80f4c:	d0a01317 	ldw	r2,-32692(gp)
   80f50:	1000031e 	bne	r2,zero,80f60 <scale_down+0x24>
        scale = SCALE_AXES;
   80f54:	00800044 	movi	r2,1
   80f58:	d0a01315 	stw	r2,-32692(gp)
   80f5c:	00000706 	br	80f7c <scale_down+0x40>
    else if (scale == SCALE_AXES)
   80f60:	d0a01317 	ldw	r2,-32692(gp)
   80f64:	10800058 	cmpnei	r2,r2,1
   80f68:	1000031e 	bne	r2,zero,80f78 <scale_down+0x3c>
        scale = SCALE_GRID;
   80f6c:	00800084 	movi	r2,2
   80f70:	d0a01315 	stw	r2,-32692(gp)
   80f74:	00000106 	br	80f7c <scale_down+0x40>
    else
        scale = SCALE_NONE;
   80f78:	d0201315 	stw	zero,-32692(gp)

    /* set the scale type */
    set_display_scale(scale);
   80f7c:	d0a01317 	ldw	r2,-32692(gp)
   80f80:	1009883a 	mov	r4,r2
   80f84:	0081dbc0 	call	81dbc <set_display_scale>


    /* all done with toggling the scale type - return */
    return;
   80f88:	0001883a 	nop

}
   80f8c:	e037883a 	mov	sp,fp
   80f90:	dfc00117 	ldw	ra,4(sp)
   80f94:	df000017 	ldw	fp,0(sp)
   80f98:	dec00204 	addi	sp,sp,8
   80f9c:	f800283a 	ret

00080fa0 <scale_up>:
   Last Modified:    May 9, 2006

*/

void  scale_up()
{
   80fa0:	defffe04 	addi	sp,sp,-8
   80fa4:	dfc00115 	stw	ra,4(sp)
   80fa8:	df000015 	stw	fp,0(sp)
   80fac:	d839883a 	mov	fp,sp
      /* none */



    /* change to the "previous" scale type */
    if (scale == SCALE_NONE)
   80fb0:	d0a01317 	ldw	r2,-32692(gp)
   80fb4:	1000031e 	bne	r2,zero,80fc4 <scale_up+0x24>
        scale = SCALE_GRID;
   80fb8:	00800084 	movi	r2,2
   80fbc:	d0a01315 	stw	r2,-32692(gp)
   80fc0:	00000706 	br	80fe0 <scale_up+0x40>
    else if (scale == SCALE_AXES)
   80fc4:	d0a01317 	ldw	r2,-32692(gp)
   80fc8:	10800058 	cmpnei	r2,r2,1
   80fcc:	1000021e 	bne	r2,zero,80fd8 <scale_up+0x38>
        scale = SCALE_NONE;
   80fd0:	d0201315 	stw	zero,-32692(gp)
   80fd4:	00000206 	br	80fe0 <scale_up+0x40>
    else
        scale = SCALE_AXES;
   80fd8:	00800044 	movi	r2,1
   80fdc:	d0a01315 	stw	r2,-32692(gp)

    /* set the scale type */
    set_display_scale(scale);
   80fe0:	d0a01317 	ldw	r2,-32692(gp)
   80fe4:	1009883a 	mov	r4,r2
   80fe8:	0081dbc0 	call	81dbc <set_display_scale>


    /* all done with toggling the scale type - return */
    return;
   80fec:	0001883a 	nop

}
   80ff0:	e037883a 	mov	sp,fp
   80ff4:	dfc00117 	ldw	ra,4(sp)
   80ff8:	df000017 	ldw	fp,0(sp)
   80ffc:	dec00204 	addi	sp,sp,8
   81000:	f800283a 	ret

00081004 <display_scale>:
   Last Modified:    Mar. 13, 1994

*/

void  display_scale(int x_pos, int y_pos, int style)
{
   81004:	defffb04 	addi	sp,sp,-20
   81008:	dfc00415 	stw	ra,16(sp)
   8100c:	df000315 	stw	fp,12(sp)
   81010:	df000304 	addi	fp,sp,12
   81014:	e13ffd15 	stw	r4,-12(fp)
   81018:	e17ffe15 	stw	r5,-8(fp)
   8101c:	e1bfff15 	stw	r6,-4(fp)
                                                  " Grid"  };



    /* display the scale status */
    plot_string(x_pos, y_pos, scale_stat[scale], style);
   81020:	d0a01317 	ldw	r2,-32692(gp)
   81024:	00c00234 	movhi	r3,8
   81028:	18d86e04 	addi	r3,r3,25016
   8102c:	1085883a 	add	r2,r2,r2
   81030:	1085883a 	add	r2,r2,r2
   81034:	1885883a 	add	r2,r3,r2
   81038:	10c00017 	ldw	r3,0(r2)
   8103c:	e0bfff17 	ldw	r2,-4(fp)
   81040:	e13ffd17 	ldw	r4,-12(fp)
   81044:	e17ffe17 	ldw	r5,-8(fp)
   81048:	180d883a 	mov	r6,r3
   8104c:	100f883a 	mov	r7,r2
   81050:	00806a80 	call	806a8 <plot_string>


    /* all done displaying the scale status - return */
    return;
   81054:	0001883a 	nop

}
   81058:	e037883a 	mov	sp,fp
   8105c:	dfc00117 	ldw	ra,4(sp)
   81060:	df000017 	ldw	fp,0(sp)
   81064:	dec00204 	addi	sp,sp,8
   81068:	f800283a 	ret

0008106c <set_sweep>:
   Last Modified:    Mar. 8, 1994

*/

void  set_sweep(int s)
{
   8106c:	defffc04 	addi	sp,sp,-16
   81070:	dfc00315 	stw	ra,12(sp)
   81074:	df000215 	stw	fp,8(sp)
   81078:	df000204 	addi	fp,sp,8
   8107c:	e13fff15 	stw	r4,-4(fp)
    int  sample_size;		/* sample size for this sweep rate */



    /* set the new sweep rate */
    sweep = s;
   81080:	e0bfff17 	ldw	r2,-4(fp)
   81084:	d0a01415 	stw	r2,-32688(gp)

    /* set the sweep rate for the hardware */
    sample_size = set_sample_rate(sweep_rates[sweep].sample_rate);
   81088:	d0a01417 	ldw	r2,-32688(gp)
   8108c:	00c00234 	movhi	r3,8
   81090:	18d84404 	addi	r3,r3,24848
   81094:	100490fa 	slli	r2,r2,3
   81098:	1885883a 	add	r2,r3,r2
   8109c:	10800017 	ldw	r2,0(r2)
   810a0:	1009883a 	mov	r4,r2
   810a4:	0081a280 	call	81a28 <set_sample_rate>
   810a8:	e0bffe15 	stw	r2,-8(fp)
    /* also set the sample size for the trace capture */
    set_trace_size(sample_size);
   810ac:	e13ffe17 	ldw	r4,-8(fp)
   810b0:	0081d900 	call	81d90 <set_trace_size>


    /* all done initializing the sweep rate - return */
    return;
   810b4:	0001883a 	nop

}
   810b8:	e037883a 	mov	sp,fp
   810bc:	dfc00117 	ldw	ra,4(sp)
   810c0:	df000017 	ldw	fp,0(sp)
   810c4:	dec00204 	addi	sp,sp,8
   810c8:	f800283a 	ret

000810cc <sweep_down>:
   Last Modified:    Mar. 8, 1994

*/

void  sweep_down()
{
   810cc:	defffd04 	addi	sp,sp,-12
   810d0:	dfc00215 	stw	ra,8(sp)
   810d4:	df000115 	stw	fp,4(sp)
   810d8:	df000104 	addi	fp,sp,4
    int  sample_size;		/* sample size for the new sweep rate */



    /* decrease the sweep rate, if not already the minimum */
    if (sweep > 0)  {
   810dc:	d0a01417 	ldw	r2,-32688(gp)
   810e0:	0080090e 	bge	zero,r2,81108 <sweep_down+0x3c>
        /* not at minimum, adjust delay for new sweep */
	adjust_trg_delay(sweep, (sweep - 1));
   810e4:	d0e01417 	ldw	r3,-32688(gp)
   810e8:	d0a01417 	ldw	r2,-32688(gp)
   810ec:	10bfffc4 	addi	r2,r2,-1
   810f0:	1809883a 	mov	r4,r3
   810f4:	100b883a 	mov	r5,r2
   810f8:	00815940 	call	81594 <adjust_trg_delay>
	/* now set new sweep rate */
        sweep--;
   810fc:	d0a01417 	ldw	r2,-32688(gp)
   81100:	10bfffc4 	addi	r2,r2,-1
   81104:	d0a01415 	stw	r2,-32688(gp)
    }

    /* set the sweep rate for the hardware */
    sample_size = set_sample_rate(sweep_rates[sweep].sample_rate);
   81108:	d0a01417 	ldw	r2,-32688(gp)
   8110c:	00c00234 	movhi	r3,8
   81110:	18d84404 	addi	r3,r3,24848
   81114:	100490fa 	slli	r2,r2,3
   81118:	1885883a 	add	r2,r3,r2
   8111c:	10800017 	ldw	r2,0(r2)
   81120:	1009883a 	mov	r4,r2
   81124:	0081a280 	call	81a28 <set_sample_rate>
   81128:	e0bfff15 	stw	r2,-4(fp)
    /* also set the sample size for the trace capture */
    set_trace_size(sample_size);
   8112c:	e13fff17 	ldw	r4,-4(fp)
   81130:	0081d900 	call	81d90 <set_trace_size>


    /* all done with lowering the sweep rate - return */
    return;
   81134:	0001883a 	nop

}
   81138:	e037883a 	mov	sp,fp
   8113c:	dfc00117 	ldw	ra,4(sp)
   81140:	df000017 	ldw	fp,0(sp)
   81144:	dec00204 	addi	sp,sp,8
   81148:	f800283a 	ret

0008114c <sweep_up>:
   Last Modified:    Mar. 8, 1994

*/

void  sweep_up()
{
   8114c:	defffd04 	addi	sp,sp,-12
   81150:	dfc00215 	stw	ra,8(sp)
   81154:	df000115 	stw	fp,4(sp)
   81158:	df000104 	addi	fp,sp,4
    int  sample_size;		/* sample size for the new sweep rate */



    /* increase the sweep rate, if not already the maximum */
    if (sweep < (NO_SWEEP_RATES - 1))  {
   8115c:	d0a01417 	ldw	r2,-32688(gp)
   81160:	10800428 	cmpgeui	r2,r2,16
   81164:	1000091e 	bne	r2,zero,8118c <sweep_up+0x40>
        /* not at maximum, adjust delay for new sweep */
	adjust_trg_delay(sweep, (sweep + 1));
   81168:	d0e01417 	ldw	r3,-32688(gp)
   8116c:	d0a01417 	ldw	r2,-32688(gp)
   81170:	10800044 	addi	r2,r2,1
   81174:	1809883a 	mov	r4,r3
   81178:	100b883a 	mov	r5,r2
   8117c:	00815940 	call	81594 <adjust_trg_delay>
	/* now set new sweep rate */
        sweep++;
   81180:	d0a01417 	ldw	r2,-32688(gp)
   81184:	10800044 	addi	r2,r2,1
   81188:	d0a01415 	stw	r2,-32688(gp)
    }

    /* set the sweep rate for the hardware */
    sample_size = set_sample_rate(sweep_rates[sweep].sample_rate);
   8118c:	d0a01417 	ldw	r2,-32688(gp)
   81190:	00c00234 	movhi	r3,8
   81194:	18d84404 	addi	r3,r3,24848
   81198:	100490fa 	slli	r2,r2,3
   8119c:	1885883a 	add	r2,r3,r2
   811a0:	10800017 	ldw	r2,0(r2)
   811a4:	1009883a 	mov	r4,r2
   811a8:	0081a280 	call	81a28 <set_sample_rate>
   811ac:	e0bfff15 	stw	r2,-4(fp)
    /* also set the sample size for the trace capture */
    set_trace_size(sample_size);
   811b0:	e13fff17 	ldw	r4,-4(fp)
   811b4:	0081d900 	call	81d90 <set_trace_size>


    /* all done with raising the sweep rate - return */
    return;
   811b8:	0001883a 	nop

}
   811bc:	e037883a 	mov	sp,fp
   811c0:	dfc00117 	ldw	ra,4(sp)
   811c4:	df000017 	ldw	fp,0(sp)
   811c8:	dec00204 	addi	sp,sp,8
   811cc:	f800283a 	ret

000811d0 <display_sweep>:
   Last Modified:    Mar. 8, 1994

*/

void  display_sweep(int x_pos, int y_pos, int style)
{
   811d0:	defffb04 	addi	sp,sp,-20
   811d4:	dfc00415 	stw	ra,16(sp)
   811d8:	df000315 	stw	fp,12(sp)
   811dc:	df000304 	addi	fp,sp,12
   811e0:	e13ffd15 	stw	r4,-12(fp)
   811e4:	e17ffe15 	stw	r5,-8(fp)
   811e8:	e1bfff15 	stw	r6,-4(fp)
      /* none */



    /* display the sweep rate */
    plot_string(x_pos, y_pos, sweep_rates[sweep].s, style);
   811ec:	d0a01417 	ldw	r2,-32688(gp)
   811f0:	00c00234 	movhi	r3,8
   811f4:	18d84404 	addi	r3,r3,24848
   811f8:	100490fa 	slli	r2,r2,3
   811fc:	1885883a 	add	r2,r3,r2
   81200:	10800104 	addi	r2,r2,4
   81204:	10c00017 	ldw	r3,0(r2)
   81208:	e0bfff17 	ldw	r2,-4(fp)
   8120c:	e13ffd17 	ldw	r4,-12(fp)
   81210:	e17ffe17 	ldw	r5,-8(fp)
   81214:	180d883a 	mov	r6,r3
   81218:	100f883a 	mov	r7,r2
   8121c:	00806a80 	call	806a8 <plot_string>


    /* all done displaying the sweep rate - return */
    return;
   81220:	0001883a 	nop

}
   81224:	e037883a 	mov	sp,fp
   81228:	dfc00117 	ldw	ra,4(sp)
   8122c:	df000017 	ldw	fp,0(sp)
   81230:	dec00204 	addi	sp,sp,8
   81234:	f800283a 	ret

00081238 <set_trg_level>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trg_level(int l)
{
   81238:	defffd04 	addi	sp,sp,-12
   8123c:	dfc00215 	stw	ra,8(sp)
   81240:	df000115 	stw	fp,4(sp)
   81244:	df000104 	addi	fp,sp,4
   81248:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the trigger level */
    level = l;
   8124c:	e0bfff17 	ldw	r2,-4(fp)
   81250:	d0a01515 	stw	r2,-32684(gp)

    /* set the trigger level in hardware too */
    set_trigger(level, slope);
   81254:	d0e01517 	ldw	r3,-32684(gp)
   81258:	d0a01617 	ldw	r2,-32680(gp)
   8125c:	1809883a 	mov	r4,r3
   81260:	100b883a 	mov	r5,r2
   81264:	0081a4c0 	call	81a4c <set_trigger>


    /* all done initializing the trigger level - return */
    return;
   81268:	0001883a 	nop

}
   8126c:	e037883a 	mov	sp,fp
   81270:	dfc00117 	ldw	ra,4(sp)
   81274:	df000017 	ldw	fp,0(sp)
   81278:	dec00204 	addi	sp,sp,8
   8127c:	f800283a 	ret

00081280 <trg_level_down>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_level_down()
{
   81280:	defffe04 	addi	sp,sp,-8
   81284:	dfc00115 	stw	ra,4(sp)
   81288:	df000015 	stw	fp,0(sp)
   8128c:	d839883a 	mov	fp,sp
      /* none */



    /* decrease the trigger level, if not already the minimum */
    if (level > MIN_TRG_LEVEL_SET)
   81290:	d0a01517 	ldw	r2,-32684(gp)
   81294:	0080030e 	bge	zero,r2,812a4 <trg_level_down+0x24>
        level--;
   81298:	d0a01517 	ldw	r2,-32684(gp)
   8129c:	10bfffc4 	addi	r2,r2,-1
   812a0:	d0a01515 	stw	r2,-32684(gp)

    /* set the trigger level for the hardware */
    set_trigger(level, slope);
   812a4:	d0e01517 	ldw	r3,-32684(gp)
   812a8:	d0a01617 	ldw	r2,-32680(gp)
   812ac:	1809883a 	mov	r4,r3
   812b0:	100b883a 	mov	r5,r2
   812b4:	0081a4c0 	call	81a4c <set_trigger>


    /* all done with lowering the trigger level - return */
    return;
   812b8:	0001883a 	nop

}
   812bc:	e037883a 	mov	sp,fp
   812c0:	dfc00117 	ldw	ra,4(sp)
   812c4:	df000017 	ldw	fp,0(sp)
   812c8:	dec00204 	addi	sp,sp,8
   812cc:	f800283a 	ret

000812d0 <trg_level_up>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_level_up()
{
   812d0:	defffe04 	addi	sp,sp,-8
   812d4:	dfc00115 	stw	ra,4(sp)
   812d8:	df000015 	stw	fp,0(sp)
   812dc:	d839883a 	mov	fp,sp
      /* none */



    /* increase the trigger level, if not already the maximum */
    if (level < MAX_TRG_LEVEL_SET)
   812e0:	d0a01517 	ldw	r2,-32684(gp)
   812e4:	10801fc8 	cmpgei	r2,r2,127
   812e8:	1000031e 	bne	r2,zero,812f8 <trg_level_up+0x28>
        level++;
   812ec:	d0a01517 	ldw	r2,-32684(gp)
   812f0:	10800044 	addi	r2,r2,1
   812f4:	d0a01515 	stw	r2,-32684(gp)

    /* tell the hardware the new trigger level */
    set_trigger(level, slope);
   812f8:	d0e01517 	ldw	r3,-32684(gp)
   812fc:	d0a01617 	ldw	r2,-32680(gp)
   81300:	1809883a 	mov	r4,r3
   81304:	100b883a 	mov	r5,r2
   81308:	0081a4c0 	call	81a4c <set_trigger>


    /* all done raising the trigger level - return */
    return;
   8130c:	0001883a 	nop

}
   81310:	e037883a 	mov	sp,fp
   81314:	dfc00117 	ldw	ra,4(sp)
   81318:	df000017 	ldw	fp,0(sp)
   8131c:	dec00204 	addi	sp,sp,8
   81320:	f800283a 	ret

00081324 <display_trg_level>:
   Last Modified:    Mar. 10, 1995

*/

void  display_trg_level(int x_pos, int y_pos, int style)
{
   81324:	defff704 	addi	sp,sp,-36
   81328:	dfc00815 	stw	ra,32(sp)
   8132c:	df000715 	stw	fp,28(sp)
   81330:	df000704 	addi	fp,sp,28
   81334:	e13ffd15 	stw	r4,-12(fp)
   81338:	e17ffe15 	stw	r5,-8(fp)
   8133c:	e1bfff15 	stw	r6,-4(fp)
    /* variables */
    char      level_str[] = "        "; /* string containing the trigger level */
   81340:	00880834 	movhi	r2,8224
   81344:	10880804 	addi	r2,r2,8224
   81348:	e0bffa15 	stw	r2,-24(fp)
   8134c:	00880834 	movhi	r2,8224
   81350:	10880804 	addi	r2,r2,8224
   81354:	e0bffb15 	stw	r2,-20(fp)
   81358:	e03ffc05 	stb	zero,-16(fp)
    long int  l;			/* trigger level in mV */



    /* compute the trigger level in millivolts */
    l = ((long int) MAX_LEVEL - MIN_LEVEL) * level / (MAX_TRG_LEVEL_SET - MIN_TRG_LEVEL_SET) + MIN_LEVEL;
   8135c:	d0a01517 	ldw	r2,-32684(gp)
   81360:	1084e224 	muli	r2,r2,5000
   81364:	1009883a 	mov	r4,r2
   81368:	01401fc4 	movi	r5,127
   8136c:	0082d140 	call	82d14 <__divsi3>
   81370:	e0bff915 	stw	r2,-28(fp)

    /* convert the level to the string (leave first character blank) */
    cvt_num_field(l, &level_str[1]);
   81374:	e0bffa04 	addi	r2,fp,-24
   81378:	10800044 	addi	r2,r2,1
   8137c:	e13ff917 	ldw	r4,-28(fp)
   81380:	100b883a 	mov	r5,r2
   81384:	00818700 	call	81870 <cvt_num_field>

    /* add in the units */
    level_str[7] = 'V';
   81388:	00801584 	movi	r2,86
   8138c:	e0bffbc5 	stb	r2,-17(fp)

    /* now finally display the trigger level */
    plot_string(x_pos, y_pos, level_str, style);
   81390:	e0bfff17 	ldw	r2,-4(fp)
   81394:	e0fffa04 	addi	r3,fp,-24
   81398:	e13ffd17 	ldw	r4,-12(fp)
   8139c:	e17ffe17 	ldw	r5,-8(fp)
   813a0:	180d883a 	mov	r6,r3
   813a4:	100f883a 	mov	r7,r2
   813a8:	00806a80 	call	806a8 <plot_string>
    /* all done displaying the trigger level - return */
    return;

}
   813ac:	e037883a 	mov	sp,fp
   813b0:	dfc00117 	ldw	ra,4(sp)
   813b4:	df000017 	ldw	fp,0(sp)
   813b8:	dec00204 	addi	sp,sp,8
   813bc:	f800283a 	ret

000813c0 <set_trg_slope>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trg_slope(enum slope_type s)
{
   813c0:	defffd04 	addi	sp,sp,-12
   813c4:	dfc00215 	stw	ra,8(sp)
   813c8:	df000115 	stw	fp,4(sp)
   813cc:	df000104 	addi	fp,sp,4
   813d0:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the slope type */
    slope = s;
   813d4:	e0bfff17 	ldw	r2,-4(fp)
   813d8:	d0a01615 	stw	r2,-32680(gp)

    /* also tell the hardware what the slope is */
    set_trigger(level, slope);
   813dc:	d0e01517 	ldw	r3,-32684(gp)
   813e0:	d0a01617 	ldw	r2,-32680(gp)
   813e4:	1809883a 	mov	r4,r3
   813e8:	100b883a 	mov	r5,r2
   813ec:	0081a4c0 	call	81a4c <set_trigger>


    /* all done setting the trigger slope - return */
    return;
   813f0:	0001883a 	nop

}
   813f4:	e037883a 	mov	sp,fp
   813f8:	dfc00117 	ldw	ra,4(sp)
   813fc:	df000017 	ldw	fp,0(sp)
   81400:	dec00204 	addi	sp,sp,8
   81404:	f800283a 	ret

00081408 <trg_slope_toggle>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_slope_toggle()
{
   81408:	defffe04 	addi	sp,sp,-8
   8140c:	dfc00115 	stw	ra,4(sp)
   81410:	df000015 	stw	fp,0(sp)
   81414:	d839883a 	mov	fp,sp
      /* none */



    /* toggle the trigger slope */
    if (slope == SLOPE_POSITIVE)
   81418:	d0a01617 	ldw	r2,-32680(gp)
   8141c:	1000031e 	bne	r2,zero,8142c <trg_slope_toggle+0x24>
        slope = SLOPE_NEGATIVE;
   81420:	00800044 	movi	r2,1
   81424:	d0a01615 	stw	r2,-32680(gp)
   81428:	00000106 	br	81430 <trg_slope_toggle+0x28>
    else
        slope = SLOPE_POSITIVE;
   8142c:	d0201615 	stw	zero,-32680(gp)

    /* set the new trigger slope */
    set_trigger(level, slope);
   81430:	d0e01517 	ldw	r3,-32684(gp)
   81434:	d0a01617 	ldw	r2,-32680(gp)
   81438:	1809883a 	mov	r4,r3
   8143c:	100b883a 	mov	r5,r2
   81440:	0081a4c0 	call	81a4c <set_trigger>


    /* all done with the trigger slope - return */
    return;
   81444:	0001883a 	nop

}
   81448:	e037883a 	mov	sp,fp
   8144c:	dfc00117 	ldw	ra,4(sp)
   81450:	df000017 	ldw	fp,0(sp)
   81454:	dec00204 	addi	sp,sp,8
   81458:	f800283a 	ret

0008145c <display_trg_slope>:
   Last Modified:    Mar. 13, 1994

*/

void  display_trg_slope(int x_pos, int y_pos, int style)
{
   8145c:	defffb04 	addi	sp,sp,-20
   81460:	dfc00415 	stw	ra,16(sp)
   81464:	df000315 	stw	fp,12(sp)
   81468:	df000304 	addi	fp,sp,12
   8146c:	e13ffd15 	stw	r4,-12(fp)
   81470:	e17ffe15 	stw	r5,-8(fp)
   81474:	e1bfff15 	stw	r6,-4(fp)
    const static char * const  slopes[] =  {  " +", " -"  };



    /* display the trigger slope */
    plot_string(x_pos, y_pos, slopes[slope], style);
   81478:	d0a01617 	ldw	r2,-32680(gp)
   8147c:	1085883a 	add	r2,r2,r2
   81480:	1087883a 	add	r3,r2,r2
   81484:	d0a00004 	addi	r2,gp,-32768
   81488:	1885883a 	add	r2,r3,r2
   8148c:	10c00017 	ldw	r3,0(r2)
   81490:	e0bfff17 	ldw	r2,-4(fp)
   81494:	e13ffd17 	ldw	r4,-12(fp)
   81498:	e17ffe17 	ldw	r5,-8(fp)
   8149c:	180d883a 	mov	r6,r3
   814a0:	100f883a 	mov	r7,r2
   814a4:	00806a80 	call	806a8 <plot_string>


    /* all done displaying the trigger slope - return */
    return;
   814a8:	0001883a 	nop

}
   814ac:	e037883a 	mov	sp,fp
   814b0:	dfc00117 	ldw	ra,4(sp)
   814b4:	df000017 	ldw	fp,0(sp)
   814b8:	dec00204 	addi	sp,sp,8
   814bc:	f800283a 	ret

000814c0 <set_trg_delay>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trg_delay(long int d)
{
   814c0:	defffd04 	addi	sp,sp,-12
   814c4:	dfc00215 	stw	ra,8(sp)
   814c8:	df000115 	stw	fp,4(sp)
   814cc:	df000104 	addi	fp,sp,4
   814d0:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the trigger delay */
    delay = d;
   814d4:	e0bfff17 	ldw	r2,-4(fp)
   814d8:	d0a01715 	stw	r2,-32676(gp)

    /* set the trigger delay in hardware too */
    set_delay(delay);
   814dc:	d0a01717 	ldw	r2,-32676(gp)
   814e0:	1009883a 	mov	r4,r2
   814e4:	0081a7c0 	call	81a7c <set_delay>


    /* all done initializing the trigger delay - return */
    return;
   814e8:	0001883a 	nop

}
   814ec:	e037883a 	mov	sp,fp
   814f0:	dfc00117 	ldw	ra,4(sp)
   814f4:	df000017 	ldw	fp,0(sp)
   814f8:	dec00204 	addi	sp,sp,8
   814fc:	f800283a 	ret

00081500 <trg_delay_down>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_delay_down()
{
   81500:	defffe04 	addi	sp,sp,-8
   81504:	dfc00115 	stw	ra,4(sp)
   81508:	df000015 	stw	fp,0(sp)
   8150c:	d839883a 	mov	fp,sp
      /* none */



    /* decrease the trigger delay, if not already the minimum */
    if (delay > MIN_DELAY)
   81510:	d0a01717 	ldw	r2,-32676(gp)
   81514:	0080030e 	bge	zero,r2,81524 <trg_delay_down+0x24>
        delay--;
   81518:	d0a01717 	ldw	r2,-32676(gp)
   8151c:	10bfffc4 	addi	r2,r2,-1
   81520:	d0a01715 	stw	r2,-32676(gp)

    /* set the trigger delay for the hardware */
    set_delay(delay);
   81524:	d0a01717 	ldw	r2,-32676(gp)
   81528:	1009883a 	mov	r4,r2
   8152c:	0081a7c0 	call	81a7c <set_delay>


    /* all done with lowering the trigger delay - return */
    return;
   81530:	0001883a 	nop

}
   81534:	e037883a 	mov	sp,fp
   81538:	dfc00117 	ldw	ra,4(sp)
   8153c:	df000017 	ldw	fp,0(sp)
   81540:	dec00204 	addi	sp,sp,8
   81544:	f800283a 	ret

00081548 <trg_delay_up>:
   Last Modified:    Mar. 8, 1994

*/

void  trg_delay_up()
{
   81548:	defffe04 	addi	sp,sp,-8
   8154c:	dfc00115 	stw	ra,4(sp)
   81550:	df000015 	stw	fp,0(sp)
   81554:	d839883a 	mov	fp,sp
      /* none */



    /* increase the trigger delay, if not already the maximum */
    if (delay < MAX_DELAY)
   81558:	d0a01717 	ldw	r2,-32676(gp)
   8155c:	00f0d3d4 	movui	r3,49999
   81560:	18800316 	blt	r3,r2,81570 <trg_delay_up+0x28>
        delay++;
   81564:	d0a01717 	ldw	r2,-32676(gp)
   81568:	10800044 	addi	r2,r2,1
   8156c:	d0a01715 	stw	r2,-32676(gp)

    /* tell the hardware the new trigger delay */
    set_delay(delay);
   81570:	d0a01717 	ldw	r2,-32676(gp)
   81574:	1009883a 	mov	r4,r2
   81578:	0081a7c0 	call	81a7c <set_delay>


    /* all done raising the trigger delay - return */
    return;
   8157c:	0001883a 	nop

}
   81580:	e037883a 	mov	sp,fp
   81584:	dfc00117 	ldw	ra,4(sp)
   81588:	df000017 	ldw	fp,0(sp)
   8158c:	dec00204 	addi	sp,sp,8
   81590:	f800283a 	ret

00081594 <adjust_trg_delay>:
   Last Modified:    Mar. 8, 1994

*/

static void  adjust_trg_delay(int old_sweep, int new_sweep)
{
   81594:	defffc04 	addi	sp,sp,-16
   81598:	dfc00315 	stw	ra,12(sp)
   8159c:	df000215 	stw	fp,8(sp)
   815a0:	df000204 	addi	fp,sp,8
   815a4:	e13ffe15 	stw	r4,-8(fp)
   815a8:	e17fff15 	stw	r5,-4(fp)
      /* none */



    /* multiply by 10 times the ratio of sweep rates */
    delay *= (10 * sweep_rates[new_sweep].sample_rate) / sweep_rates[old_sweep].sample_rate;
   815ac:	00c00234 	movhi	r3,8
   815b0:	18d84404 	addi	r3,r3,24848
   815b4:	e0bfff17 	ldw	r2,-4(fp)
   815b8:	100490fa 	slli	r2,r2,3
   815bc:	1885883a 	add	r2,r3,r2
   815c0:	10800017 	ldw	r2,0(r2)
   815c4:	10c002a4 	muli	r3,r2,10
   815c8:	01000234 	movhi	r4,8
   815cc:	21184404 	addi	r4,r4,24848
   815d0:	e0bffe17 	ldw	r2,-8(fp)
   815d4:	100490fa 	slli	r2,r2,3
   815d8:	2085883a 	add	r2,r4,r2
   815dc:	10800017 	ldw	r2,0(r2)
   815e0:	1809883a 	mov	r4,r3
   815e4:	100b883a 	mov	r5,r2
   815e8:	0082d140 	call	82d14 <__divsi3>
   815ec:	1007883a 	mov	r3,r2
   815f0:	d0a01717 	ldw	r2,-32676(gp)
   815f4:	1885383a 	mul	r2,r3,r2
   815f8:	d0a01715 	stw	r2,-32676(gp)
    /* now divide the factor of 10 back out */
    delay /= 10;
   815fc:	d0a01717 	ldw	r2,-32676(gp)
   81600:	1009883a 	mov	r4,r2
   81604:	01400284 	movi	r5,10
   81608:	0082d140 	call	82d14 <__divsi3>
   8160c:	d0a01715 	stw	r2,-32676(gp)

    /* make sure delay is not out of range */
    if (delay > MAX_DELAY)
   81610:	d0a01717 	ldw	r2,-32676(gp)
   81614:	00f0d414 	movui	r3,50000
   81618:	1880020e 	bge	r3,r2,81624 <adjust_trg_delay+0x90>
        /* delay is too large - set to maximum */
        delay = MAX_DELAY;
   8161c:	00b0d414 	movui	r2,50000
   81620:	d0a01715 	stw	r2,-32676(gp)
    if (delay < MIN_DELAY)
   81624:	d0a01717 	ldw	r2,-32676(gp)
   81628:	1000010e 	bge	r2,zero,81630 <adjust_trg_delay+0x9c>
        /* delay is too small - set to minimum */
	delay = MIN_DELAY;
   8162c:	d0201715 	stw	zero,-32676(gp)


    /* tell the hardware the new trigger delay */
    set_delay(delay);
   81630:	d0a01717 	ldw	r2,-32676(gp)
   81634:	1009883a 	mov	r4,r2
   81638:	0081a7c0 	call	81a7c <set_delay>


    /* all done adjusting the trigger delay - return */
    return;
   8163c:	0001883a 	nop

}
   81640:	e037883a 	mov	sp,fp
   81644:	dfc00117 	ldw	ra,4(sp)
   81648:	df000017 	ldw	fp,0(sp)
   8164c:	dec00204 	addi	sp,sp,8
   81650:	f800283a 	ret

00081654 <display_trg_delay>:
   Last Modified:    May 3, 2006

*/

void  display_trg_delay(int x_pos, int y_pos, int style)
{
   81654:	defff604 	addi	sp,sp,-40
   81658:	dfc00915 	stw	ra,36(sp)
   8165c:	df000815 	stw	fp,32(sp)
   81660:	df000804 	addi	fp,sp,32
   81664:	e13ffd15 	stw	r4,-12(fp)
   81668:	e17ffe15 	stw	r5,-8(fp)
   8166c:	e1bfff15 	stw	r6,-4(fp)
    /* variables */
    char      delay_str[] = "         "; /* string containing the trigger delay */
   81670:	00880834 	movhi	r2,8224
   81674:	10880804 	addi	r2,r2,8224
   81678:	e0bffa15 	stw	r2,-24(fp)
   8167c:	00880834 	movhi	r2,8224
   81680:	10880804 	addi	r2,r2,8224
   81684:	e0bffb15 	stw	r2,-20(fp)
   81688:	00800804 	movi	r2,32
   8168c:	e0bffc0d 	sth	r2,-16(fp)
    long int  d;                         /* delay in appropriate units */


    /* compute the delay in the appropriate units */
    /* have to watch out for overflow, so be careful */
    if (sweep_rates[sweep].sample_rate > 1000000L)  {
   81690:	d0a01417 	ldw	r2,-32688(gp)
   81694:	00c00234 	movhi	r3,8
   81698:	18d84404 	addi	r3,r3,24848
   8169c:	100490fa 	slli	r2,r2,3
   816a0:	1885883a 	add	r2,r3,r2
   816a4:	10800017 	ldw	r2,0(r2)
   816a8:	00c003f4 	movhi	r3,15
   816ac:	18d09004 	addi	r3,r3,16960
   816b0:	1880140e 	bge	r3,r2,81704 <display_trg_delay+0xb0>
        /* have a fast sweep rate, could overflow */
        /* first compute in units of 100 ns */
        d = delay * (10000000L / sweep_rates[sweep].sample_rate);
   816b4:	d0a01417 	ldw	r2,-32688(gp)
   816b8:	00c00234 	movhi	r3,8
   816bc:	18d84404 	addi	r3,r3,24848
   816c0:	100490fa 	slli	r2,r2,3
   816c4:	1885883a 	add	r2,r3,r2
   816c8:	10800017 	ldw	r2,0(r2)
   816cc:	01002674 	movhi	r4,153
   816d0:	2125a004 	addi	r4,r4,-27008
   816d4:	100b883a 	mov	r5,r2
   816d8:	0082d140 	call	82d14 <__divsi3>
   816dc:	1007883a 	mov	r3,r2
   816e0:	d0a01717 	ldw	r2,-32676(gp)
   816e4:	1885383a 	mul	r2,r3,r2
   816e8:	e0bff915 	stw	r2,-28(fp)
	/* now convert to nanoseconds */
	d *= 100L;
   816ec:	e0bff917 	ldw	r2,-28(fp)
   816f0:	10801924 	muli	r2,r2,100
   816f4:	e0bff915 	stw	r2,-28(fp)
	/* need to divide by 1000 to get to microseconds */
	units_adj = 1000;
   816f8:	0080fa04 	movi	r2,1000
   816fc:	e0bff815 	stw	r2,-32(fp)
   81700:	00001006 	br	81744 <display_trg_delay+0xf0>
    }
    else  {
        /* slow sweep rate, don't have to worry about overflow */
        d = delay * (1000000L / sweep_rates[sweep].sample_rate);
   81704:	d0a01417 	ldw	r2,-32688(gp)
   81708:	00c00234 	movhi	r3,8
   8170c:	18d84404 	addi	r3,r3,24848
   81710:	100490fa 	slli	r2,r2,3
   81714:	1885883a 	add	r2,r3,r2
   81718:	10800017 	ldw	r2,0(r2)
   8171c:	010003f4 	movhi	r4,15
   81720:	21109004 	addi	r4,r4,16960
   81724:	100b883a 	mov	r5,r2
   81728:	0082d140 	call	82d14 <__divsi3>
   8172c:	1007883a 	mov	r3,r2
   81730:	d0a01717 	ldw	r2,-32676(gp)
   81734:	1885383a 	mul	r2,r3,r2
   81738:	e0bff915 	stw	r2,-28(fp)
	/* already in microseconds, so adjustment is 1 */
	units_adj = 1;
   8173c:	00800044 	movi	r2,1
   81740:	e0bff815 	stw	r2,-32(fp)
    }

    /* convert it to the string (leave first character blank) */
    cvt_num_field(d, &delay_str[1]);
   81744:	e0bffa04 	addi	r2,fp,-24
   81748:	10800044 	addi	r2,r2,1
   8174c:	e13ff917 	ldw	r4,-28(fp)
   81750:	100b883a 	mov	r5,r2
   81754:	00818700 	call	81870 <cvt_num_field>

    /* add in the units */
    if (((d / units_adj) < 1000) && ((d / units_adj) > -1000) && (units_adj == 1000)) {
   81758:	e13ff917 	ldw	r4,-28(fp)
   8175c:	e17ff817 	ldw	r5,-32(fp)
   81760:	0082d140 	call	82d14 <__divsi3>
   81764:	1080fa08 	cmpgei	r2,r2,1000
   81768:	10000d1e 	bne	r2,zero,817a0 <display_trg_delay+0x14c>
   8176c:	e13ff917 	ldw	r4,-28(fp)
   81770:	e17ff817 	ldw	r5,-32(fp)
   81774:	0082d140 	call	82d14 <__divsi3>
   81778:	10bf0650 	cmplti	r2,r2,-999
   8177c:	1000081e 	bne	r2,zero,817a0 <display_trg_delay+0x14c>
   81780:	e0bff817 	ldw	r2,-32(fp)
   81784:	1080fa18 	cmpnei	r2,r2,1000
   81788:	1000051e 	bne	r2,zero,817a0 <display_trg_delay+0x14c>
        /* delay is in microseconds */
	delay_str[7] = '\004';
   8178c:	00800104 	movi	r2,4
   81790:	e0bffbc5 	stb	r2,-17(fp)
	delay_str[8] = 's';
   81794:	00801cc4 	movi	r2,115
   81798:	e0bffc05 	stb	r2,-16(fp)
   8179c:	00002806 	br	81840 <display_trg_delay+0x1ec>
    }
    else if (((d / units_adj) < 1000000) && ((d / units_adj) > -1000000)) {
   817a0:	e13ff917 	ldw	r4,-28(fp)
   817a4:	e17ff817 	ldw	r5,-32(fp)
   817a8:	0082d140 	call	82d14 <__divsi3>
   817ac:	00c003f4 	movhi	r3,15
   817b0:	18d08fc4 	addi	r3,r3,16959
   817b4:	18800c16 	blt	r3,r2,817e8 <display_trg_delay+0x194>
   817b8:	e13ff917 	ldw	r4,-28(fp)
   817bc:	e17ff817 	ldw	r5,-32(fp)
   817c0:	0082d140 	call	82d14 <__divsi3>
   817c4:	1007883a 	mov	r3,r2
   817c8:	00bffc74 	movhi	r2,65521
   817cc:	10af7044 	addi	r2,r2,-16959
   817d0:	18800516 	blt	r3,r2,817e8 <display_trg_delay+0x194>
        /* delay is in milliseconds */
	delay_str[7] = 'm';
   817d4:	00801b44 	movi	r2,109
   817d8:	e0bffbc5 	stb	r2,-17(fp)
	delay_str[8] = 's';
   817dc:	00801cc4 	movi	r2,115
   817e0:	e0bffc05 	stb	r2,-16(fp)
   817e4:	00001606 	br	81840 <display_trg_delay+0x1ec>
    }
    else if (((d / units_adj) < 1000000000) && ((d / units_adj) > -1000000000))  {
   817e8:	e13ff917 	ldw	r4,-28(fp)
   817ec:	e17ff817 	ldw	r5,-32(fp)
   817f0:	0082d140 	call	82d14 <__divsi3>
   817f4:	00cee6f4 	movhi	r3,15259
   817f8:	18f27fc4 	addi	r3,r3,-13825
   817fc:	18800c16 	blt	r3,r2,81830 <display_trg_delay+0x1dc>
   81800:	e13ff917 	ldw	r4,-28(fp)
   81804:	e17ff817 	ldw	r5,-32(fp)
   81808:	0082d140 	call	82d14 <__divsi3>
   8180c:	1007883a 	mov	r3,r2
   81810:	00b11974 	movhi	r2,50277
   81814:	108d8044 	addi	r2,r2,13825
   81818:	18800516 	blt	r3,r2,81830 <display_trg_delay+0x1dc>
        /* delay is in seconds */
	delay_str[7] = 's';
   8181c:	00801cc4 	movi	r2,115
   81820:	e0bffbc5 	stb	r2,-17(fp)
	delay_str[8] = ' ';
   81824:	00800804 	movi	r2,32
   81828:	e0bffc05 	stb	r2,-16(fp)
   8182c:	00000406 	br	81840 <display_trg_delay+0x1ec>
    }
    else  {
        /* delay is in kiloseconds */
	delay_str[7] = 'k';
   81830:	00801ac4 	movi	r2,107
   81834:	e0bffbc5 	stb	r2,-17(fp)
	delay_str[8] = 's';
   81838:	00801cc4 	movi	r2,115
   8183c:	e0bffc05 	stb	r2,-16(fp)
    }


    /* now actually display the trigger delay */
    plot_string(x_pos, y_pos, delay_str, style);
   81840:	e0bfff17 	ldw	r2,-4(fp)
   81844:	e0fffa04 	addi	r3,fp,-24
   81848:	e13ffd17 	ldw	r4,-12(fp)
   8184c:	e17ffe17 	ldw	r5,-8(fp)
   81850:	180d883a 	mov	r6,r3
   81854:	100f883a 	mov	r7,r2
   81858:	00806a80 	call	806a8 <plot_string>


    /* all done displaying the trigger delay - return */
    return;

}
   8185c:	e037883a 	mov	sp,fp
   81860:	dfc00117 	ldw	ra,4(sp)
   81864:	df000017 	ldw	fp,0(sp)
   81868:	dec00204 	addi	sp,sp,8
   8186c:	f800283a 	ret

00081870 <cvt_num_field>:
   Last Modified:    Mar. 8, 1994

*/

static void  cvt_num_field(long int n, char *s)
{
   81870:	defff804 	addi	sp,sp,-32
   81874:	dfc00715 	stw	ra,28(sp)
   81878:	df000615 	stw	fp,24(sp)
   8187c:	dc000515 	stw	r16,20(sp)
   81880:	df000504 	addi	fp,sp,20
   81884:	e13ffe15 	stw	r4,-8(fp)
   81888:	e17fff15 	stw	r5,-4(fp)
    /* variables */
    int  dp = 3;		/* digits to right of decimal point */
   8188c:	008000c4 	movi	r2,3
   81890:	e0bffb15 	stw	r2,-20(fp)
    int  d;			/* digit weight (power of 10) */

    int  i = 0;			/* string index */
   81894:	e03ffd15 	stw	zero,-12(fp)



    /* first get the sign (and make n positive for conversion) */
    if (n < 0)  {
   81898:	e0bffe17 	ldw	r2,-8(fp)
   8189c:	10000c0e 	bge	r2,zero,818d0 <cvt_num_field+0x60>
        /* n is negative, set sign and convert to positive */
	s[i++] = '-';
   818a0:	e0bffd17 	ldw	r2,-12(fp)
   818a4:	e0ffff17 	ldw	r3,-4(fp)
   818a8:	1885883a 	add	r2,r3,r2
   818ac:	00c00b44 	movi	r3,45
   818b0:	10c00005 	stb	r3,0(r2)
   818b4:	e0bffd17 	ldw	r2,-12(fp)
   818b8:	10800044 	addi	r2,r2,1
   818bc:	e0bffd15 	stw	r2,-12(fp)
	n = -n;
   818c0:	e0bffe17 	ldw	r2,-8(fp)
   818c4:	0085c83a 	sub	r2,zero,r2
   818c8:	e0bffe15 	stw	r2,-8(fp)
	s[i++] = '+';
    }


    /* make sure there are no more than 4 significant digits */
    while (n > 9999)  {
   818cc:	00001106 	br	81914 <cvt_num_field+0xa4>
	s[i++] = '-';
	n = -n;
    }
    else  {
        /* n is positive, set sign only */
	s[i++] = '+';
   818d0:	e0bffd17 	ldw	r2,-12(fp)
   818d4:	e0ffff17 	ldw	r3,-4(fp)
   818d8:	1885883a 	add	r2,r3,r2
   818dc:	00c00ac4 	movi	r3,43
   818e0:	10c00005 	stb	r3,0(r2)
   818e4:	e0bffd17 	ldw	r2,-12(fp)
   818e8:	10800044 	addi	r2,r2,1
   818ec:	e0bffd15 	stw	r2,-12(fp)
    }


    /* make sure there are no more than 4 significant digits */
    while (n > 9999)  {
   818f0:	00000806 	br	81914 <cvt_num_field+0xa4>
        /* have more than 4 digits - get rid of one */
	n /= 10;
   818f4:	e0bffe17 	ldw	r2,-8(fp)
   818f8:	1009883a 	mov	r4,r2
   818fc:	01400284 	movi	r5,10
   81900:	0082d140 	call	82d14 <__divsi3>
   81904:	e0bffe15 	stw	r2,-8(fp)
	/* adjust the decimal point */
	dp--;
   81908:	e0bffb17 	ldw	r2,-20(fp)
   8190c:	10bfffc4 	addi	r2,r2,-1
   81910:	e0bffb15 	stw	r2,-20(fp)
	s[i++] = '+';
    }


    /* make sure there are no more than 4 significant digits */
    while (n > 9999)  {
   81914:	e0bffe17 	ldw	r2,-8(fp)
   81918:	1089c408 	cmpgei	r2,r2,10000
   8191c:	103ff51e 	bne	r2,zero,818f4 <cvt_num_field+0x84>
	dp--;
    }

    /* if decimal point is non-positive, make positive */
    /* (assume will take care of adjustment with output units in this case) */
    while (dp <= 0)
   81920:	00000306 	br	81930 <cvt_num_field+0xc0>
       dp += 3;
   81924:	e0bffb17 	ldw	r2,-20(fp)
   81928:	108000c4 	addi	r2,r2,3
   8192c:	e0bffb15 	stw	r2,-20(fp)
	dp--;
    }

    /* if decimal point is non-positive, make positive */
    /* (assume will take care of adjustment with output units in this case) */
    while (dp <= 0)
   81930:	e0bffb17 	ldw	r2,-20(fp)
   81934:	00bffb0e 	bge	zero,r2,81924 <cvt_num_field+0xb4>
       dp += 3;


    /* adjust dp to be digits to the right of the decimal point */
    /* (assuming 4 digits) */
    dp = 4 - dp;
   81938:	00c00104 	movi	r3,4
   8193c:	e0bffb17 	ldw	r2,-20(fp)
   81940:	1885c83a 	sub	r2,r3,r2
   81944:	e0bffb15 	stw	r2,-20(fp)


    /* finally, loop getting and converting digits */
    for (d = 1000; d > 0; d /= 10)  {
   81948:	0080fa04 	movi	r2,1000
   8194c:	e0bffc15 	stw	r2,-16(fp)
   81950:	00002406 	br	819e4 <cvt_num_field+0x174>

        /* check if need decimal the decimal point now */
	if (dp-- == 0)
   81954:	e0bffb17 	ldw	r2,-20(fp)
   81958:	1005003a 	cmpeq	r2,r2,zero
   8195c:	e0fffb17 	ldw	r3,-20(fp)
   81960:	18ffffc4 	addi	r3,r3,-1
   81964:	e0fffb15 	stw	r3,-20(fp)
   81968:	10803fcc 	andi	r2,r2,255
   8196c:	10000826 	beq	r2,zero,81990 <cvt_num_field+0x120>
	    /* time for decimal point */
	    s[i++] = '.';
   81970:	e0bffd17 	ldw	r2,-12(fp)
   81974:	e0ffff17 	ldw	r3,-4(fp)
   81978:	1885883a 	add	r2,r3,r2
   8197c:	00c00b84 	movi	r3,46
   81980:	10c00005 	stb	r3,0(r2)
   81984:	e0bffd17 	ldw	r2,-12(fp)
   81988:	10800044 	addi	r2,r2,1
   8198c:	e0bffd15 	stw	r2,-12(fp)

	/* get and convert this digit */
	s[i++] = (n / d) + '0';
   81990:	e0bffd17 	ldw	r2,-12(fp)
   81994:	e0ffff17 	ldw	r3,-4(fp)
   81998:	18a1883a 	add	r16,r3,r2
   8199c:	e13ffe17 	ldw	r4,-8(fp)
   819a0:	e17ffc17 	ldw	r5,-16(fp)
   819a4:	0082d140 	call	82d14 <__divsi3>
   819a8:	10800c04 	addi	r2,r2,48
   819ac:	80800005 	stb	r2,0(r16)
   819b0:	e0bffd17 	ldw	r2,-12(fp)
   819b4:	10800044 	addi	r2,r2,1
   819b8:	e0bffd15 	stw	r2,-12(fp)
	/* remove this digit from n */
	n %= d;
   819bc:	e0bffe17 	ldw	r2,-8(fp)
   819c0:	1009883a 	mov	r4,r2
   819c4:	e17ffc17 	ldw	r5,-16(fp)
   819c8:	0082d640 	call	82d64 <__modsi3>
   819cc:	e0bffe15 	stw	r2,-8(fp)
    /* (assuming 4 digits) */
    dp = 4 - dp;


    /* finally, loop getting and converting digits */
    for (d = 1000; d > 0; d /= 10)  {
   819d0:	e0bffc17 	ldw	r2,-16(fp)
   819d4:	1009883a 	mov	r4,r2
   819d8:	01400284 	movi	r5,10
   819dc:	0082d140 	call	82d14 <__divsi3>
   819e0:	e0bffc15 	stw	r2,-16(fp)
   819e4:	e0bffc17 	ldw	r2,-16(fp)
   819e8:	00bfda16 	blt	zero,r2,81954 <cvt_num_field+0xe4>
	n %= d;
    }


    /* all done converting the number, return */
    return;
   819ec:	0001883a 	nop

}
   819f0:	e037883a 	mov	sp,fp
   819f4:	dfc00217 	ldw	ra,8(sp)
   819f8:	df000117 	ldw	fp,4(sp)
   819fc:	dc000017 	ldw	r16,0(sp)
   81a00:	dec00304 	addi	sp,sp,12
   81a04:	f800283a 	ret

00081a08 <init_analog>:

static int trg_level;
static int old_trg_level;

void init_analog()
{
   81a08:	deffff04 	addi	sp,sp,-4
   81a0c:	df000015 	stw	fp,0(sp)
   81a10:	d839883a 	mov	fp,sp
	trg_level = 0;
   81a14:	d0201815 	stw	zero,-32672(gp)
}
   81a18:	e037883a 	mov	sp,fp
   81a1c:	df000017 	ldw	fp,0(sp)
   81a20:	dec00104 	addi	sp,sp,4
   81a24:	f800283a 	ret

00081a28 <set_sample_rate>:
/* sampling parameter functions */

int  set_sample_rate(long int rate)
{
   81a28:	defffe04 	addi	sp,sp,-8
   81a2c:	df000115 	stw	fp,4(sp)
   81a30:	df000104 	addi	fp,sp,4
   81a34:	e13fff15 	stw	r4,-4(fp)
    return  SIZE_X;
   81a38:	00807804 	movi	r2,480
}
   81a3c:	e037883a 	mov	sp,fp
   81a40:	df000017 	ldw	fp,0(sp)
   81a44:	dec00104 	addi	sp,sp,4
   81a48:	f800283a 	ret

00081a4c <set_trigger>:

void  set_trigger(int level, int slope)
{
   81a4c:	defffd04 	addi	sp,sp,-12
   81a50:	df000215 	stw	fp,8(sp)
   81a54:	df000204 	addi	fp,sp,8
   81a58:	e13ffe15 	stw	r4,-8(fp)
   81a5c:	e17fff15 	stw	r5,-4(fp)
	trg_level = level;
   81a60:	e0bffe17 	ldw	r2,-8(fp)
   81a64:	d0a01815 	stw	r2,-32672(gp)
    return;
   81a68:	0001883a 	nop
}
   81a6c:	e037883a 	mov	sp,fp
   81a70:	df000017 	ldw	fp,0(sp)
   81a74:	dec00104 	addi	sp,sp,4
   81a78:	f800283a 	ret

00081a7c <set_delay>:


void  set_delay(long int delay)
{
   81a7c:	defffe04 	addi	sp,sp,-8
   81a80:	df000115 	stw	fp,4(sp)
   81a84:	df000104 	addi	fp,sp,4
   81a88:	e13fff15 	stw	r4,-4(fp)
    return;
   81a8c:	0001883a 	nop
}
   81a90:	e037883a 	mov	sp,fp
   81a94:	df000017 	ldw	fp,0(sp)
   81a98:	dec00104 	addi	sp,sp,4
   81a9c:	f800283a 	ret

00081aa0 <start_sample>:


/* sampling functions */

void  start_sample(int auto_trigger)
{
   81aa0:	defffe04 	addi	sp,sp,-8
   81aa4:	df000115 	stw	fp,4(sp)
   81aa8:	df000104 	addi	fp,sp,4
   81aac:	e13fff15 	stw	r4,-4(fp)
    return;
   81ab0:	0001883a 	nop
}
   81ab4:	e037883a 	mov	sp,fp
   81ab8:	df000017 	ldw	fp,0(sp)
   81abc:	dec00104 	addi	sp,sp,4
   81ac0:	f800283a 	ret

00081ac4 <sample_done>:

unsigned char *sample_done()
{
   81ac4:	defffd04 	addi	sp,sp,-12
   81ac8:	dfc00215 	stw	ra,8(sp)
   81acc:	df000115 	stw	fp,4(sp)
   81ad0:	df000104 	addi	fp,sp,4
	unsigned char *sample = malloc(SIZE_X*sizeof(unsigned char));
   81ad4:	01007804 	movi	r4,480
   81ad8:	0082dd00 	call	82dd0 <malloc>
   81adc:	e0bfff15 	stw	r2,-4(fp)
	get_test_sample(SIZE_X, SIZE_X*5, sample);
   81ae0:	01007804 	movi	r4,480
   81ae4:	01425804 	movi	r5,2400
   81ae8:	e1bfff17 	ldw	r6,-4(fp)
   81aec:	0081b080 	call	81b08 <get_test_sample>
	return sample;
   81af0:	e0bfff17 	ldw	r2,-4(fp)
}
   81af4:	e037883a 	mov	sp,fp
   81af8:	dfc00117 	ldw	ra,4(sp)
   81afc:	df000017 	ldw	fp,0(sp)
   81b00:	dec00204 	addi	sp,sp,8
   81b04:	f800283a 	ret

00081b08 <get_test_sample>:
   Last Modified:    May 3, 2006

*/

void  get_test_sample(long int sample_rate, int sample_size, unsigned char *sample)
{
   81b08:	defff904 	addi	sp,sp,-28
   81b0c:	dfc00615 	stw	ra,24(sp)
   81b10:	df000515 	stw	fp,20(sp)
   81b14:	df000504 	addi	fp,sp,20
   81b18:	e13ffd15 	stw	r4,-12(fp)
   81b1c:	e17ffe15 	stw	r5,-8(fp)
   81b20:	e1bfff15 	stw	r6,-4(fp)
	    63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,
	    63,  63,  63,  63,  63,  63,  64,  64,  64,  64,  64,  64,  64,
	    64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64
	  };

    long int  sample_pt = 0;	/* current sample within the waveform */
   81b24:	e03ffb15 	stw	zero,-20(fp)

    int       sample_sign = 1;	/* sample waveform sign */
   81b28:	00800044 	movi	r2,1
   81b2c:	e0bffc15 	stw	r2,-16(fp)



    /* loop, getting sample points */
    while (sample_size-- > 0)  {
   81b30:	00003306 	br	81c00 <get_test_sample+0xf8>

        /* get this sample point (value based on sign) */
	if (sample_sign > 0)
   81b34:	e0bffc17 	ldw	r2,-16(fp)
   81b38:	0080100e 	bge	zero,r2,81b7c <get_test_sample+0x74>
	    *sample++ = waveform[sample_pt/20] + 127;
   81b3c:	e0bffb17 	ldw	r2,-20(fp)
   81b40:	1009883a 	mov	r4,r2
   81b44:	01400504 	movi	r5,20
   81b48:	0082d140 	call	82d14 <__divsi3>
   81b4c:	00c00234 	movhi	r3,8
   81b50:	18d87d04 	addi	r3,r3,25076
   81b54:	1885883a 	add	r2,r3,r2
   81b58:	10800003 	ldbu	r2,0(r2)
   81b5c:	10801fc4 	addi	r2,r2,127
   81b60:	1007883a 	mov	r3,r2
   81b64:	e0bfff17 	ldw	r2,-4(fp)
   81b68:	10c00005 	stb	r3,0(r2)
   81b6c:	e0bfff17 	ldw	r2,-4(fp)
   81b70:	10800044 	addi	r2,r2,1
   81b74:	e0bfff15 	stw	r2,-4(fp)
   81b78:	00001006 	br	81bbc <get_test_sample+0xb4>
	else
	    *sample++ = 128 - waveform[sample_pt/20];
   81b7c:	e0bffb17 	ldw	r2,-20(fp)
   81b80:	1009883a 	mov	r4,r2
   81b84:	01400504 	movi	r5,20
   81b88:	0082d140 	call	82d14 <__divsi3>
   81b8c:	00c00234 	movhi	r3,8
   81b90:	18d87d04 	addi	r3,r3,25076
   81b94:	1885883a 	add	r2,r3,r2
   81b98:	10800003 	ldbu	r2,0(r2)
   81b9c:	00ffe004 	movi	r3,-128
   81ba0:	1885c83a 	sub	r2,r3,r2
   81ba4:	1007883a 	mov	r3,r2
   81ba8:	e0bfff17 	ldw	r2,-4(fp)
   81bac:	10c00005 	stb	r3,0(r2)
   81bb0:	e0bfff17 	ldw	r2,-4(fp)
   81bb4:	10800044 	addi	r2,r2,1
   81bb8:	e0bfff15 	stw	r2,-4(fp)

	/* compute the time for the next sample point */
	sample_pt += (10000000L / sample_rate);
   81bbc:	01002674 	movhi	r4,153
   81bc0:	2125a004 	addi	r4,r4,-27008
   81bc4:	e17ffd17 	ldw	r5,-12(fp)
   81bc8:	0082d140 	call	82d14 <__divsi3>
   81bcc:	e0fffb17 	ldw	r3,-20(fp)
   81bd0:	1885883a 	add	r2,r3,r2
   81bd4:	e0bffb15 	stw	r2,-20(fp)
	/* keep sample_pt within the waveform (need to scale it) */
	while (sample_pt >= (20 * NO_TEST_PTS))  {
   81bd8:	00000606 	br	81bf4 <get_test_sample+0xec>
	    /* keep sample_pt within the test waveform */
	    sample_pt -= (20 * NO_TEST_PTS);
   81bdc:	e0bffb17 	ldw	r2,-20(fp)
   81be0:	10b6a004 	addi	r2,r2,-9600
   81be4:	e0bffb15 	stw	r2,-20(fp)
	    /* each time through the waveform, invert it */
	    sample_sign = -sample_sign;
   81be8:	e0bffc17 	ldw	r2,-16(fp)
   81bec:	0085c83a 	sub	r2,zero,r2
   81bf0:	e0bffc15 	stw	r2,-16(fp)
	    *sample++ = 128 - waveform[sample_pt/20];

	/* compute the time for the next sample point */
	sample_pt += (10000000L / sample_rate);
	/* keep sample_pt within the waveform (need to scale it) */
	while (sample_pt >= (20 * NO_TEST_PTS))  {
   81bf4:	e0bffb17 	ldw	r2,-20(fp)
   81bf8:	10896028 	cmpgeui	r2,r2,9600
   81bfc:	103ff71e 	bne	r2,zero,81bdc <get_test_sample+0xd4>
    int       sample_sign = 1;	/* sample waveform sign */



    /* loop, getting sample points */
    while (sample_size-- > 0)  {
   81c00:	e0bffe17 	ldw	r2,-8(fp)
   81c04:	0084803a 	cmplt	r2,zero,r2
   81c08:	e0fffe17 	ldw	r3,-8(fp)
   81c0c:	18ffffc4 	addi	r3,r3,-1
   81c10:	e0fffe15 	stw	r3,-8(fp)
   81c14:	10803fcc 	andi	r2,r2,255
   81c18:	103fc61e 	bne	r2,zero,81b34 <get_test_sample+0x2c>
        }
    }


    /* done getting the sample - return */
    return;
   81c1c:	0001883a 	nop

}
   81c20:	e037883a 	mov	sp,fp
   81c24:	dfc00117 	ldw	ra,4(sp)
   81c28:	df000017 	ldw	fp,0(sp)
   81c2c:	dec00204 	addi	sp,sp,8
   81c30:	f800283a 	ret

00081c34 <init_trace>:
   Last Modified:    May 9, 2006

*/

void  init_trace()
{
   81c34:	defffe04 	addi	sp,sp,-8
   81c38:	dfc00115 	stw	ra,4(sp)
   81c3c:	df000015 	stw	fp,0(sp)
   81c40:	d839883a 	mov	fp,sp


    /* initialize system status variables */

    /* ready for a trace */
    trace_status = TRUE;
   81c44:	00800044 	movi	r2,1
   81c48:	d0a01a15 	stw	r2,-32664(gp)

    /* not currently sampling data */
    sampling = FALSE;
   81c4c:	d0201b15 	stw	zero,-32660(gp)

    /* turn off the displayed scale */
    cur_scale = SCALE_NONE;
   81c50:	d0201d15 	stw	zero,-32652(gp)

    /* sample size is the screen size */
    sample_size = SIZE_X;
   81c54:	00807804 	movi	r2,480
   81c58:	d0a01c15 	stw	r2,-32656(gp)


    /* clear save areas */
    clear_saved_areas();
   81c5c:	00821940 	call	82194 <clear_saved_areas>

    /* also clear the general saved area location variables (off-screen) */
    saved_pos_x = SIZE_X + 1;
   81c60:	00807844 	movi	r2,481
   81c64:	d0a01e15 	stw	r2,-32648(gp)
    saved_pos_y = SIZE_Y + 1;
   81c68:	00804444 	movi	r2,273
   81c6c:	d0a01f15 	stw	r2,-32644(gp)
    saved_end_x = SIZE_X + 1;
   81c70:	00807844 	movi	r2,481
   81c74:	d0a02015 	stw	r2,-32640(gp)
    saved_end_y = SIZE_Y + 1;
   81c78:	00804444 	movi	r2,273
   81c7c:	d0a02115 	stw	r2,-32636(gp)


    /* done initializing, return */
    return;
   81c80:	0001883a 	nop

}
   81c84:	e037883a 	mov	sp,fp
   81c88:	dfc00117 	ldw	ra,4(sp)
   81c8c:	df000017 	ldw	fp,0(sp)
   81c90:	dec00204 	addi	sp,sp,8
   81c94:	f800283a 	ret

00081c98 <set_mode>:
   Last Modified:    May 27, 2008

*/

void  set_mode(enum trigger_type trigger_mode)
{
   81c98:	defffe04 	addi	sp,sp,-8
   81c9c:	df000115 	stw	fp,4(sp)
   81ca0:	df000104 	addi	fp,sp,4
   81ca4:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* if not one-shot triggering - ready for trace too */
    trace_status = (trigger_mode != ONESHOT_TRIGGER);
   81ca8:	e0bfff17 	ldw	r2,-4(fp)
   81cac:	10800098 	cmpnei	r2,r2,2
   81cb0:	10803fcc 	andi	r2,r2,255
   81cb4:	d0a01a15 	stw	r2,-32664(gp)


    /* turn off the sampling flag so will start a new sample */
    sampling = FALSE;
   81cb8:	d0201b15 	stw	zero,-32660(gp)


    /* all done, return */
    return;
   81cbc:	0001883a 	nop

}
   81cc0:	e037883a 	mov	sp,fp
   81cc4:	df000017 	ldw	fp,0(sp)
   81cc8:	dec00104 	addi	sp,sp,4
   81ccc:	f800283a 	ret

00081cd0 <is_sampling>:
   Last Modified:    May 27, 2008

*/

int  is_sampling()
{
   81cd0:	deffff04 	addi	sp,sp,-4
   81cd4:	df000015 	stw	fp,0(sp)
   81cd8:	d839883a 	mov	fp,sp
      /* none */



    /* currently sampling if sampling flag is set */
    return  sampling;
   81cdc:	d0a01b17 	ldw	r2,-32660(gp)

}
   81ce0:	e037883a 	mov	sp,fp
   81ce4:	df000017 	ldw	fp,0(sp)
   81ce8:	dec00104 	addi	sp,sp,4
   81cec:	f800283a 	ret

00081cf0 <trace_rdy>:
   Last Modified:    Mar. 13, 1994

*/

int  trace_rdy()
{
   81cf0:	deffff04 	addi	sp,sp,-4
   81cf4:	df000015 	stw	fp,0(sp)
   81cf8:	d839883a 	mov	fp,sp
      /* none */



    /* ready for another trace if not sampling and trace is ready */
    return  (!sampling && trace_status);
   81cfc:	d0a01b17 	ldw	r2,-32660(gp)
   81d00:	1000041e 	bne	r2,zero,81d14 <trace_rdy+0x24>
   81d04:	d0a01a17 	ldw	r2,-32664(gp)
   81d08:	10000226 	beq	r2,zero,81d14 <trace_rdy+0x24>
   81d0c:	00800044 	movi	r2,1
   81d10:	00000106 	br	81d18 <trace_rdy+0x28>
   81d14:	0005883a 	mov	r2,zero

}
   81d18:	e037883a 	mov	sp,fp
   81d1c:	df000017 	ldw	fp,0(sp)
   81d20:	dec00104 	addi	sp,sp,4
   81d24:	f800283a 	ret

00081d28 <trace_done>:
   Last Modified:    May 9, 2006

*/

void  trace_done()
{
   81d28:	defffe04 	addi	sp,sp,-8
   81d2c:	dfc00115 	stw	ra,4(sp)
   81d30:	df000015 	stw	fp,0(sp)
   81d34:	d839883a 	mov	fp,sp
      /* none */



    /* done with a trace - if retriggering, ready for another one */
    if (get_trigger_mode() != ONESHOT_TRIGGER)
   81d38:	0080dac0 	call	80dac <get_trigger_mode>
   81d3c:	108000a0 	cmpeqi	r2,r2,2
   81d40:	1000021e 	bne	r2,zero,81d4c <trace_done+0x24>
        /* in a retriggering mode - set trace_status to TRUE (ready) */
	trace_status = TRUE;
   81d44:	00800044 	movi	r2,1
   81d48:	d0a01a15 	stw	r2,-32664(gp)

    /* no longer sampling data */
    sampling = FALSE;
   81d4c:	d0201b15 	stw	zero,-32660(gp)


    /* done so return */
    return;
   81d50:	0001883a 	nop

}
   81d54:	e037883a 	mov	sp,fp
   81d58:	dfc00117 	ldw	ra,4(sp)
   81d5c:	df000017 	ldw	fp,0(sp)
   81d60:	dec00204 	addi	sp,sp,8
   81d64:	f800283a 	ret

00081d68 <trace_rearm>:
   Last Modified:    Mar. 8, 1994

*/

void  trace_rearm()
{
   81d68:	deffff04 	addi	sp,sp,-4
   81d6c:	df000015 	stw	fp,0(sp)
   81d70:	d839883a 	mov	fp,sp
      /* none */



    /* rearm the trace - set status to ready (TRUE) */
    trace_status = TRUE;
   81d74:	00800044 	movi	r2,1
   81d78:	d0a01a15 	stw	r2,-32664(gp)


    /* all done - return */
    return;
   81d7c:	0001883a 	nop

}
   81d80:	e037883a 	mov	sp,fp
   81d84:	df000017 	ldw	fp,0(sp)
   81d88:	dec00104 	addi	sp,sp,4
   81d8c:	f800283a 	ret

00081d90 <set_trace_size>:
   Last Modified:    Mar. 8, 1994

*/

void  set_trace_size(int size)
{
   81d90:	defffe04 	addi	sp,sp,-8
   81d94:	df000115 	stw	fp,4(sp)
   81d98:	df000104 	addi	fp,sp,4
   81d9c:	e13fff15 	stw	r4,-4(fp)
      /* none */



    /* set the locally global sample size */
    sample_size = size;
   81da0:	e0bfff17 	ldw	r2,-4(fp)
   81da4:	d0a01c15 	stw	r2,-32656(gp)


    /* all done, return */
    return;
   81da8:	0001883a 	nop

}
   81dac:	e037883a 	mov	sp,fp
   81db0:	df000017 	ldw	fp,0(sp)
   81db4:	dec00104 	addi	sp,sp,4
   81db8:	f800283a 	ret

00081dbc <set_display_scale>:
   Last Modified:    May 9, 2006

*/

void  set_display_scale(enum scale_type scale)
{
   81dbc:	defffa04 	addi	sp,sp,-24
   81dc0:	dfc00515 	stw	ra,20(sp)
   81dc4:	df000415 	stw	fp,16(sp)
   81dc8:	df000404 	addi	fp,sp,16
   81dcc:	e13fff15 	stw	r4,-4(fp)



    /* whenever change scale type, need to clear out previous scale */
    /* unnecessary if going to SCALE_GRID or from SCALE_NONE or not changing the scale */
    if ((scale != SCALE_GRID) && (cur_scale != SCALE_NONE) && (scale != cur_scale))  {
   81dd0:	e0bfff17 	ldw	r2,-4(fp)
   81dd4:	108000a0 	cmpeqi	r2,r2,2
   81dd8:	10008d1e 	bne	r2,zero,82010 <set_display_scale+0x254>
   81ddc:	d0a01d17 	ldw	r2,-32652(gp)
   81de0:	10008b26 	beq	r2,zero,82010 <set_display_scale+0x254>
   81de4:	d0a01d17 	ldw	r2,-32652(gp)
   81de8:	e0ffff17 	ldw	r3,-4(fp)
   81dec:	18808826 	beq	r3,r2,82010 <set_display_scale+0x254>

        /* need to restore the trace under the lines (tick, grid, or axis) */

	/* go through all points on horizontal lines */
	for (j = -Y_TICK_CNT; j <= Y_TICK_CNT; j++)  {
   81df0:	00bfff84 	movi	r2,-2
   81df4:	e0bffe15 	stw	r2,-8(fp)
   81df8:	00003e06 	br	81ef4 <set_display_scale+0x138>

	    /* get y position of the line */
	    p = X_AXIS_POS + j * Y_TICK_SIZE;
   81dfc:	e0bffe17 	ldw	r2,-8(fp)
   81e00:	10800c24 	muli	r2,r2,48
   81e04:	10802204 	addi	r2,r2,136
   81e08:	e0bffc15 	stw	r2,-16(fp)
	    /* make sure it is in range */
	    if (p >= PLOT_SIZE_Y)
   81e0c:	e0bffc17 	ldw	r2,-16(fp)
   81e10:	10804410 	cmplti	r2,r2,272
   81e14:	1000021e 	bne	r2,zero,81e20 <set_display_scale+0x64>
	        p = PLOT_SIZE_Y - 1;
   81e18:	008043c4 	movi	r2,271
   81e1c:	e0bffc15 	stw	r2,-16(fp)
	    if (p < 0)
   81e20:	e0bffc17 	ldw	r2,-16(fp)
   81e24:	1000010e 	bge	r2,zero,81e2c <set_display_scale+0x70>
	        p = 0;
   81e28:	e03ffc15 	stw	zero,-16(fp)

	    /* look at entire horizontal line */
	    for (i = 0; i < PLOT_SIZE_X; i++)  {
   81e2c:	e03ffd15 	stw	zero,-12(fp)
   81e30:	00002a06 	br	81edc <set_display_scale+0x120>
	        /* check if this point is on or off (need to look at bits) */
		if ((saved_axis_x[j + Y_TICK_CNT][i / 8] & (0x80 >> (i % 8))) == 0)
   81e34:	e0bffe17 	ldw	r2,-8(fp)
   81e38:	11000084 	addi	r4,r2,2
   81e3c:	e0bffd17 	ldw	r2,-12(fp)
   81e40:	1000010e 	bge	r2,zero,81e48 <set_display_scale+0x8c>
   81e44:	108001c4 	addi	r2,r2,7
   81e48:	1005d0fa 	srai	r2,r2,3
   81e4c:	00c004b4 	movhi	r3,18
   81e50:	18c5ec04 	addi	r3,r3,6064
   81e54:	21000f24 	muli	r4,r4,60
   81e58:	2085883a 	add	r2,r4,r2
   81e5c:	1885883a 	add	r2,r3,r2
   81e60:	10800003 	ldbu	r2,0(r2)
   81e64:	10c03fcc 	andi	r3,r2,255
   81e68:	e13ffd17 	ldw	r4,-12(fp)
   81e6c:	00a00034 	movhi	r2,32768
   81e70:	108001c4 	addi	r2,r2,7
   81e74:	2084703a 	and	r2,r4,r2
   81e78:	1000040e 	bge	r2,zero,81e8c <set_display_scale+0xd0>
   81e7c:	10bfffc4 	addi	r2,r2,-1
   81e80:	013ffe04 	movi	r4,-8
   81e84:	1104b03a 	or	r2,r2,r4
   81e88:	10800044 	addi	r2,r2,1
   81e8c:	01002004 	movi	r4,128
   81e90:	2085d83a 	sra	r2,r4,r2
   81e94:	1884703a 	and	r2,r3,r2
   81e98:	1000071e 	bne	r2,zero,81eb8 <set_display_scale+0xfc>
		    /* saved pixel is off */
		    plot_pixel(i, p, PIXEL_WHITE);
   81e9c:	e0fffd17 	ldw	r3,-12(fp)
   81ea0:	e0bffc17 	ldw	r2,-16(fp)
   81ea4:	1809883a 	mov	r4,r3
   81ea8:	100b883a 	mov	r5,r2
   81eac:	01803fc4 	movi	r6,255
   81eb0:	0082c800 	call	82c80 <plot_pixel>
   81eb4:	00000606 	br	81ed0 <set_display_scale+0x114>
		else
		    /* saved pixel is on */
		    plot_pixel(i, p, PIXEL_BLACK);
   81eb8:	e0fffd17 	ldw	r3,-12(fp)
   81ebc:	e0bffc17 	ldw	r2,-16(fp)
   81ec0:	1809883a 	mov	r4,r3
   81ec4:	100b883a 	mov	r5,r2
   81ec8:	000d883a 	mov	r6,zero
   81ecc:	0082c800 	call	82c80 <plot_pixel>
	        p = PLOT_SIZE_Y - 1;
	    if (p < 0)
	        p = 0;

	    /* look at entire horizontal line */
	    for (i = 0; i < PLOT_SIZE_X; i++)  {
   81ed0:	e0bffd17 	ldw	r2,-12(fp)
   81ed4:	10800044 	addi	r2,r2,1
   81ed8:	e0bffd15 	stw	r2,-12(fp)
   81edc:	e0bffd17 	ldw	r2,-12(fp)
   81ee0:	10807810 	cmplti	r2,r2,480
   81ee4:	103fd31e 	bne	r2,zero,81e34 <set_display_scale+0x78>
    if ((scale != SCALE_GRID) && (cur_scale != SCALE_NONE) && (scale != cur_scale))  {

        /* need to restore the trace under the lines (tick, grid, or axis) */

	/* go through all points on horizontal lines */
	for (j = -Y_TICK_CNT; j <= Y_TICK_CNT; j++)  {
   81ee8:	e0bffe17 	ldw	r2,-8(fp)
   81eec:	10800044 	addi	r2,r2,1
   81ef0:	e0bffe15 	stw	r2,-8(fp)
   81ef4:	e0bffe17 	ldw	r2,-8(fp)
   81ef8:	108000d0 	cmplti	r2,r2,3
   81efc:	103fbf1e 	bne	r2,zero,81dfc <set_display_scale+0x40>
		    plot_pixel(i, p, PIXEL_BLACK);
	    }
	}

	/* go through all points on vertical lines */
	for (j = -X_TICK_CNT; j <= X_TICK_CNT; j++)  {
   81f00:	00bffec4 	movi	r2,-5
   81f04:	e0bffe15 	stw	r2,-8(fp)
   81f08:	00003e06 	br	82004 <set_display_scale+0x248>

	    /* get x position of the line */
	    p = Y_AXIS_POS + j * X_TICK_SIZE;
   81f0c:	e0bffe17 	ldw	r2,-8(fp)
   81f10:	10800c24 	muli	r2,r2,48
   81f14:	10803c04 	addi	r2,r2,240
   81f18:	e0bffc15 	stw	r2,-16(fp)
	    /* make sure it is in range */
	    if (p >= PLOT_SIZE_X)
   81f1c:	e0bffc17 	ldw	r2,-16(fp)
   81f20:	10807810 	cmplti	r2,r2,480
   81f24:	1000021e 	bne	r2,zero,81f30 <set_display_scale+0x174>
	        p = PLOT_SIZE_X - 1;
   81f28:	008077c4 	movi	r2,479
   81f2c:	e0bffc15 	stw	r2,-16(fp)
	    if (p < 0)
   81f30:	e0bffc17 	ldw	r2,-16(fp)
   81f34:	1000010e 	bge	r2,zero,81f3c <set_display_scale+0x180>
	        p = 0;
   81f38:	e03ffc15 	stw	zero,-16(fp)

	    /* look at entire vertical line */
	    for (i = 0; i < PLOT_SIZE_Y; i++)  {
   81f3c:	e03ffd15 	stw	zero,-12(fp)
   81f40:	00002a06 	br	81fec <set_display_scale+0x230>
	        /* check if this point is on or off (need to look at bits) */
		if ((saved_axis_y[j + X_TICK_CNT][i / 8] & (0x80 >> (i % 8))) == 0)
   81f44:	e0bffe17 	ldw	r2,-8(fp)
   81f48:	11000144 	addi	r4,r2,5
   81f4c:	e0bffd17 	ldw	r2,-12(fp)
   81f50:	1000010e 	bge	r2,zero,81f58 <set_display_scale+0x19c>
   81f54:	108001c4 	addi	r2,r2,7
   81f58:	1005d0fa 	srai	r2,r2,3
   81f5c:	00c004b4 	movhi	r3,18
   81f60:	18c63704 	addi	r3,r3,6364
   81f64:	210008a4 	muli	r4,r4,34
   81f68:	2085883a 	add	r2,r4,r2
   81f6c:	1885883a 	add	r2,r3,r2
   81f70:	10800003 	ldbu	r2,0(r2)
   81f74:	10c03fcc 	andi	r3,r2,255
   81f78:	e13ffd17 	ldw	r4,-12(fp)
   81f7c:	00a00034 	movhi	r2,32768
   81f80:	108001c4 	addi	r2,r2,7
   81f84:	2084703a 	and	r2,r4,r2
   81f88:	1000040e 	bge	r2,zero,81f9c <set_display_scale+0x1e0>
   81f8c:	10bfffc4 	addi	r2,r2,-1
   81f90:	013ffe04 	movi	r4,-8
   81f94:	1104b03a 	or	r2,r2,r4
   81f98:	10800044 	addi	r2,r2,1
   81f9c:	01002004 	movi	r4,128
   81fa0:	2085d83a 	sra	r2,r4,r2
   81fa4:	1884703a 	and	r2,r3,r2
   81fa8:	1000071e 	bne	r2,zero,81fc8 <set_display_scale+0x20c>
		    /* saved pixel is off */
		    plot_pixel(p, i, PIXEL_WHITE);
   81fac:	e0fffc17 	ldw	r3,-16(fp)
   81fb0:	e0bffd17 	ldw	r2,-12(fp)
   81fb4:	1809883a 	mov	r4,r3
   81fb8:	100b883a 	mov	r5,r2
   81fbc:	01803fc4 	movi	r6,255
   81fc0:	0082c800 	call	82c80 <plot_pixel>
   81fc4:	00000606 	br	81fe0 <set_display_scale+0x224>
		else
		    /* saved pixel is on */
		    plot_pixel(p, i, PIXEL_BLACK);
   81fc8:	e0fffc17 	ldw	r3,-16(fp)
   81fcc:	e0bffd17 	ldw	r2,-12(fp)
   81fd0:	1809883a 	mov	r4,r3
   81fd4:	100b883a 	mov	r5,r2
   81fd8:	000d883a 	mov	r6,zero
   81fdc:	0082c800 	call	82c80 <plot_pixel>
	        p = PLOT_SIZE_X - 1;
	    if (p < 0)
	        p = 0;

	    /* look at entire vertical line */
	    for (i = 0; i < PLOT_SIZE_Y; i++)  {
   81fe0:	e0bffd17 	ldw	r2,-12(fp)
   81fe4:	10800044 	addi	r2,r2,1
   81fe8:	e0bffd15 	stw	r2,-12(fp)
   81fec:	e0bffd17 	ldw	r2,-12(fp)
   81ff0:	10804410 	cmplti	r2,r2,272
   81ff4:	103fd31e 	bne	r2,zero,81f44 <set_display_scale+0x188>
		    plot_pixel(i, p, PIXEL_BLACK);
	    }
	}

	/* go through all points on vertical lines */
	for (j = -X_TICK_CNT; j <= X_TICK_CNT; j++)  {
   81ff8:	e0bffe17 	ldw	r2,-8(fp)
   81ffc:	10800044 	addi	r2,r2,1
   82000:	e0bffe15 	stw	r2,-8(fp)
   82004:	e0bffe17 	ldw	r2,-8(fp)
   82008:	10800190 	cmplti	r2,r2,6
   8200c:	103fbf1e 	bne	r2,zero,81f0c <set_display_scale+0x150>
	}
    }


    /* now handle the scale type appropriately */
    switch (scale)  {
   82010:	e0bfff17 	ldw	r2,-4(fp)
   82014:	10005626 	beq	r2,zero,82170 <set_display_scale+0x3b4>
   82018:	108000e8 	cmpgeui	r2,r2,3
   8201c:	1000551e 	bne	r2,zero,82174 <set_display_scale+0x3b8>

    	case SCALE_AXES:    /* axes for the scale */
    	case SCALE_GRID:    /* grid for the scale */

		            /* draw x lines (grid or tick marks) */
			    for (i = -Y_TICK_CNT; i <= Y_TICK_CNT; i++)  {
   82020:	00bfff84 	movi	r2,-2
   82024:	e0bffd15 	stw	r2,-12(fp)
   82028:	00002506 	br	820c0 <set_display_scale+0x304>

				/* get y position of the line */
				p = X_AXIS_POS + i * Y_TICK_SIZE;
   8202c:	e0bffd17 	ldw	r2,-12(fp)
   82030:	10800c24 	muli	r2,r2,48
   82034:	10802204 	addi	r2,r2,136
   82038:	e0bffc15 	stw	r2,-16(fp)
				/* make sure it is in range */
				if (p >= PLOT_SIZE_Y)
   8203c:	e0bffc17 	ldw	r2,-16(fp)
   82040:	10804410 	cmplti	r2,r2,272
   82044:	1000021e 	bne	r2,zero,82050 <set_display_scale+0x294>
				    p = PLOT_SIZE_Y - 1;
   82048:	008043c4 	movi	r2,271
   8204c:	e0bffc15 	stw	r2,-16(fp)
				if (p < 0)
   82050:	e0bffc17 	ldw	r2,-16(fp)
   82054:	1000010e 	bge	r2,zero,8205c <set_display_scale+0x2a0>
				    p = 0;
   82058:	e03ffc15 	stw	zero,-16(fp)

				/* should we draw a grid, an axis, or a tick mark */
				if (scale == SCALE_GRID)
   8205c:	e0bfff17 	ldw	r2,-4(fp)
   82060:	10800098 	cmpnei	r2,r2,2
   82064:	1000061e 	bne	r2,zero,82080 <set_display_scale+0x2c4>
				    /* drawing a grid line */
			            plot_hline(X_GRID_START, p, (X_GRID_END - X_GRID_START), PIXEL_BLUE);
   82068:	0009883a 	mov	r4,zero
   8206c:	e17ffc17 	ldw	r5,-16(fp)
   82070:	018077c4 	movi	r6,479
   82074:	01fffc04 	movi	r7,-16
   82078:	00803e00 	call	803e0 <plot_hline>
   8207c:	00000d06 	br	820b4 <set_display_scale+0x2f8>
				else if (i == 0)
   82080:	e0bffd17 	ldw	r2,-12(fp)
   82084:	1000061e 	bne	r2,zero,820a0 <set_display_scale+0x2e4>
				    /* drawing the x axis */
			            plot_hline(X_AXIS_START, p, (X_AXIS_END - X_AXIS_START), PIXEL_BLUE);
   82088:	0009883a 	mov	r4,zero
   8208c:	e17ffc17 	ldw	r5,-16(fp)
   82090:	018077c4 	movi	r6,479
   82094:	01fffc04 	movi	r7,-16
   82098:	00803e00 	call	803e0 <plot_hline>
   8209c:	00000506 	br	820b4 <set_display_scale+0x2f8>
				else
				    /* must be drawing a tick mark */
			            plot_hline((Y_AXIS_POS - (TICK_LEN / 2)), p, TICK_LEN, PIXEL_BLUE);
   820a0:	01003b84 	movi	r4,238
   820a4:	e17ffc17 	ldw	r5,-16(fp)
   820a8:	01800144 	movi	r6,5
   820ac:	01fffc04 	movi	r7,-16
   820b0:	00803e00 	call	803e0 <plot_hline>

    	case SCALE_AXES:    /* axes for the scale */
    	case SCALE_GRID:    /* grid for the scale */

		            /* draw x lines (grid or tick marks) */
			    for (i = -Y_TICK_CNT; i <= Y_TICK_CNT; i++)  {
   820b4:	e0bffd17 	ldw	r2,-12(fp)
   820b8:	10800044 	addi	r2,r2,1
   820bc:	e0bffd15 	stw	r2,-12(fp)
   820c0:	e0bffd17 	ldw	r2,-12(fp)
   820c4:	108000d0 	cmplti	r2,r2,3
   820c8:	103fd81e 	bne	r2,zero,8202c <set_display_scale+0x270>
				    /* must be drawing a tick mark */
			            plot_hline((Y_AXIS_POS - (TICK_LEN / 2)), p, TICK_LEN, PIXEL_BLUE);
			    }

		            /* draw y lines (grid or tick marks) */
			    for (i = -X_TICK_CNT; i <= X_TICK_CNT; i++)  {
   820cc:	00bffec4 	movi	r2,-5
   820d0:	e0bffd15 	stw	r2,-12(fp)
   820d4:	00002206 	br	82160 <set_display_scale+0x3a4>

				/* get x position of the line */
				p = Y_AXIS_POS + i * X_TICK_SIZE;
   820d8:	e0bffd17 	ldw	r2,-12(fp)
   820dc:	10800c24 	muli	r2,r2,48
   820e0:	10803c04 	addi	r2,r2,240
   820e4:	e0bffc15 	stw	r2,-16(fp)
				/* make sure it is in range */
				if (p >= PLOT_SIZE_X)
   820e8:	e0bffc17 	ldw	r2,-16(fp)
   820ec:	10807810 	cmplti	r2,r2,480
   820f0:	1000021e 	bne	r2,zero,820fc <set_display_scale+0x340>
				    p = PLOT_SIZE_X - 1;
   820f4:	008077c4 	movi	r2,479
   820f8:	e0bffc15 	stw	r2,-16(fp)
			        if (p < 0)
   820fc:	e0bffc17 	ldw	r2,-16(fp)
   82100:	1000010e 	bge	r2,zero,82108 <set_display_scale+0x34c>
				    p = 0;
   82104:	e03ffc15 	stw	zero,-16(fp)

				/* should we draw a grid, an axis, or a tick mark */
				if (scale == SCALE_GRID)
   82108:	e0bfff17 	ldw	r2,-4(fp)
   8210c:	10800098 	cmpnei	r2,r2,2
   82110:	1000051e 	bne	r2,zero,82128 <set_display_scale+0x36c>
				    /* drawing a grid line */
			            plot_vline(p, Y_GRID_START, (Y_GRID_END - Y_GRID_START));
   82114:	e13ffc17 	ldw	r4,-16(fp)
   82118:	000b883a 	mov	r5,zero
   8211c:	018043c4 	movi	r6,271
   82120:	00804940 	call	80494 <plot_vline>
   82124:	00000b06 	br	82154 <set_display_scale+0x398>
				else if (i == 0)
   82128:	e0bffd17 	ldw	r2,-12(fp)
   8212c:	1000051e 	bne	r2,zero,82144 <set_display_scale+0x388>
				    /* drawing the y axis */
			            plot_vline(p, Y_AXIS_START, (Y_AXIS_END - Y_AXIS_START));
   82130:	e13ffc17 	ldw	r4,-16(fp)
   82134:	000b883a 	mov	r5,zero
   82138:	018043c4 	movi	r6,271
   8213c:	00804940 	call	80494 <plot_vline>
   82140:	00000406 	br	82154 <set_display_scale+0x398>
				else
				    /* must be drawing a tick mark */
			            plot_vline(p, (X_AXIS_POS - (TICK_LEN / 2)), TICK_LEN);
   82144:	e13ffc17 	ldw	r4,-16(fp)
   82148:	01402184 	movi	r5,134
   8214c:	01800144 	movi	r6,5
   82150:	00804940 	call	80494 <plot_vline>
				    /* must be drawing a tick mark */
			            plot_hline((Y_AXIS_POS - (TICK_LEN / 2)), p, TICK_LEN, PIXEL_BLUE);
			    }

		            /* draw y lines (grid or tick marks) */
			    for (i = -X_TICK_CNT; i <= X_TICK_CNT; i++)  {
   82154:	e0bffd17 	ldw	r2,-12(fp)
   82158:	10800044 	addi	r2,r2,1
   8215c:	e0bffd15 	stw	r2,-12(fp)
   82160:	e0bffd17 	ldw	r2,-12(fp)
   82164:	10800190 	cmplti	r2,r2,6
   82168:	103fdb1e 	bne	r2,zero,820d8 <set_display_scale+0x31c>
				    /* must be drawing a tick mark */
			            plot_vline(p, (X_AXIS_POS - (TICK_LEN / 2)), TICK_LEN);
			    }

			    /* done with the axes */
			    break;
   8216c:	00000106 	br	82174 <set_display_scale+0x3b8>

        case SCALE_NONE:    /* there is no scale */
			    /* already restored plot so nothing to do */
			    break;
   82170:	0001883a 	nop

    }


    /* now remember the new (now current) scale type */
    cur_scale = scale;
   82174:	e0bfff17 	ldw	r2,-4(fp)
   82178:	d0a01d15 	stw	r2,-32652(gp)


    /* scale is taken care of, return */
    return;
   8217c:	0001883a 	nop

}
   82180:	e037883a 	mov	sp,fp
   82184:	dfc00117 	ldw	ra,4(sp)
   82188:	df000017 	ldw	fp,0(sp)
   8218c:	dec00204 	addi	sp,sp,8
   82190:	f800283a 	ret

00082194 <clear_saved_areas>:
   Last Modified:    May 9, 2006

*/

void  clear_saved_areas()
{
   82194:	defffd04 	addi	sp,sp,-12
   82198:	df000215 	stw	fp,8(sp)
   8219c:	df000204 	addi	fp,sp,8
    int  j;



    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
   821a0:	e03fff15 	stw	zero,-4(fp)
   821a4:	00001306 	br	821f4 <clear_saved_areas+0x60>
        for (i = 0; i < (SIZE_X / 8); i++)
   821a8:	e03ffe15 	stw	zero,-8(fp)
   821ac:	00000b06 	br	821dc <clear_saved_areas+0x48>
            saved_axis_x[j][i] = 0;
   821b0:	00c004b4 	movhi	r3,18
   821b4:	18c5ec04 	addi	r3,r3,6064
   821b8:	e0bfff17 	ldw	r2,-4(fp)
   821bc:	11000f24 	muli	r4,r2,60
   821c0:	e0bffe17 	ldw	r2,-8(fp)
   821c4:	2085883a 	add	r2,r4,r2
   821c8:	1885883a 	add	r2,r3,r2
   821cc:	10000005 	stb	zero,0(r2)



    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
        for (i = 0; i < (SIZE_X / 8); i++)
   821d0:	e0bffe17 	ldw	r2,-8(fp)
   821d4:	10800044 	addi	r2,r2,1
   821d8:	e0bffe15 	stw	r2,-8(fp)
   821dc:	e0bffe17 	ldw	r2,-8(fp)
   821e0:	10800f10 	cmplti	r2,r2,60
   821e4:	103ff21e 	bne	r2,zero,821b0 <clear_saved_areas+0x1c>
    int  j;



    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
   821e8:	e0bfff17 	ldw	r2,-4(fp)
   821ec:	10800044 	addi	r2,r2,1
   821f0:	e0bfff15 	stw	r2,-4(fp)
   821f4:	e0bfff17 	ldw	r2,-4(fp)
   821f8:	10800150 	cmplti	r2,r2,5
   821fc:	103fea1e 	bne	r2,zero,821a8 <clear_saved_areas+0x14>
        for (i = 0; i < (SIZE_X / 8); i++)
            saved_axis_x[j][i] = 0;
    for (j = 0; j <= (2 * X_TICK_CNT); j++)
   82200:	e03fff15 	stw	zero,-4(fp)
   82204:	00001306 	br	82254 <clear_saved_areas+0xc0>
        for (i = 0; i < (SIZE_Y / 8); i++)
   82208:	e03ffe15 	stw	zero,-8(fp)
   8220c:	00000b06 	br	8223c <clear_saved_areas+0xa8>
            saved_axis_y[j][i] = 0;
   82210:	00c004b4 	movhi	r3,18
   82214:	18c63704 	addi	r3,r3,6364
   82218:	e0bfff17 	ldw	r2,-4(fp)
   8221c:	110008a4 	muli	r4,r2,34
   82220:	e0bffe17 	ldw	r2,-8(fp)
   82224:	2085883a 	add	r2,r4,r2
   82228:	1885883a 	add	r2,r3,r2
   8222c:	10000005 	stb	zero,0(r2)
    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
        for (i = 0; i < (SIZE_X / 8); i++)
            saved_axis_x[j][i] = 0;
    for (j = 0; j <= (2 * X_TICK_CNT); j++)
        for (i = 0; i < (SIZE_Y / 8); i++)
   82230:	e0bffe17 	ldw	r2,-8(fp)
   82234:	10800044 	addi	r2,r2,1
   82238:	e0bffe15 	stw	r2,-8(fp)
   8223c:	e0bffe17 	ldw	r2,-8(fp)
   82240:	10800890 	cmplti	r2,r2,34
   82244:	103ff21e 	bne	r2,zero,82210 <clear_saved_areas+0x7c>

    /* clear x-axis and y-axis save areas */
    for (j = 0; j <= (2 * Y_TICK_CNT); j++)
        for (i = 0; i < (SIZE_X / 8); i++)
            saved_axis_x[j][i] = 0;
    for (j = 0; j <= (2 * X_TICK_CNT); j++)
   82248:	e0bfff17 	ldw	r2,-4(fp)
   8224c:	10800044 	addi	r2,r2,1
   82250:	e0bfff15 	stw	r2,-4(fp)
   82254:	e0bfff17 	ldw	r2,-4(fp)
   82258:	108002d0 	cmplti	r2,r2,11
   8225c:	103fea1e 	bne	r2,zero,82208 <clear_saved_areas+0x74>
        for (i = 0; i < (SIZE_Y / 8); i++)
            saved_axis_y[j][i] = 0;

    /* clear the menu save ares */
    for (i = 0; i < MENU_SIZE_Y; i++)
   82260:	e03ffe15 	stw	zero,-8(fp)
   82264:	00001306 	br	822b4 <clear_saved_areas+0x120>
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
   82268:	e03fff15 	stw	zero,-4(fp)
   8226c:	00000b06 	br	8229c <clear_saved_areas+0x108>
	    saved_menu[i][j] = 0;
   82270:	00c004b4 	movhi	r3,18
   82274:	18c69484 	addi	r3,r3,6738
   82278:	e0bffe17 	ldw	r2,-8(fp)
   8227c:	11000324 	muli	r4,r2,12
   82280:	e0bfff17 	ldw	r2,-4(fp)
   82284:	2085883a 	add	r2,r4,r2
   82288:	1885883a 	add	r2,r3,r2
   8228c:	10000005 	stb	zero,0(r2)
        for (i = 0; i < (SIZE_Y / 8); i++)
            saved_axis_y[j][i] = 0;

    /* clear the menu save ares */
    for (i = 0; i < MENU_SIZE_Y; i++)
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
   82290:	e0bfff17 	ldw	r2,-4(fp)
   82294:	10800044 	addi	r2,r2,1
   82298:	e0bfff15 	stw	r2,-4(fp)
   8229c:	e0bfff17 	ldw	r2,-4(fp)
   822a0:	10800310 	cmplti	r2,r2,12
   822a4:	103ff21e 	bne	r2,zero,82270 <clear_saved_areas+0xdc>
    for (j = 0; j <= (2 * X_TICK_CNT); j++)
        for (i = 0; i < (SIZE_Y / 8); i++)
            saved_axis_y[j][i] = 0;

    /* clear the menu save ares */
    for (i = 0; i < MENU_SIZE_Y; i++)
   822a8:	e0bffe17 	ldw	r2,-8(fp)
   822ac:	10800044 	addi	r2,r2,1
   822b0:	e0bffe15 	stw	r2,-8(fp)
   822b4:	e0bffe17 	ldw	r2,-8(fp)
   822b8:	10800e10 	cmplti	r2,r2,56
   822bc:	103fea1e 	bne	r2,zero,82268 <clear_saved_areas+0xd4>
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
	    saved_menu[i][j] = 0;

    /* clear general save area */
    for (i = 0; i < SAVE_SIZE_Y; i++)
   822c0:	e03ffe15 	stw	zero,-8(fp)
   822c4:	00001306 	br	82314 <clear_saved_areas+0x180>
        for (j = 0; j < (SAVE_SIZE_X / 8); j++)
   822c8:	e03fff15 	stw	zero,-4(fp)
   822cc:	00000b06 	br	822fc <clear_saved_areas+0x168>
	    saved_area[i][j] = 0;
   822d0:	00c004b4 	movhi	r3,18
   822d4:	18c73c84 	addi	r3,r3,7410
   822d8:	e0bffe17 	ldw	r2,-8(fp)
   822dc:	110003e4 	muli	r4,r2,15
   822e0:	e0bfff17 	ldw	r2,-4(fp)
   822e4:	2085883a 	add	r2,r4,r2
   822e8:	1885883a 	add	r2,r3,r2
   822ec:	10000005 	stb	zero,0(r2)
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
	    saved_menu[i][j] = 0;

    /* clear general save area */
    for (i = 0; i < SAVE_SIZE_Y; i++)
        for (j = 0; j < (SAVE_SIZE_X / 8); j++)
   822f0:	e0bfff17 	ldw	r2,-4(fp)
   822f4:	10800044 	addi	r2,r2,1
   822f8:	e0bfff15 	stw	r2,-4(fp)
   822fc:	e0bfff17 	ldw	r2,-4(fp)
   82300:	108003d0 	cmplti	r2,r2,15
   82304:	103ff21e 	bne	r2,zero,822d0 <clear_saved_areas+0x13c>
    for (i = 0; i < MENU_SIZE_Y; i++)
        for (j = 0; j < ((MENU_SIZE_X + 7) / 8); j++)
	    saved_menu[i][j] = 0;

    /* clear general save area */
    for (i = 0; i < SAVE_SIZE_Y; i++)
   82308:	e0bffe17 	ldw	r2,-8(fp)
   8230c:	10800044 	addi	r2,r2,1
   82310:	e0bffe15 	stw	r2,-8(fp)
   82314:	e0bffe17 	ldw	r2,-8(fp)
   82318:	10800410 	cmplti	r2,r2,16
   8231c:	103fea1e 	bne	r2,zero,822c8 <clear_saved_areas+0x134>
        for (j = 0; j < (SAVE_SIZE_X / 8); j++)
	    saved_area[i][j] = 0;


    /* done clearing the saved areas - return */
    return;
   82320:	0001883a 	nop

}
   82324:	e037883a 	mov	sp,fp
   82328:	df000017 	ldw	fp,0(sp)
   8232c:	dec00104 	addi	sp,sp,4
   82330:	f800283a 	ret

00082334 <restore_menu_trace>:
   Last Modified:    Mar. 13, 1994

*/

void  restore_menu_trace()
{
   82334:	defffa04 	addi	sp,sp,-24
   82338:	dfc00515 	stw	ra,20(sp)
   8233c:	df000415 	stw	fp,16(sp)
   82340:	df000404 	addi	fp,sp,16
    int  y;



    /* loop, restoring the trace under the menu */
    for (y = MENU_UL_Y; y < (MENU_UL_Y + MENU_SIZE_Y); y++)  {
   82344:	e03fff15 	stw	zero,-4(fp)
   82348:	00003206 	br	82414 <restore_menu_trace+0xe0>

        /* starting a row - initialize bit position */
	bit_position = 0x80;	/* start at high-order bit in the byte */
   8234c:	00802004 	movi	r2,128
   82350:	e0bffc15 	stw	r2,-16(fp)
	bit_offset = 0;		/* first byte of the row */
   82354:	e03ffd15 	stw	zero,-12(fp)

        for (x = MENU_UL_X; x < (MENU_UL_X + MENU_SIZE_X); x++)  {
   82358:	00805e84 	movi	r2,378
   8235c:	e0bffe15 	stw	r2,-8(fp)
   82360:	00002606 	br	823fc <restore_menu_trace+0xc8>

	    /* check if this point is on or off (need to look at bits) */
	    if ((saved_menu[y - MENU_UL_Y][bit_offset] & bit_position) == 0)
   82364:	00c004b4 	movhi	r3,18
   82368:	18c69484 	addi	r3,r3,6738
   8236c:	e0bfff17 	ldw	r2,-4(fp)
   82370:	11000324 	muli	r4,r2,12
   82374:	e0bffd17 	ldw	r2,-12(fp)
   82378:	2085883a 	add	r2,r4,r2
   8237c:	1885883a 	add	r2,r3,r2
   82380:	10800003 	ldbu	r2,0(r2)
   82384:	10c03fcc 	andi	r3,r2,255
   82388:	e0bffc17 	ldw	r2,-16(fp)
   8238c:	1884703a 	and	r2,r3,r2
   82390:	1000071e 	bne	r2,zero,823b0 <restore_menu_trace+0x7c>
	        /* saved pixel is off */
		plot_pixel(x, y, PIXEL_WHITE);
   82394:	e0fffe17 	ldw	r3,-8(fp)
   82398:	e0bfff17 	ldw	r2,-4(fp)
   8239c:	1809883a 	mov	r4,r3
   823a0:	100b883a 	mov	r5,r2
   823a4:	01803fc4 	movi	r6,255
   823a8:	0082c800 	call	82c80 <plot_pixel>
   823ac:	00000606 	br	823c8 <restore_menu_trace+0x94>
	    else
	        /* saved pixel is on */
		plot_pixel(x, y, PIXEL_BLACK);
   823b0:	e0fffe17 	ldw	r3,-8(fp)
   823b4:	e0bfff17 	ldw	r2,-4(fp)
   823b8:	1809883a 	mov	r4,r3
   823bc:	100b883a 	mov	r5,r2
   823c0:	000d883a 	mov	r6,zero
   823c4:	0082c800 	call	82c80 <plot_pixel>

	    /* move to the next bit position */
	    bit_position >>= 1;
   823c8:	e0bffc17 	ldw	r2,-16(fp)
   823cc:	1005d07a 	srai	r2,r2,1
   823d0:	e0bffc15 	stw	r2,-16(fp)
	    /* check if moving to next byte */
	    if (bit_position == 0)  {
   823d4:	e0bffc17 	ldw	r2,-16(fp)
   823d8:	1000051e 	bne	r2,zero,823f0 <restore_menu_trace+0xbc>
	        /* now on high bit of next byte */
		bit_position = 0x80;
   823dc:	00802004 	movi	r2,128
   823e0:	e0bffc15 	stw	r2,-16(fp)
		bit_offset++;
   823e4:	e0bffd17 	ldw	r2,-12(fp)
   823e8:	10800044 	addi	r2,r2,1
   823ec:	e0bffd15 	stw	r2,-12(fp)

        /* starting a row - initialize bit position */
	bit_position = 0x80;	/* start at high-order bit in the byte */
	bit_offset = 0;		/* first byte of the row */

        for (x = MENU_UL_X; x < (MENU_UL_X + MENU_SIZE_X); x++)  {
   823f0:	e0bffe17 	ldw	r2,-8(fp)
   823f4:	10800044 	addi	r2,r2,1
   823f8:	e0bffe15 	stw	r2,-8(fp)
   823fc:	e0bffe17 	ldw	r2,-8(fp)
   82400:	10807690 	cmplti	r2,r2,474
   82404:	103fd71e 	bne	r2,zero,82364 <restore_menu_trace+0x30>
    int  y;



    /* loop, restoring the trace under the menu */
    for (y = MENU_UL_Y; y < (MENU_UL_Y + MENU_SIZE_Y); y++)  {
   82408:	e0bfff17 	ldw	r2,-4(fp)
   8240c:	10800044 	addi	r2,r2,1
   82410:	e0bfff15 	stw	r2,-4(fp)
   82414:	e0bfff17 	ldw	r2,-4(fp)
   82418:	10800e10 	cmplti	r2,r2,56
   8241c:	103fcb1e 	bne	r2,zero,8234c <restore_menu_trace+0x18>
        }
    }


    /* restored menu area - return */
    return;
   82420:	0001883a 	nop

}
   82424:	e037883a 	mov	sp,fp
   82428:	dfc00117 	ldw	ra,4(sp)
   8242c:	df000017 	ldw	fp,0(sp)
   82430:	dec00204 	addi	sp,sp,8
   82434:	f800283a 	ret

00082438 <set_save_area>:
   Last Modified:    Mar. 8, 1994

*/

void  set_save_area(int pos_x, int pos_y, int size_x, int size_y)
{
   82438:	defff904 	addi	sp,sp,-28
   8243c:	df000615 	stw	fp,24(sp)
   82440:	df000604 	addi	fp,sp,24
   82444:	e13ffc15 	stw	r4,-16(fp)
   82448:	e17ffd15 	stw	r5,-12(fp)
   8244c:	e1bffe15 	stw	r6,-8(fp)
   82450:	e1ffff15 	stw	r7,-4(fp)
    int  y;



    /* just setup all the locally global variables from the passed values */
    saved_pos_x = pos_x;
   82454:	e0bffc17 	ldw	r2,-16(fp)
   82458:	d0a01e15 	stw	r2,-32648(gp)
    saved_pos_y = pos_y;
   8245c:	e0bffd17 	ldw	r2,-12(fp)
   82460:	d0a01f15 	stw	r2,-32644(gp)
    saved_end_x = pos_x + size_x;
   82464:	e0fffc17 	ldw	r3,-16(fp)
   82468:	e0bffe17 	ldw	r2,-8(fp)
   8246c:	1885883a 	add	r2,r3,r2
   82470:	d0a02015 	stw	r2,-32640(gp)
    saved_end_y = pos_y + size_y;
   82474:	e0fffd17 	ldw	r3,-12(fp)
   82478:	e0bfff17 	ldw	r2,-4(fp)
   8247c:	1885883a 	add	r2,r3,r2
   82480:	d0a02115 	stw	r2,-32636(gp)


    /* clear the save area */
    for (y = 0; y < SAVE_SIZE_Y; y++)  {
   82484:	e03ffb15 	stw	zero,-20(fp)
   82488:	00001306 	br	824d8 <set_save_area+0xa0>
        for (x = 0; x < (SAVE_SIZE_X / 8); x++)  {
   8248c:	e03ffa15 	stw	zero,-24(fp)
   82490:	00000b06 	br	824c0 <set_save_area+0x88>
	    saved_area[y][x] = 0;
   82494:	00c004b4 	movhi	r3,18
   82498:	18c73c84 	addi	r3,r3,7410
   8249c:	e0bffb17 	ldw	r2,-20(fp)
   824a0:	110003e4 	muli	r4,r2,15
   824a4:	e0bffa17 	ldw	r2,-24(fp)
   824a8:	2085883a 	add	r2,r4,r2
   824ac:	1885883a 	add	r2,r3,r2
   824b0:	10000005 	stb	zero,0(r2)
    saved_end_y = pos_y + size_y;


    /* clear the save area */
    for (y = 0; y < SAVE_SIZE_Y; y++)  {
        for (x = 0; x < (SAVE_SIZE_X / 8); x++)  {
   824b4:	e0bffa17 	ldw	r2,-24(fp)
   824b8:	10800044 	addi	r2,r2,1
   824bc:	e0bffa15 	stw	r2,-24(fp)
   824c0:	e0bffa17 	ldw	r2,-24(fp)
   824c4:	108003d0 	cmplti	r2,r2,15
   824c8:	103ff21e 	bne	r2,zero,82494 <set_save_area+0x5c>
    saved_end_x = pos_x + size_x;
    saved_end_y = pos_y + size_y;


    /* clear the save area */
    for (y = 0; y < SAVE_SIZE_Y; y++)  {
   824cc:	e0bffb17 	ldw	r2,-20(fp)
   824d0:	10800044 	addi	r2,r2,1
   824d4:	e0bffb15 	stw	r2,-20(fp)
   824d8:	e0bffb17 	ldw	r2,-20(fp)
   824dc:	10800410 	cmplti	r2,r2,16
   824e0:	103fea1e 	bne	r2,zero,8248c <set_save_area+0x54>
        }
    }


    /* setup the saved area - return */
    return;
   824e4:	0001883a 	nop

}
   824e8:	e037883a 	mov	sp,fp
   824ec:	df000017 	ldw	fp,0(sp)
   824f0:	dec00104 	addi	sp,sp,4
   824f4:	f800283a 	ret

000824f8 <restore_trace>:
   Last Modified:    Mar. 13, 1994

*/

void  restore_trace()
{
   824f8:	defffa04 	addi	sp,sp,-24
   824fc:	dfc00515 	stw	ra,20(sp)
   82500:	df000415 	stw	fp,16(sp)
   82504:	df000404 	addi	fp,sp,16
    int  y;



    /* loop, restoring the saved trace */
    for (y = saved_pos_y; y < saved_end_y; y++)  {
   82508:	d0a01f17 	ldw	r2,-32644(gp)
   8250c:	e0bfff15 	stw	r2,-4(fp)
   82510:	00003406 	br	825e4 <restore_trace+0xec>

        /* starting a row - initialize bit position */
	bit_position = 0x80;	/* start at high-order bit in the byte */
   82514:	00802004 	movi	r2,128
   82518:	e0bffc15 	stw	r2,-16(fp)
	bit_offset = 0;		/* first byte of the row */
   8251c:	e03ffd15 	stw	zero,-12(fp)

        for (x = saved_pos_x; x < saved_end_x; x++)  {
   82520:	d0a01e17 	ldw	r2,-32648(gp)
   82524:	e0bffe15 	stw	r2,-8(fp)
   82528:	00002806 	br	825cc <restore_trace+0xd4>

	    /* check if this point is on or off (need to look at bits) */
	    if ((saved_area[y - saved_pos_y][bit_offset] & bit_position) == 0)
   8252c:	d0a01f17 	ldw	r2,-32644(gp)
   82530:	e0ffff17 	ldw	r3,-4(fp)
   82534:	1885c83a 	sub	r2,r3,r2
   82538:	00c004b4 	movhi	r3,18
   8253c:	18c73c84 	addi	r3,r3,7410
   82540:	110003e4 	muli	r4,r2,15
   82544:	e0bffd17 	ldw	r2,-12(fp)
   82548:	2085883a 	add	r2,r4,r2
   8254c:	1885883a 	add	r2,r3,r2
   82550:	10800003 	ldbu	r2,0(r2)
   82554:	10c03fcc 	andi	r3,r2,255
   82558:	e0bffc17 	ldw	r2,-16(fp)
   8255c:	1884703a 	and	r2,r3,r2
   82560:	1000071e 	bne	r2,zero,82580 <restore_trace+0x88>
	        /* saved pixel is off */
		plot_pixel(x, y, PIXEL_WHITE);
   82564:	e0fffe17 	ldw	r3,-8(fp)
   82568:	e0bfff17 	ldw	r2,-4(fp)
   8256c:	1809883a 	mov	r4,r3
   82570:	100b883a 	mov	r5,r2
   82574:	01803fc4 	movi	r6,255
   82578:	0082c800 	call	82c80 <plot_pixel>
   8257c:	00000606 	br	82598 <restore_trace+0xa0>
	    else
	        /* saved pixel is on */
		plot_pixel(x, y, PIXEL_BLACK);
   82580:	e0fffe17 	ldw	r3,-8(fp)
   82584:	e0bfff17 	ldw	r2,-4(fp)
   82588:	1809883a 	mov	r4,r3
   8258c:	100b883a 	mov	r5,r2
   82590:	000d883a 	mov	r6,zero
   82594:	0082c800 	call	82c80 <plot_pixel>

	    /* move to the next bit position */
	    bit_position >>= 1;
   82598:	e0bffc17 	ldw	r2,-16(fp)
   8259c:	1005d07a 	srai	r2,r2,1
   825a0:	e0bffc15 	stw	r2,-16(fp)
	    /* check if moving to next byte */
	    if (bit_position == 0)  {
   825a4:	e0bffc17 	ldw	r2,-16(fp)
   825a8:	1000051e 	bne	r2,zero,825c0 <restore_trace+0xc8>
	        /* now on high bit of next byte */
		bit_position = 0x80;
   825ac:	00802004 	movi	r2,128
   825b0:	e0bffc15 	stw	r2,-16(fp)
		bit_offset++;
   825b4:	e0bffd17 	ldw	r2,-12(fp)
   825b8:	10800044 	addi	r2,r2,1
   825bc:	e0bffd15 	stw	r2,-12(fp)

        /* starting a row - initialize bit position */
	bit_position = 0x80;	/* start at high-order bit in the byte */
	bit_offset = 0;		/* first byte of the row */

        for (x = saved_pos_x; x < saved_end_x; x++)  {
   825c0:	e0bffe17 	ldw	r2,-8(fp)
   825c4:	10800044 	addi	r2,r2,1
   825c8:	e0bffe15 	stw	r2,-8(fp)
   825cc:	d0a02017 	ldw	r2,-32640(gp)
   825d0:	e0fffe17 	ldw	r3,-8(fp)
   825d4:	18bfd516 	blt	r3,r2,8252c <restore_trace+0x34>
    int  y;



    /* loop, restoring the saved trace */
    for (y = saved_pos_y; y < saved_end_y; y++)  {
   825d8:	e0bfff17 	ldw	r2,-4(fp)
   825dc:	10800044 	addi	r2,r2,1
   825e0:	e0bfff15 	stw	r2,-4(fp)
   825e4:	d0a02117 	ldw	r2,-32636(gp)
   825e8:	e0ffff17 	ldw	r3,-4(fp)
   825ec:	18bfc916 	blt	r3,r2,82514 <restore_trace+0x1c>
        }
    }


    /* restored the saved area - return */
    return;
   825f0:	0001883a 	nop

}
   825f4:	e037883a 	mov	sp,fp
   825f8:	dfc00117 	ldw	ra,4(sp)
   825fc:	df000017 	ldw	fp,0(sp)
   82600:	dec00204 	addi	sp,sp,8
   82604:	f800283a 	ret

00082608 <do_trace>:
   Last Modified:    Mar. 13, 1994

*/

void  do_trace()
{
   82608:	defffe04 	addi	sp,sp,-8
   8260c:	dfc00115 	stw	ra,4(sp)
   82610:	df000015 	stw	fp,0(sp)
   82614:	d839883a 	mov	fp,sp



    /* start up the trace */
    /* indicate whether using automatic triggering or not */
    start_sample(get_trigger_mode() == AUTO_TRIGGER);
   82618:	0080dac0 	call	80dac <get_trigger_mode>
   8261c:	10800060 	cmpeqi	r2,r2,1
   82620:	10803fcc 	andi	r2,r2,255
   82624:	1009883a 	mov	r4,r2
   82628:	0081aa00 	call	81aa0 <start_sample>

    /* now not ready for another trace (currently doing one) */
    trace_status = FALSE;
   8262c:	d0201a15 	stw	zero,-32664(gp)

    /* and are currently sampling data */
    sampling = TRUE;
   82630:	00800044 	movi	r2,1
   82634:	d0a01b15 	stw	r2,-32660(gp)


    /* trace is going, return */
    return;
   82638:	0001883a 	nop

}
   8263c:	e037883a 	mov	sp,fp
   82640:	dfc00117 	ldw	ra,4(sp)
   82644:	df000017 	ldw	fp,0(sp)
   82648:	dec00204 	addi	sp,sp,8
   8264c:	f800283a 	ret

00082650 <plot_trace>:
   Last Modified:    May 9, 2006

*/

void  plot_trace(unsigned char *sample)
{
   82650:	defff704 	addi	sp,sp,-36
   82654:	dfc00815 	stw	ra,32(sp)
   82658:	df000715 	stw	fp,28(sp)
   8265c:	df000704 	addi	fp,sp,28
   82660:	e13fff15 	stw	r4,-4(fp)
    /* variables */
    int  x = 0;				/* current x position to plot */
   82664:	e03ff915 	stw	zero,-28(fp)
    int  x_pos = (PLOT_SIZE_X / 2);	/* "fine" x position for multiple point plotting */
   82668:	00803c04 	movi	r2,240
   8266c:	e0bffa15 	stw	r2,-24(fp)
    int  j;



    /* first, clear the display to get rid of old plots */
    clear_display();
   82670:	0082c300 	call	82c30 <clear_display>

    /* clear the saved areas too */
    clear_saved_areas();
   82674:	00821940 	call	82194 <clear_saved_areas>

    /* re-display the menu (if it was on) */
    refresh_menu();
   82678:	00809a00 	call	809a0 <refresh_menu>


    /* plot the sample */
    for (i = 0; i < sample_size; i++)  {
   8267c:	e03ffc15 	stw	zero,-16(fp)
   82680:	0000fb06 	br	82a70 <plot_trace+0x420>

        /* determine y position of point (note: screen coordinates invert) */
	y = (PLOT_SIZE_Y - 1) - ((sample[i] * (PLOT_SIZE_Y - 1)) / 255);
   82684:	e0bffc17 	ldw	r2,-16(fp)
   82688:	e0ffff17 	ldw	r3,-4(fp)
   8268c:	1885883a 	add	r2,r3,r2
   82690:	10800003 	ldbu	r2,0(r2)
   82694:	10803fcc 	andi	r2,r2,255
   82698:	108043e4 	muli	r2,r2,271
   8269c:	1009883a 	mov	r4,r2
   826a0:	01403fc4 	movi	r5,255
   826a4:	0082d140 	call	82d14 <__divsi3>
   826a8:	00c043c4 	movi	r3,271
   826ac:	1885c83a 	sub	r2,r3,r2
   826b0:	e0bffe15 	stw	r2,-8(fp)

        /* plot this point */
	plot_pixel(x, y, PIXEL_BLACK);
   826b4:	e0fff917 	ldw	r3,-28(fp)
   826b8:	e0bffe17 	ldw	r2,-8(fp)
   826bc:	1809883a 	mov	r4,r3
   826c0:	100b883a 	mov	r5,r2
   826c4:	000d883a 	mov	r6,zero
   826c8:	0082c800 	call	82c80 <plot_pixel>


	/* check if the point is in a save area */

	/* check if in the menu area */
	if ((x >= MENU_UL_X) && (x < (MENU_UL_X + MENU_SIZE_X)) &&
   826cc:	e0bff917 	ldw	r2,-28(fp)
   826d0:	10805e90 	cmplti	r2,r2,378
   826d4:	10002b1e 	bne	r2,zero,82784 <plot_trace+0x134>
   826d8:	e0bff917 	ldw	r2,-28(fp)
   826dc:	10807688 	cmpgei	r2,r2,474
   826e0:	1000281e 	bne	r2,zero,82784 <plot_trace+0x134>
   826e4:	e0bffe17 	ldw	r2,-8(fp)
   826e8:	10002616 	blt	r2,zero,82784 <plot_trace+0x134>
	    (y >= MENU_UL_Y) && (y < (MENU_UL_Y + MENU_SIZE_Y)))
   826ec:	e0bffe17 	ldw	r2,-8(fp)
   826f0:	10800e08 	cmpgei	r2,r2,56
   826f4:	1000231e 	bne	r2,zero,82784 <plot_trace+0x134>
	    /* point is in the menu area - save it */
	    saved_menu[y - MENU_UL_Y][(x - MENU_UL_X)/8] |= (0x80 >> ((x - MENU_UL_X) % 8));
   826f8:	e0bff917 	ldw	r2,-28(fp)
   826fc:	10bfa184 	addi	r2,r2,-378
   82700:	1000010e 	bge	r2,zero,82708 <plot_trace+0xb8>
   82704:	108001c4 	addi	r2,r2,7
   82708:	1005d0fa 	srai	r2,r2,3
   8270c:	1007883a 	mov	r3,r2
   82710:	010004b4 	movhi	r4,18
   82714:	21069484 	addi	r4,r4,6738
   82718:	e0bffe17 	ldw	r2,-8(fp)
   8271c:	10800324 	muli	r2,r2,12
   82720:	10c5883a 	add	r2,r2,r3
   82724:	2085883a 	add	r2,r4,r2
   82728:	10800003 	ldbu	r2,0(r2)
   8272c:	1009883a 	mov	r4,r2
   82730:	e0bff917 	ldw	r2,-28(fp)
   82734:	117fa184 	addi	r5,r2,-378
   82738:	00a00034 	movhi	r2,32768
   8273c:	108001c4 	addi	r2,r2,7
   82740:	2884703a 	and	r2,r5,r2
   82744:	1000040e 	bge	r2,zero,82758 <plot_trace+0x108>
   82748:	10bfffc4 	addi	r2,r2,-1
   8274c:	017ffe04 	movi	r5,-8
   82750:	1144b03a 	or	r2,r2,r5
   82754:	10800044 	addi	r2,r2,1
   82758:	01402004 	movi	r5,128
   8275c:	2885d83a 	sra	r2,r5,r2
   82760:	2084b03a 	or	r2,r4,r2
   82764:	1009883a 	mov	r4,r2
   82768:	014004b4 	movhi	r5,18
   8276c:	29469484 	addi	r5,r5,6738
   82770:	e0bffe17 	ldw	r2,-8(fp)
   82774:	10800324 	muli	r2,r2,12
   82778:	10c5883a 	add	r2,r2,r3
   8277c:	2885883a 	add	r2,r5,r2
   82780:	11000005 	stb	r4,0(r2)

	/* check if in the saved area */
	if ((x >= saved_pos_x) && (x <= saved_end_x) && (y >= saved_pos_y) && (y <= saved_end_y))
   82784:	d0a01e17 	ldw	r2,-32648(gp)
   82788:	e0fff917 	ldw	r3,-28(fp)
   8278c:	18803216 	blt	r3,r2,82858 <plot_trace+0x208>
   82790:	d0e02017 	ldw	r3,-32640(gp)
   82794:	e0bff917 	ldw	r2,-28(fp)
   82798:	18802f16 	blt	r3,r2,82858 <plot_trace+0x208>
   8279c:	d0a01f17 	ldw	r2,-32644(gp)
   827a0:	e0fffe17 	ldw	r3,-8(fp)
   827a4:	18802c16 	blt	r3,r2,82858 <plot_trace+0x208>
   827a8:	d0e02117 	ldw	r3,-32636(gp)
   827ac:	e0bffe17 	ldw	r2,-8(fp)
   827b0:	18802916 	blt	r3,r2,82858 <plot_trace+0x208>
	    /* point is in the save area - save it */
	    saved_area[y - saved_pos_y][(x - saved_pos_x)/8] |= (0x80 >> ((x - saved_pos_x) % 8));
   827b4:	d0a01f17 	ldw	r2,-32644(gp)
   827b8:	e0fffe17 	ldw	r3,-8(fp)
   827bc:	188dc83a 	sub	r6,r3,r2
   827c0:	d0a01e17 	ldw	r2,-32648(gp)
   827c4:	e0fff917 	ldw	r3,-28(fp)
   827c8:	1885c83a 	sub	r2,r3,r2
   827cc:	1000010e 	bge	r2,zero,827d4 <plot_trace+0x184>
   827d0:	108001c4 	addi	r2,r2,7
   827d4:	1005d0fa 	srai	r2,r2,3
   827d8:	1007883a 	mov	r3,r2
   827dc:	d0a01f17 	ldw	r2,-32644(gp)
   827e0:	e13ffe17 	ldw	r4,-8(fp)
   827e4:	2085c83a 	sub	r2,r4,r2
   827e8:	010004b4 	movhi	r4,18
   827ec:	21073c84 	addi	r4,r4,7410
   827f0:	108003e4 	muli	r2,r2,15
   827f4:	10c5883a 	add	r2,r2,r3
   827f8:	2085883a 	add	r2,r4,r2
   827fc:	10800003 	ldbu	r2,0(r2)
   82800:	1009883a 	mov	r4,r2
   82804:	d0a01e17 	ldw	r2,-32648(gp)
   82808:	e17ff917 	ldw	r5,-28(fp)
   8280c:	288bc83a 	sub	r5,r5,r2
   82810:	00a00034 	movhi	r2,32768
   82814:	108001c4 	addi	r2,r2,7
   82818:	2884703a 	and	r2,r5,r2
   8281c:	1000040e 	bge	r2,zero,82830 <plot_trace+0x1e0>
   82820:	10bfffc4 	addi	r2,r2,-1
   82824:	017ffe04 	movi	r5,-8
   82828:	1144b03a 	or	r2,r2,r5
   8282c:	10800044 	addi	r2,r2,1
   82830:	01402004 	movi	r5,128
   82834:	2885d83a 	sra	r2,r5,r2
   82838:	2084b03a 	or	r2,r4,r2
   8283c:	1009883a 	mov	r4,r2
   82840:	014004b4 	movhi	r5,18
   82844:	29473c84 	addi	r5,r5,7410
   82848:	308003e4 	muli	r2,r6,15
   8284c:	10c5883a 	add	r2,r2,r3
   82850:	2885883a 	add	r2,r5,r2
   82854:	11000005 	stb	r4,0(r2)

	/* check if on a grid line */
	/* go through all the horizontal lines */
	for (j = -Y_TICK_CNT; j <= Y_TICK_CNT; j++)  {
   82858:	00bfff84 	movi	r2,-2
   8285c:	e0bffd15 	stw	r2,-12(fp)
   82860:	00003506 	br	82938 <plot_trace+0x2e8>

	    /* get y position of the line */
	    p = X_AXIS_POS + j * Y_TICK_SIZE;
   82864:	e0bffd17 	ldw	r2,-12(fp)
   82868:	10800c24 	muli	r2,r2,48
   8286c:	10802204 	addi	r2,r2,136
   82870:	e0bffb15 	stw	r2,-20(fp)
	    /* make sure it is in range */
	    if (p >= PLOT_SIZE_Y)
   82874:	e0bffb17 	ldw	r2,-20(fp)
   82878:	10804410 	cmplti	r2,r2,272
   8287c:	1000021e 	bne	r2,zero,82888 <plot_trace+0x238>
	        p = PLOT_SIZE_Y - 1;
   82880:	008043c4 	movi	r2,271
   82884:	e0bffb15 	stw	r2,-20(fp)
	    if (p < 0)
   82888:	e0bffb17 	ldw	r2,-20(fp)
   8288c:	1000010e 	bge	r2,zero,82894 <plot_trace+0x244>
	        p = 0;
   82890:	e03ffb15 	stw	zero,-20(fp)

	    /* if the point is on this line, save it */
	    if (y == p)
   82894:	e0fffe17 	ldw	r3,-8(fp)
   82898:	e0bffb17 	ldw	r2,-20(fp)
   8289c:	1880231e 	bne	r3,r2,8292c <plot_trace+0x2dc>
		saved_axis_x[j + Y_TICK_CNT][x / 8] |= (0x80 >> (x % 8));
   828a0:	e0bffd17 	ldw	r2,-12(fp)
   828a4:	11800084 	addi	r6,r2,2
   828a8:	e0bff917 	ldw	r2,-28(fp)
   828ac:	1000010e 	bge	r2,zero,828b4 <plot_trace+0x264>
   828b0:	108001c4 	addi	r2,r2,7
   828b4:	1005d0fa 	srai	r2,r2,3
   828b8:	1007883a 	mov	r3,r2
   828bc:	e0bffd17 	ldw	r2,-12(fp)
   828c0:	10800084 	addi	r2,r2,2
   828c4:	010004b4 	movhi	r4,18
   828c8:	2105ec04 	addi	r4,r4,6064
   828cc:	10800f24 	muli	r2,r2,60
   828d0:	10c5883a 	add	r2,r2,r3
   828d4:	2085883a 	add	r2,r4,r2
   828d8:	10800003 	ldbu	r2,0(r2)
   828dc:	1009883a 	mov	r4,r2
   828e0:	e17ff917 	ldw	r5,-28(fp)
   828e4:	00a00034 	movhi	r2,32768
   828e8:	108001c4 	addi	r2,r2,7
   828ec:	2884703a 	and	r2,r5,r2
   828f0:	1000040e 	bge	r2,zero,82904 <plot_trace+0x2b4>
   828f4:	10bfffc4 	addi	r2,r2,-1
   828f8:	017ffe04 	movi	r5,-8
   828fc:	1144b03a 	or	r2,r2,r5
   82900:	10800044 	addi	r2,r2,1
   82904:	01402004 	movi	r5,128
   82908:	2885d83a 	sra	r2,r5,r2
   8290c:	2084b03a 	or	r2,r4,r2
   82910:	1009883a 	mov	r4,r2
   82914:	014004b4 	movhi	r5,18
   82918:	2945ec04 	addi	r5,r5,6064
   8291c:	30800f24 	muli	r2,r6,60
   82920:	10c5883a 	add	r2,r2,r3
   82924:	2885883a 	add	r2,r5,r2
   82928:	11000005 	stb	r4,0(r2)
	    /* point is in the save area - save it */
	    saved_area[y - saved_pos_y][(x - saved_pos_x)/8] |= (0x80 >> ((x - saved_pos_x) % 8));

	/* check if on a grid line */
	/* go through all the horizontal lines */
	for (j = -Y_TICK_CNT; j <= Y_TICK_CNT; j++)  {
   8292c:	e0bffd17 	ldw	r2,-12(fp)
   82930:	10800044 	addi	r2,r2,1
   82934:	e0bffd15 	stw	r2,-12(fp)
   82938:	e0bffd17 	ldw	r2,-12(fp)
   8293c:	108000d0 	cmplti	r2,r2,3
   82940:	103fc81e 	bne	r2,zero,82864 <plot_trace+0x214>
	    if (y == p)
		saved_axis_x[j + Y_TICK_CNT][x / 8] |= (0x80 >> (x % 8));
	}

	/* go through all the vertical lines */
	for (j = -X_TICK_CNT; j <= X_TICK_CNT; j++)  {
   82944:	00bffec4 	movi	r2,-5
   82948:	e0bffd15 	stw	r2,-12(fp)
   8294c:	00003506 	br	82a24 <plot_trace+0x3d4>

	    /* get x position of the line */
	    p = Y_AXIS_POS + j * X_TICK_SIZE;
   82950:	e0bffd17 	ldw	r2,-12(fp)
   82954:	10800c24 	muli	r2,r2,48
   82958:	10803c04 	addi	r2,r2,240
   8295c:	e0bffb15 	stw	r2,-20(fp)
	    /* make sure it is in range */
	    if (p >= PLOT_SIZE_X)
   82960:	e0bffb17 	ldw	r2,-20(fp)
   82964:	10807810 	cmplti	r2,r2,480
   82968:	1000021e 	bne	r2,zero,82974 <plot_trace+0x324>
	        p = PLOT_SIZE_X - 1;
   8296c:	008077c4 	movi	r2,479
   82970:	e0bffb15 	stw	r2,-20(fp)
	    if (p < 0)
   82974:	e0bffb17 	ldw	r2,-20(fp)
   82978:	1000010e 	bge	r2,zero,82980 <plot_trace+0x330>
	        p = 0;
   8297c:	e03ffb15 	stw	zero,-20(fp)

	    /* if the point is on this line, save it */
	    if (x == p)
   82980:	e0fff917 	ldw	r3,-28(fp)
   82984:	e0bffb17 	ldw	r2,-20(fp)
   82988:	1880231e 	bne	r3,r2,82a18 <plot_trace+0x3c8>
		saved_axis_y[j + X_TICK_CNT][y / 8] |= (0x80 >> (y % 8));
   8298c:	e0bffd17 	ldw	r2,-12(fp)
   82990:	11800144 	addi	r6,r2,5
   82994:	e0bffe17 	ldw	r2,-8(fp)
   82998:	1000010e 	bge	r2,zero,829a0 <plot_trace+0x350>
   8299c:	108001c4 	addi	r2,r2,7
   829a0:	1005d0fa 	srai	r2,r2,3
   829a4:	1007883a 	mov	r3,r2
   829a8:	e0bffd17 	ldw	r2,-12(fp)
   829ac:	10800144 	addi	r2,r2,5
   829b0:	010004b4 	movhi	r4,18
   829b4:	21063704 	addi	r4,r4,6364
   829b8:	108008a4 	muli	r2,r2,34
   829bc:	10c5883a 	add	r2,r2,r3
   829c0:	2085883a 	add	r2,r4,r2
   829c4:	10800003 	ldbu	r2,0(r2)
   829c8:	1009883a 	mov	r4,r2
   829cc:	e17ffe17 	ldw	r5,-8(fp)
   829d0:	00a00034 	movhi	r2,32768
   829d4:	108001c4 	addi	r2,r2,7
   829d8:	2884703a 	and	r2,r5,r2
   829dc:	1000040e 	bge	r2,zero,829f0 <plot_trace+0x3a0>
   829e0:	10bfffc4 	addi	r2,r2,-1
   829e4:	017ffe04 	movi	r5,-8
   829e8:	1144b03a 	or	r2,r2,r5
   829ec:	10800044 	addi	r2,r2,1
   829f0:	01402004 	movi	r5,128
   829f4:	2885d83a 	sra	r2,r5,r2
   829f8:	2084b03a 	or	r2,r4,r2
   829fc:	1009883a 	mov	r4,r2
   82a00:	014004b4 	movhi	r5,18
   82a04:	29463704 	addi	r5,r5,6364
   82a08:	308008a4 	muli	r2,r6,34
   82a0c:	10c5883a 	add	r2,r2,r3
   82a10:	2885883a 	add	r2,r5,r2
   82a14:	11000005 	stb	r4,0(r2)
	    if (y == p)
		saved_axis_x[j + Y_TICK_CNT][x / 8] |= (0x80 >> (x % 8));
	}

	/* go through all the vertical lines */
	for (j = -X_TICK_CNT; j <= X_TICK_CNT; j++)  {
   82a18:	e0bffd17 	ldw	r2,-12(fp)
   82a1c:	10800044 	addi	r2,r2,1
   82a20:	e0bffd15 	stw	r2,-12(fp)
   82a24:	e0bffd17 	ldw	r2,-12(fp)
   82a28:	10800190 	cmplti	r2,r2,6
   82a2c:	103fc81e 	bne	r2,zero,82950 <plot_trace+0x300>
		saved_axis_y[j + X_TICK_CNT][y / 8] |= (0x80 >> (y % 8));
	}


	/* update x position */
	x_pos += PLOT_SIZE_X;
   82a30:	e0bffa17 	ldw	r2,-24(fp)
   82a34:	10807804 	addi	r2,r2,480
   82a38:	e0bffa15 	stw	r2,-24(fp)
	/* check if at next horizontal position */
	if (x_pos >= sample_size)  {
   82a3c:	d0a01c17 	ldw	r2,-32656(gp)
   82a40:	e0fffa17 	ldw	r3,-24(fp)
   82a44:	18800716 	blt	r3,r2,82a64 <plot_trace+0x414>
	    /* at next position - update positions */
	    x++;
   82a48:	e0bff917 	ldw	r2,-28(fp)
   82a4c:	10800044 	addi	r2,r2,1
   82a50:	e0bff915 	stw	r2,-28(fp)
	    x_pos -= sample_size;
   82a54:	d0a01c17 	ldw	r2,-32656(gp)
   82a58:	e0fffa17 	ldw	r3,-24(fp)
   82a5c:	1885c83a 	sub	r2,r3,r2
   82a60:	e0bffa15 	stw	r2,-24(fp)
    /* re-display the menu (if it was on) */
    refresh_menu();


    /* plot the sample */
    for (i = 0; i < sample_size; i++)  {
   82a64:	e0bffc17 	ldw	r2,-16(fp)
   82a68:	10800044 	addi	r2,r2,1
   82a6c:	e0bffc15 	stw	r2,-16(fp)
   82a70:	d0a01c17 	ldw	r2,-32656(gp)
   82a74:	e0fffc17 	ldw	r3,-16(fp)
   82a78:	18bf0216 	blt	r3,r2,82684 <plot_trace+0x34>
	}
    }


    /* finally, output the scale if need be */
    set_display_scale(cur_scale);
   82a7c:	d0a01d17 	ldw	r2,-32652(gp)
   82a80:	1009883a 	mov	r4,r2
   82a84:	0081dbc0 	call	81dbc <set_display_scale>


    /* done with plot, return */
    return;
   82a88:	0001883a 	nop

}
   82a8c:	e037883a 	mov	sp,fp
   82a90:	dfc00117 	ldw	ra,4(sp)
   82a94:	df000017 	ldw	fp,0(sp)
   82a98:	dec00204 	addi	sp,sp,8
   82a9c:	f800283a 	ret

00082aa0 <Init_Rot>:
.align 4
.type Init_Rot, @function

Init_Rot:
Set_up_handler:
	movui	r4, ROTARY_ENCODER_IRQ_INTERRUPT_CONTROLLER_ID
   82aa0:	01000014 	movui	r4,0
	movui	r5, ROTARY_ENCODER_IRQ		// move the rotary encoder interrupt
   82aa4:	01400054 	movui	r5,1
   82aa8:	01800234 	movhi	r6,8
										// id and IRQ into registers as arguments
										// to the installer function
	movia	r6, Rot_Handler				// function pointer to event handler is
   82aac:	318ac004 	addi	r6,r6,11008
										// another argument
	mov		r7, zero					// pass a null pointer as isr_context
   82ab0:	000f883a 	mov	r7,zero
										// argument since it is unused
	PUSH	ra							// store return address on stack before
   82ab4:	deffff04 	addi	sp,sp,-4
   82ab8:	dfc00015 	stw	ra,0(sp)
										// calling another function
	PUSH	zero						// store a null pointer for the flags
   82abc:	deffff04 	addi	sp,sp,-4
   82ac0:	d8000015 	stw	zero,0(sp)

00082ac4 <Call_handler_setup>:
										// argument since it is also unnecessary
Call_handler_setup:
	call	alt_ic_isr_register			// install the event handler for the rotary
   82ac4:	00839ec0 	call	839ec <alt_ic_isr_register>
										// encoder interrupt
	bne		r2, zero, Call_handler_setup	// if installing failed, try again
   82ac8:	103ffe1e 	bne	r2,zero,82ac4 <Call_handler_setup>

00082acc <Renable_interrupts>:
Renable_interrupts:
	POP									// remove the argument from the stack
   82acc:	dec00104 	addi	sp,sp,4
	POP_VAL	ra							// restore the return address
   82ad0:	dfc00017 	ldw	ra,0(sp)
   82ad4:	dec00104 	addi	sp,sp,4
   82ad8:	02400534 	movhi	r9,20
	movia	r9, ROTARY_ENCODER_BASE		// get the rotary encoder PIO register address
   82adc:	4a440404 	addi	r9,r9,4112
	ldwio	r8, 8(r9)					// and the value in the interruptmask register
   82ae0:	4a000237 	ldwio	r8,8(r9)
	ori		r8, r8, ENABLE_INT			// enable interrupts and store the enabled
   82ae4:	42000fd4 	ori	r8,r8,63
	stwio	r8, 8(r9)					// value to the interruptmask register
   82ae8:	4a000235 	stwio	r8,8(r9)

	ldwio	r8, 12(r9)					// get the value in the edgecapture register
   82aec:	4a000337 	ldwio	r8,12(r9)
	ori		r8, r8, ENABLE_INT			// clear any pending interrupts and store
   82af0:	42000fd4 	ori	r8,r8,63
	stwio	r8, 12(r9)					// the cleared value into the edgecapture register
   82af4:	4a000335 	stwio	r8,12(r9)

	ret
   82af8:	f800283a 	ret
   82afc:	0001883a 	nop

00082b00 <Rot_Handler>:
   82b00:	02400534 	movhi	r9,20
.global Rot_Handler
.align 4
.type Rot_Handler, @function

Rot_Handler:
	movia	r9, ROTARY_ENCODER_BASE		// Get the address of the PIO register
   82b04:	4a440404 	addi	r9,r9,4112
	ldbuio	r8, 8(r9)					// Retrieve the current value of the
   82b08:	4a000223 	ldbuio	r8,8(r9)
	andi	r8, r8, DISABLE_INT			// interruptmask register and disable interrupts
   82b0c:	423ff00c 	andi	r8,r8,65472
	stbio	r8, 8(r9)					// during the handling routine
   82b10:	4a000225 	stbio	r8,8(r9)

	ldbuio	r8, 12(r9)					// Get the value stored in the edge capture
   82b14:	4a000323 	ldbuio	r8,12(r9)
   82b18:	028004b4 	movhi	r10,18
										// register as the interrupt that is registered
	movia	r10, keyCodeStored			// Get the address of the key code variable
   82b1c:	52800004 	addi	r10,r10,0
	movi	r14, 1
   82b20:	03800044 	movi	r14,1

00082b24 <Check_Validity>:

Check_Validity:
	ldb		r15, 0(r10)					// Load the old key code
   82b24:	53c00007 	ldb	r15,0(r10)
	cmpeqi	r15, r15, KEY_ILLEGAL		// If it is not KEY_ILLEGAL, then the old
   82b28:	7bc001a0 	cmpeqi	r15,r15,6
	bne		r15, r14, Error				// value has not been retrieved so ignore
   82b2c:	7b800b1e 	bne	r15,r14,82b5c <Done_Handler>
										// the current one
	movi	r12, KEY_LEFT				// If the current event is a combination of
   82b30:	03000404 	movi	r12,16
	ori		r12, r12, KEY_RIGHT			// both left and right turns, then it is
   82b34:	63000214 	ori	r12,r12,8
	cmpeq	r12, r8, r12				// an illegal turn and should not be stored
   82b38:	4319003a 	cmpeq	r12,r8,r12
	beq		r12, r14, Error
   82b3c:	63800726 	beq	r12,r14,82b5c <Done_Handler>
	movi	r12, KEY_DOWN				// If the current event is a combination of
   82b40:	03000044 	movi	r12,1
	ori		r12, r12, KEY_UP			// both up and down turns, then it is an
   82b44:	63000094 	ori	r12,r12,2
	cmpeq	r12, r8, r12				// illegal turn and should not be stored
   82b48:	4319003a 	cmpeq	r12,r8,r12
	beq		r12, r14, Error
   82b4c:	63800326 	beq	r12,r14,82b5c <Done_Handler>
	beq		r8, zero, Error				// If the current event has no value, it
   82b50:	40000226 	beq	r8,zero,82b5c <Done_Handler>

00082b54 <Store_Value>:
										// is not stored
Store_Value:
	stb		r8, 0(r10)					// If there is no error in the value
   82b54:	52000005 	stb	r8,0(r10)
	jmpi	Done_Handler				// store it in the shared variable key code
   82b58:	0082b5c1 	jmpi	82b5c <Done_Handler>

00082b5c <Done_Handler>:
Error:
Done_Handler:
	ldbuio	r8, 8(r9)					// Get the current value of the interrupt
   82b5c:	4a000223 	ldbuio	r8,8(r9)
	ori		r8, r8, ENABLE_INT			// mask register and enable interrupts
   82b60:	42000fd4 	ori	r8,r8,63
	stbio	r8, 8(r9)					// due to the rotary encoder PIO
   82b64:	4a000225 	stbio	r8,8(r9)
	movi	r8, ENABLE_INT				// Clear the edge capture register for all
   82b68:	02000fc4 	movi	r8,63
	stwio	r8, 12(r9)					// interrupts in this PIO for any pending
   82b6c:	4a000335 	stwio	r8,12(r9)
										// interrupts
	ret
   82b70:	f800283a 	ret
   82b74:	0001883a 	nop
   82b78:	0001883a 	nop
   82b7c:	0001883a 	nop

00082b80 <key_available>:
   82b80:	020004b4 	movhi	r8,18
.global key_available
.align 4
.type key_available, @function

key_available:
	movia	r8, keyCodeStored		// Retrieves the address of the store key code
   82b84:	42000004 	addi	r8,r8,0
	ldbu	r9, 0(r8)				// and the value
   82b88:	42400003 	ldbu	r9,0(r8)
	cmpeqi	r9, r9, KEY_ILLEGAL		// Check if the key code is key illegal
   82b8c:	4a4001a0 	cmpeqi	r9,r9,6
	bne		r9, zero, illegal_key	// If it is return that key not available
   82b90:	4800021e 	bne	r9,zero,82b9c <illegal_key>

00082b94 <legal_key>:
legal_key:
	movi	r2, 1				// If key code is not illegal, return
   82b94:	00800044 	movi	r2,1
	jmpi	end_key_available		// that key is available
   82b98:	0082ba01 	jmpi	82ba0 <end_key_available>

00082b9c <illegal_key>:
illegal_key:
	movi	r2, 0				// If key code is illegal return that key
   82b9c:	00800004 	movi	r2,0

00082ba0 <end_key_available>:
									// is not available
end_key_available:
	ret
   82ba0:	f800283a 	ret
   82ba4:	0001883a 	nop
   82ba8:	0001883a 	nop
   82bac:	0001883a 	nop

00082bb0 <get_key>:
.global	get_key
.align	4
.type	get_key, @function

get_key:
	PUSH	ra						// store the return address before calling
   82bb0:	deffff04 	addi	sp,sp,-4
   82bb4:	dfc00015 	stw	ra,0(sp)
									// key available
	call	key_available			// Check if there is a key available
   82bb8:	0082b800 	call	82b80 <key_available>
	movi	r8, 0				// If there is a key available
   82bbc:	02000004 	movi	r8,0
	bne		r2, r8, valid_key		// then return that key
   82bc0:	1200011e 	bne	r2,r8,82bc8 <valid_key>
	jmpi	get_key					// Otherwise keep trying until there is a key
   82bc4:	0082bb01 	jmpi	82bb0 <get_key>

00082bc8 <valid_key>:
   82bc8:	020004b4 	movhi	r8,18
valid_key:
	movia	r8, keyCodeStored		// Get the key code actually stored in the
   82bcc:	42000004 	addi	r8,r8,0
	ldbu	r2, 0(r8)				// shared variable
   82bd0:	40800003 	ldbu	r2,0(r8)
	stw		r0, 0(r8)				// Reset the shared variable to an illegal
   82bd4:	40000015 	stw	zero,0(r8)
	movui	r9, KEY_ILLEGAL			// key code byte after clearing out the entire
   82bd8:	02400194 	movui	r9,6
	stb		r9, 0(r8)				// word
   82bdc:	42400005 	stb	r9,0(r8)

	POP_VAL	ra						// restore the return address
   82be0:	dfc00017 	ldw	ra,0(sp)
   82be4:	dec00104 	addi	sp,sp,4
	ret
   82be8:	f800283a 	ret
   82bec:	00000000 	call	0 <__alt_mem_VRAM-0x40000>

00082bf0 <get_addr>:
.align 4
.type get_addr, @function

get_addr:
GetArgs:
	mov		r11, r5
   82bf0:	2817883a 	mov	r11,r5
	mov		r12, r4
   82bf4:	2019883a 	mov	r12,r4
	bne		r12, zero, MoveLeft
   82bf8:	6000031e 	bne	r12,zero,82c08 <MoveLeft>

00082bfc <AdjustFirstCol>:
AdjustFirstCol:
	subi	r11, r11, ROW_FIX
   82bfc:	5affffc4 	addi	r11,r11,-1
	movi	r12, NUM_COLS_DISP
   82c00:	03007804 	movi	r12,480
	jmpi	CalcAddr
   82c04:	0082c0c1 	jmpi	82c0c <CalcAddr>

00082c08 <MoveLeft>:
MoveLeft:
	subi	r12, r12, COL_FIX
   82c08:	633fffc4 	addi	r12,r12,-1

00082c0c <CalcAddr>:
   82c0c:	00800134 	movhi	r2,4
CalcAddr:
	movia	r2, VRAM_BASE
   82c10:	10800004 	addi	r2,r2,0
	muli	r11, r11, NUM_ROWS_VRAM
   82c14:	5ac08024 	muli	r11,r11,512
	add		r2, r2, r11
   82c18:	12c5883a 	add	r2,r2,r11
	add		r2, r2, r12
   82c1c:	1305883a 	add	r2,r2,r12
	ret
   82c20:	f800283a 	ret
   82c24:	0001883a 	nop
   82c28:	0001883a 	nop
   82c2c:	0001883a 	nop

00082c30 <clear_display>:
.align 4
.type clear_display, @function

clear_display:
InitVars:
	mov		r4, zero
   82c30:	0009883a 	mov	r4,zero
	mov 	r5, zero
   82c34:	000b883a 	mov	r5,zero
   82c38:	01800034 	movhi	r6,0
	movia	r6, 0xFF
   82c3c:	31803fc4 	addi	r6,r6,255
	PUSH	ra
   82c40:	deffff04 	addi	sp,sp,-4
   82c44:	dfc00015 	stw	ra,0(sp)

00082c48 <CheckRow>:
CheckRow:
	cmpgei	r10, r4, NUM_ROWS_VRAM
   82c48:	22808008 	cmpgei	r10,r4,512
	bne		r10, zero, EndClear
   82c4c:	5000081e 	bne	r10,zero,82c70 <EndClear>

00082c50 <CheckCol>:
CheckCol:
	cmpgei	r10, r5, NUM_COLS_VRAM
   82c50:	2a808008 	cmpgei	r10,r5,512
	bne		r10, zero, DoneCol
   82c54:	5000031e 	bne	r10,zero,82c64 <DoneCol>

00082c58 <ClearPixel>:
ClearPixel:
	call	plot_pixel
   82c58:	0082c800 	call	82c80 <plot_pixel>
	addi	r5, r5, 1
   82c5c:	29400044 	addi	r5,r5,1
	jmpi	CheckCol
   82c60:	0082c501 	jmpi	82c50 <CheckCol>

00082c64 <DoneCol>:
DoneCol:
	mov		r5, zero
   82c64:	000b883a 	mov	r5,zero
	addi	r4, r4, 1
   82c68:	21000044 	addi	r4,r4,1
	jmpi	CheckRow
   82c6c:	0082c481 	jmpi	82c48 <CheckRow>

00082c70 <EndClear>:
EndClear:
	POP_VAL	ra
   82c70:	dfc00017 	ldw	ra,0(sp)
   82c74:	dec00104 	addi	sp,sp,4
	ret
   82c78:	f800283a 	ret
   82c7c:	0001883a 	nop

00082c80 <plot_pixel>:
.align 4
.type plot_pixel, @function

plot_pixel:
GetAddr:
	PUSH	ra
   82c80:	deffff04 	addi	sp,sp,-4
   82c84:	dfc00015 	stw	ra,0(sp)
	call	get_addr
   82c88:	0082bf00 	call	82bf0 <get_addr>
	stb		r6, 0(r2)
   82c8c:	11800005 	stb	r6,0(r2)
	POP_VAL	ra
   82c90:	dfc00017 	ldw	ra,0(sp)
   82c94:	dec00104 	addi	sp,sp,4
	ret
   82c98:	f800283a 	ret
   82c9c:	00000000 	call	0 <__alt_mem_VRAM-0x40000>

00082ca0 <udivmodsi4>:
   82ca0:	2005883a 	mov	r2,r4
   82ca4:	2900182e 	bgeu	r5,r4,82d08 <udivmodsi4+0x68>
   82ca8:	28001716 	blt	r5,zero,82d08 <udivmodsi4+0x68>
   82cac:	01000804 	movi	r4,32
   82cb0:	00c00044 	movi	r3,1
   82cb4:	00000206 	br	82cc0 <udivmodsi4+0x20>
   82cb8:	20001126 	beq	r4,zero,82d00 <udivmodsi4+0x60>
   82cbc:	28000516 	blt	r5,zero,82cd4 <udivmodsi4+0x34>
   82cc0:	294b883a 	add	r5,r5,r5
   82cc4:	213fffc4 	addi	r4,r4,-1
   82cc8:	18c7883a 	add	r3,r3,r3
   82ccc:	28bffa36 	bltu	r5,r2,82cb8 <udivmodsi4+0x18>
   82cd0:	18000b26 	beq	r3,zero,82d00 <udivmodsi4+0x60>
   82cd4:	0009883a 	mov	r4,zero
   82cd8:	11400236 	bltu	r2,r5,82ce4 <udivmodsi4+0x44>
   82cdc:	1145c83a 	sub	r2,r2,r5
   82ce0:	20c8b03a 	or	r4,r4,r3
   82ce4:	1806d07a 	srli	r3,r3,1
   82ce8:	280ad07a 	srli	r5,r5,1
   82cec:	183ffa1e 	bne	r3,zero,82cd8 <udivmodsi4+0x38>
   82cf0:	3000021e 	bne	r6,zero,82cfc <udivmodsi4+0x5c>
   82cf4:	2005883a 	mov	r2,r4
   82cf8:	f800283a 	ret
   82cfc:	f800283a 	ret
   82d00:	0009883a 	mov	r4,zero
   82d04:	003ffa06 	br	82cf0 <udivmodsi4+0x50>
   82d08:	00c00044 	movi	r3,1
   82d0c:	0009883a 	mov	r4,zero
   82d10:	003ff106 	br	82cd8 <udivmodsi4+0x38>

00082d14 <__divsi3>:
   82d14:	defffe04 	addi	sp,sp,-8
   82d18:	dfc00115 	stw	ra,4(sp)
   82d1c:	dc000015 	stw	r16,0(sp)
   82d20:	20000a16 	blt	r4,zero,82d4c <__divsi3+0x38>
   82d24:	0021883a 	mov	r16,zero
   82d28:	28000b16 	blt	r5,zero,82d58 <__divsi3+0x44>
   82d2c:	000d883a 	mov	r6,zero
   82d30:	0082ca00 	call	82ca0 <udivmodsi4>
   82d34:	80000126 	beq	r16,zero,82d3c <__divsi3+0x28>
   82d38:	0085c83a 	sub	r2,zero,r2
   82d3c:	dfc00117 	ldw	ra,4(sp)
   82d40:	dc000017 	ldw	r16,0(sp)
   82d44:	dec00204 	addi	sp,sp,8
   82d48:	f800283a 	ret
   82d4c:	0109c83a 	sub	r4,zero,r4
   82d50:	04000044 	movi	r16,1
   82d54:	283ff50e 	bge	r5,zero,82d2c <__divsi3+0x18>
   82d58:	014bc83a 	sub	r5,zero,r5
   82d5c:	8400005c 	xori	r16,r16,1
   82d60:	003ff206 	br	82d2c <__divsi3+0x18>

00082d64 <__modsi3>:
   82d64:	deffff04 	addi	sp,sp,-4
   82d68:	dfc00015 	stw	ra,0(sp)
   82d6c:	20000516 	blt	r4,zero,82d84 <__modsi3+0x20>
   82d70:	28000c16 	blt	r5,zero,82da4 <__modsi3+0x40>
   82d74:	01800044 	movi	r6,1
   82d78:	dfc00017 	ldw	ra,0(sp)
   82d7c:	dec00104 	addi	sp,sp,4
   82d80:	0082ca01 	jmpi	82ca0 <udivmodsi4>
   82d84:	0109c83a 	sub	r4,zero,r4
   82d88:	28000b16 	blt	r5,zero,82db8 <__modsi3+0x54>
   82d8c:	01800044 	movi	r6,1
   82d90:	0082ca00 	call	82ca0 <udivmodsi4>
   82d94:	0085c83a 	sub	r2,zero,r2
   82d98:	dfc00017 	ldw	ra,0(sp)
   82d9c:	dec00104 	addi	sp,sp,4
   82da0:	f800283a 	ret
   82da4:	014bc83a 	sub	r5,zero,r5
   82da8:	01800044 	movi	r6,1
   82dac:	dfc00017 	ldw	ra,0(sp)
   82db0:	dec00104 	addi	sp,sp,4
   82db4:	0082ca01 	jmpi	82ca0 <udivmodsi4>
   82db8:	014bc83a 	sub	r5,zero,r5
   82dbc:	003ff306 	br	82d8c <__modsi3+0x28>

00082dc0 <__udivsi3>:
   82dc0:	000d883a 	mov	r6,zero
   82dc4:	0082ca01 	jmpi	82ca0 <udivmodsi4>

00082dc8 <__umodsi3>:
   82dc8:	01800044 	movi	r6,1
   82dcc:	0082ca01 	jmpi	82ca0 <udivmodsi4>

00082dd0 <malloc>:
   82dd0:	008004b4 	movhi	r2,18
   82dd4:	1085c504 	addi	r2,r2,5908
   82dd8:	200b883a 	mov	r5,r4
   82ddc:	11000017 	ldw	r4,0(r2)
   82de0:	0082df81 	jmpi	82df8 <_malloc_r>

00082de4 <free>:
   82de4:	008004b4 	movhi	r2,18
   82de8:	1085c504 	addi	r2,r2,5908
   82dec:	200b883a 	mov	r5,r4
   82df0:	11000017 	ldw	r4,0(r2)
   82df4:	008371c1 	jmpi	8371c <_free_r>

00082df8 <_malloc_r>:
   82df8:	defff604 	addi	sp,sp,-40
   82dfc:	dc800215 	stw	r18,8(sp)
   82e00:	dfc00915 	stw	ra,36(sp)
   82e04:	df000815 	stw	fp,32(sp)
   82e08:	ddc00715 	stw	r23,28(sp)
   82e0c:	dd800615 	stw	r22,24(sp)
   82e10:	dd400515 	stw	r21,20(sp)
   82e14:	dd000415 	stw	r20,16(sp)
   82e18:	dcc00315 	stw	r19,12(sp)
   82e1c:	dc400115 	stw	r17,4(sp)
   82e20:	dc000015 	stw	r16,0(sp)
   82e24:	288002c4 	addi	r2,r5,11
   82e28:	00c00584 	movi	r3,22
   82e2c:	2025883a 	mov	r18,r4
   82e30:	18802b2e 	bgeu	r3,r2,82ee0 <_malloc_r+0xe8>
   82e34:	047ffe04 	movi	r17,-8
   82e38:	1462703a 	and	r17,r2,r17
   82e3c:	88002a16 	blt	r17,zero,82ee8 <_malloc_r+0xf0>
   82e40:	89402936 	bltu	r17,r5,82ee8 <_malloc_r+0xf0>
   82e44:	9009883a 	mov	r4,r18
   82e48:	0083e180 	call	83e18 <__malloc_lock>
   82e4c:	00807dc4 	movi	r2,503
   82e50:	14402936 	bltu	r2,r17,82ef8 <_malloc_r+0x100>
   82e54:	8808d0fa 	srli	r4,r17,3
   82e58:	04c004b4 	movhi	r19,18
   82e5c:	9cc00404 	addi	r19,r19,16
   82e60:	2105883a 	add	r2,r4,r4
   82e64:	1085883a 	add	r2,r2,r2
   82e68:	1085883a 	add	r2,r2,r2
   82e6c:	9885883a 	add	r2,r19,r2
   82e70:	14000317 	ldw	r16,12(r2)
   82e74:	80815526 	beq	r16,r2,833cc <_malloc_r+0x5d4>
   82e78:	81000117 	ldw	r4,4(r16)
   82e7c:	00bfff04 	movi	r2,-4
   82e80:	80c00317 	ldw	r3,12(r16)
   82e84:	2084703a 	and	r2,r4,r2
   82e88:	8085883a 	add	r2,r16,r2
   82e8c:	11800117 	ldw	r6,4(r2)
   82e90:	81400217 	ldw	r5,8(r16)
   82e94:	9009883a 	mov	r4,r18
   82e98:	31800054 	ori	r6,r6,1
   82e9c:	11800115 	stw	r6,4(r2)
   82ea0:	28c00315 	stw	r3,12(r5)
   82ea4:	19400215 	stw	r5,8(r3)
   82ea8:	0083e380 	call	83e38 <__malloc_unlock>
   82eac:	80800204 	addi	r2,r16,8
   82eb0:	dfc00917 	ldw	ra,36(sp)
   82eb4:	df000817 	ldw	fp,32(sp)
   82eb8:	ddc00717 	ldw	r23,28(sp)
   82ebc:	dd800617 	ldw	r22,24(sp)
   82ec0:	dd400517 	ldw	r21,20(sp)
   82ec4:	dd000417 	ldw	r20,16(sp)
   82ec8:	dcc00317 	ldw	r19,12(sp)
   82ecc:	dc800217 	ldw	r18,8(sp)
   82ed0:	dc400117 	ldw	r17,4(sp)
   82ed4:	dc000017 	ldw	r16,0(sp)
   82ed8:	dec00a04 	addi	sp,sp,40
   82edc:	f800283a 	ret
   82ee0:	04400404 	movi	r17,16
   82ee4:	897fd72e 	bgeu	r17,r5,82e44 <_malloc_r+0x4c>
   82ee8:	00800304 	movi	r2,12
   82eec:	90800015 	stw	r2,0(r18)
   82ef0:	0005883a 	mov	r2,zero
   82ef4:	003fee06 	br	82eb0 <_malloc_r+0xb8>
   82ef8:	8808d27a 	srli	r4,r17,9
   82efc:	20007126 	beq	r4,zero,830c4 <_malloc_r+0x2cc>
   82f00:	00800104 	movi	r2,4
   82f04:	1100eb36 	bltu	r2,r4,832b4 <_malloc_r+0x4bc>
   82f08:	8808d1ba 	srli	r4,r17,6
   82f0c:	21000e04 	addi	r4,r4,56
   82f10:	210b883a 	add	r5,r4,r4
   82f14:	294b883a 	add	r5,r5,r5
   82f18:	294b883a 	add	r5,r5,r5
   82f1c:	04c004b4 	movhi	r19,18
   82f20:	9cc00404 	addi	r19,r19,16
   82f24:	994b883a 	add	r5,r19,r5
   82f28:	2c000317 	ldw	r16,12(r5)
   82f2c:	2c000e26 	beq	r5,r16,82f68 <_malloc_r+0x170>
   82f30:	80c00117 	ldw	r3,4(r16)
   82f34:	01ffff04 	movi	r7,-4
   82f38:	018003c4 	movi	r6,15
   82f3c:	19c6703a 	and	r3,r3,r7
   82f40:	1c45c83a 	sub	r2,r3,r17
   82f44:	30800716 	blt	r6,r2,82f64 <_malloc_r+0x16c>
   82f48:	1000610e 	bge	r2,zero,830d0 <_malloc_r+0x2d8>
   82f4c:	84000317 	ldw	r16,12(r16)
   82f50:	2c000526 	beq	r5,r16,82f68 <_malloc_r+0x170>
   82f54:	80c00117 	ldw	r3,4(r16)
   82f58:	19c6703a 	and	r3,r3,r7
   82f5c:	1c45c83a 	sub	r2,r3,r17
   82f60:	30bff90e 	bge	r6,r2,82f48 <_malloc_r+0x150>
   82f64:	213fffc4 	addi	r4,r4,-1
   82f68:	21000044 	addi	r4,r4,1
   82f6c:	9c000417 	ldw	r16,16(r19)
   82f70:	00c004b4 	movhi	r3,18
   82f74:	18c00404 	addi	r3,r3,16
   82f78:	1a400204 	addi	r9,r3,8
   82f7c:	8240ff26 	beq	r16,r9,8337c <_malloc_r+0x584>
   82f80:	81400117 	ldw	r5,4(r16)
   82f84:	00bfff04 	movi	r2,-4
   82f88:	018003c4 	movi	r6,15
   82f8c:	2884703a 	and	r2,r5,r2
   82f90:	144bc83a 	sub	r5,r2,r17
   82f94:	3140ea16 	blt	r6,r5,83340 <_malloc_r+0x548>
   82f98:	1a400515 	stw	r9,20(r3)
   82f9c:	1a400415 	stw	r9,16(r3)
   82fa0:	2800570e 	bge	r5,zero,83100 <_malloc_r+0x308>
   82fa4:	01407fc4 	movi	r5,511
   82fa8:	2880ca36 	bltu	r5,r2,832d4 <_malloc_r+0x4dc>
   82fac:	1004d0fa 	srli	r2,r2,3
   82fb0:	02000044 	movi	r8,1
   82fb4:	19c00117 	ldw	r7,4(r3)
   82fb8:	108b883a 	add	r5,r2,r2
   82fbc:	294b883a 	add	r5,r5,r5
   82fc0:	1005d0ba 	srai	r2,r2,2
   82fc4:	294b883a 	add	r5,r5,r5
   82fc8:	28cb883a 	add	r5,r5,r3
   82fcc:	29800217 	ldw	r6,8(r5)
   82fd0:	4084983a 	sll	r2,r8,r2
   82fd4:	81400315 	stw	r5,12(r16)
   82fd8:	81800215 	stw	r6,8(r16)
   82fdc:	11c4b03a 	or	r2,r2,r7
   82fe0:	18800115 	stw	r2,4(r3)
   82fe4:	2c000215 	stw	r16,8(r5)
   82fe8:	34000315 	stw	r16,12(r6)
   82fec:	200bd0ba 	srai	r5,r4,2
   82ff0:	00c00044 	movi	r3,1
   82ff4:	194a983a 	sll	r5,r3,r5
   82ff8:	11404936 	bltu	r2,r5,83120 <_malloc_r+0x328>
   82ffc:	1146703a 	and	r3,r2,r5
   83000:	18000a1e 	bne	r3,zero,8302c <_malloc_r+0x234>
   83004:	00ffff04 	movi	r3,-4
   83008:	294b883a 	add	r5,r5,r5
   8300c:	20c8703a 	and	r4,r4,r3
   83010:	1146703a 	and	r3,r2,r5
   83014:	21000104 	addi	r4,r4,4
   83018:	1800041e 	bne	r3,zero,8302c <_malloc_r+0x234>
   8301c:	294b883a 	add	r5,r5,r5
   83020:	1146703a 	and	r3,r2,r5
   83024:	21000104 	addi	r4,r4,4
   83028:	183ffc26 	beq	r3,zero,8301c <_malloc_r+0x224>
   8302c:	023fff04 	movi	r8,-4
   83030:	01c003c4 	movi	r7,15
   83034:	2105883a 	add	r2,r4,r4
   83038:	1085883a 	add	r2,r2,r2
   8303c:	1085883a 	add	r2,r2,r2
   83040:	9899883a 	add	r12,r19,r2
   83044:	62800304 	addi	r10,r12,12
   83048:	2017883a 	mov	r11,r4
   8304c:	54000017 	ldw	r16,0(r10)
   83050:	51bffd04 	addi	r6,r10,-12
   83054:	8180041e 	bne	r16,r6,83068 <_malloc_r+0x270>
   83058:	0000ca06 	br	83384 <_malloc_r+0x58c>
   8305c:	10001c0e 	bge	r2,zero,830d0 <_malloc_r+0x2d8>
   83060:	84000317 	ldw	r16,12(r16)
   83064:	8180c726 	beq	r16,r6,83384 <_malloc_r+0x58c>
   83068:	80c00117 	ldw	r3,4(r16)
   8306c:	1a06703a 	and	r3,r3,r8
   83070:	1c45c83a 	sub	r2,r3,r17
   83074:	38bff90e 	bge	r7,r2,8305c <_malloc_r+0x264>
   83078:	81000317 	ldw	r4,12(r16)
   8307c:	81400217 	ldw	r5,8(r16)
   83080:	8447883a 	add	r3,r16,r17
   83084:	8c400054 	ori	r17,r17,1
   83088:	29000315 	stw	r4,12(r5)
   8308c:	21400215 	stw	r5,8(r4)
   83090:	84400115 	stw	r17,4(r16)
   83094:	1889883a 	add	r4,r3,r2
   83098:	11400054 	ori	r5,r2,1
   8309c:	98c00515 	stw	r3,20(r19)
   830a0:	98c00415 	stw	r3,16(r19)
   830a4:	20800015 	stw	r2,0(r4)
   830a8:	1a400315 	stw	r9,12(r3)
   830ac:	1a400215 	stw	r9,8(r3)
   830b0:	19400115 	stw	r5,4(r3)
   830b4:	9009883a 	mov	r4,r18
   830b8:	0083e380 	call	83e38 <__malloc_unlock>
   830bc:	80800204 	addi	r2,r16,8
   830c0:	003f7b06 	br	82eb0 <_malloc_r+0xb8>
   830c4:	8808d0fa 	srli	r4,r17,3
   830c8:	210b883a 	add	r5,r4,r4
   830cc:	003f9106 	br	82f14 <_malloc_r+0x11c>
   830d0:	80c7883a 	add	r3,r16,r3
   830d4:	19400117 	ldw	r5,4(r3)
   830d8:	80800317 	ldw	r2,12(r16)
   830dc:	81000217 	ldw	r4,8(r16)
   830e0:	29400054 	ori	r5,r5,1
   830e4:	19400115 	stw	r5,4(r3)
   830e8:	20800315 	stw	r2,12(r4)
   830ec:	11000215 	stw	r4,8(r2)
   830f0:	9009883a 	mov	r4,r18
   830f4:	0083e380 	call	83e38 <__malloc_unlock>
   830f8:	80800204 	addi	r2,r16,8
   830fc:	003f6c06 	br	82eb0 <_malloc_r+0xb8>
   83100:	8085883a 	add	r2,r16,r2
   83104:	10c00117 	ldw	r3,4(r2)
   83108:	9009883a 	mov	r4,r18
   8310c:	18c00054 	ori	r3,r3,1
   83110:	10c00115 	stw	r3,4(r2)
   83114:	0083e380 	call	83e38 <__malloc_unlock>
   83118:	80800204 	addi	r2,r16,8
   8311c:	003f6406 	br	82eb0 <_malloc_r+0xb8>
   83120:	9c000217 	ldw	r16,8(r19)
   83124:	00bfff04 	movi	r2,-4
   83128:	85400117 	ldw	r21,4(r16)
   8312c:	a8aa703a 	and	r21,r21,r2
   83130:	ac400336 	bltu	r21,r17,83140 <_malloc_r+0x348>
   83134:	ac45c83a 	sub	r2,r21,r17
   83138:	00c003c4 	movi	r3,15
   8313c:	18805316 	blt	r3,r2,8328c <_malloc_r+0x494>
   83140:	d5e02417 	ldw	r23,-32624(gp)
   83144:	d0e00217 	ldw	r3,-32760(gp)
   83148:	00bfffc4 	movi	r2,-1
   8314c:	8579883a 	add	fp,r16,r21
   83150:	8def883a 	add	r23,r17,r23
   83154:	1880d226 	beq	r3,r2,834a0 <_malloc_r+0x6a8>
   83158:	bdc023c4 	addi	r23,r23,143
   8315c:	00bfe004 	movi	r2,-128
   83160:	b8ae703a 	and	r23,r23,r2
   83164:	9009883a 	mov	r4,r18
   83168:	b80b883a 	mov	r5,r23
   8316c:	008357c0 	call	8357c <_sbrk_r>
   83170:	1029883a 	mov	r20,r2
   83174:	00bfffc4 	movi	r2,-1
   83178:	a080d126 	beq	r20,r2,834c0 <_malloc_r+0x6c8>
   8317c:	a7009f36 	bltu	r20,fp,833fc <_malloc_r+0x604>
   83180:	058004b4 	movhi	r22,18
   83184:	b5877904 	addi	r22,r22,7652
   83188:	b0800017 	ldw	r2,0(r22)
   8318c:	b885883a 	add	r2,r23,r2
   83190:	b0800015 	stw	r2,0(r22)
   83194:	e500cf26 	beq	fp,r20,834d4 <_malloc_r+0x6dc>
   83198:	d1200217 	ldw	r4,-32760(gp)
   8319c:	00ffffc4 	movi	r3,-1
   831a0:	20c0e026 	beq	r4,r3,83524 <_malloc_r+0x72c>
   831a4:	a739c83a 	sub	fp,r20,fp
   831a8:	1705883a 	add	r2,r2,fp
   831ac:	b0800015 	stw	r2,0(r22)
   831b0:	a08001cc 	andi	r2,r20,7
   831b4:	1000a526 	beq	r2,zero,8344c <_malloc_r+0x654>
   831b8:	a0a9c83a 	sub	r20,r20,r2
   831bc:	00c02204 	movi	r3,136
   831c0:	a5000204 	addi	r20,r20,8
   831c4:	1885c83a 	sub	r2,r3,r2
   831c8:	a5c7883a 	add	r3,r20,r23
   831cc:	18c01fcc 	andi	r3,r3,127
   831d0:	10efc83a 	sub	r23,r2,r3
   831d4:	9009883a 	mov	r4,r18
   831d8:	b80b883a 	mov	r5,r23
   831dc:	008357c0 	call	8357c <_sbrk_r>
   831e0:	00ffffc4 	movi	r3,-1
   831e4:	10c0cc26 	beq	r2,r3,83518 <_malloc_r+0x720>
   831e8:	1505c83a 	sub	r2,r2,r20
   831ec:	b887883a 	add	r3,r23,r2
   831f0:	18c00054 	ori	r3,r3,1
   831f4:	b0800017 	ldw	r2,0(r22)
   831f8:	9d000215 	stw	r20,8(r19)
   831fc:	a0c00115 	stw	r3,4(r20)
   83200:	b885883a 	add	r2,r23,r2
   83204:	b0800015 	stw	r2,0(r22)
   83208:	84c00e26 	beq	r16,r19,83244 <_malloc_r+0x44c>
   8320c:	00c003c4 	movi	r3,15
   83210:	1d40902e 	bgeu	r3,r21,83454 <_malloc_r+0x65c>
   83214:	ad7ffd04 	addi	r21,r21,-12
   83218:	013ffe04 	movi	r4,-8
   8321c:	a908703a 	and	r4,r21,r4
   83220:	810b883a 	add	r5,r16,r4
   83224:	01800144 	movi	r6,5
   83228:	29800115 	stw	r6,4(r5)
   8322c:	29800215 	stw	r6,8(r5)
   83230:	81400117 	ldw	r5,4(r16)
   83234:	2940004c 	andi	r5,r5,1
   83238:	214ab03a 	or	r5,r4,r5
   8323c:	81400115 	stw	r5,4(r16)
   83240:	1900ae36 	bltu	r3,r4,834fc <_malloc_r+0x704>
   83244:	d0e02317 	ldw	r3,-32628(gp)
   83248:	1880012e 	bgeu	r3,r2,83250 <_malloc_r+0x458>
   8324c:	d0a02315 	stw	r2,-32628(gp)
   83250:	d0e02217 	ldw	r3,-32632(gp)
   83254:	9c000217 	ldw	r16,8(r19)
   83258:	1880012e 	bgeu	r3,r2,83260 <_malloc_r+0x468>
   8325c:	d0a02215 	stw	r2,-32632(gp)
   83260:	80c00117 	ldw	r3,4(r16)
   83264:	00bfff04 	movi	r2,-4
   83268:	1886703a 	and	r3,r3,r2
   8326c:	1c45c83a 	sub	r2,r3,r17
   83270:	1c400236 	bltu	r3,r17,8327c <_malloc_r+0x484>
   83274:	00c003c4 	movi	r3,15
   83278:	18800416 	blt	r3,r2,8328c <_malloc_r+0x494>
   8327c:	9009883a 	mov	r4,r18
   83280:	0083e380 	call	83e38 <__malloc_unlock>
   83284:	0005883a 	mov	r2,zero
   83288:	003f0906 	br	82eb0 <_malloc_r+0xb8>
   8328c:	88c00054 	ori	r3,r17,1
   83290:	10800054 	ori	r2,r2,1
   83294:	80c00115 	stw	r3,4(r16)
   83298:	8463883a 	add	r17,r16,r17
   8329c:	88800115 	stw	r2,4(r17)
   832a0:	9009883a 	mov	r4,r18
   832a4:	9c400215 	stw	r17,8(r19)
   832a8:	0083e380 	call	83e38 <__malloc_unlock>
   832ac:	80800204 	addi	r2,r16,8
   832b0:	003eff06 	br	82eb0 <_malloc_r+0xb8>
   832b4:	00800504 	movi	r2,20
   832b8:	1100492e 	bgeu	r2,r4,833e0 <_malloc_r+0x5e8>
   832bc:	00801504 	movi	r2,84
   832c0:	11005c36 	bltu	r2,r4,83434 <_malloc_r+0x63c>
   832c4:	8808d33a 	srli	r4,r17,12
   832c8:	21001b84 	addi	r4,r4,110
   832cc:	210b883a 	add	r5,r4,r4
   832d0:	003f1006 	br	82f14 <_malloc_r+0x11c>
   832d4:	1006d27a 	srli	r3,r2,9
   832d8:	01400104 	movi	r5,4
   832dc:	28c0432e 	bgeu	r5,r3,833ec <_malloc_r+0x5f4>
   832e0:	01400504 	movi	r5,20
   832e4:	28c07036 	bltu	r5,r3,834a8 <_malloc_r+0x6b0>
   832e8:	194016c4 	addi	r5,r3,91
   832ec:	294d883a 	add	r6,r5,r5
   832f0:	318d883a 	add	r6,r6,r6
   832f4:	318d883a 	add	r6,r6,r6
   832f8:	998d883a 	add	r6,r19,r6
   832fc:	30c00217 	ldw	r3,8(r6)
   83300:	01c004b4 	movhi	r7,18
   83304:	39c00404 	addi	r7,r7,16
   83308:	19805726 	beq	r3,r6,83468 <_malloc_r+0x670>
   8330c:	01ffff04 	movi	r7,-4
   83310:	19400117 	ldw	r5,4(r3)
   83314:	29ca703a 	and	r5,r5,r7
   83318:	1140022e 	bgeu	r2,r5,83324 <_malloc_r+0x52c>
   8331c:	18c00217 	ldw	r3,8(r3)
   83320:	30fffb1e 	bne	r6,r3,83310 <_malloc_r+0x518>
   83324:	19400317 	ldw	r5,12(r3)
   83328:	98800117 	ldw	r2,4(r19)
   8332c:	81400315 	stw	r5,12(r16)
   83330:	80c00215 	stw	r3,8(r16)
   83334:	2c000215 	stw	r16,8(r5)
   83338:	1c000315 	stw	r16,12(r3)
   8333c:	003f2b06 	br	82fec <_malloc_r+0x1f4>
   83340:	8445883a 	add	r2,r16,r17
   83344:	8c400054 	ori	r17,r17,1
   83348:	18800515 	stw	r2,20(r3)
   8334c:	18800415 	stw	r2,16(r3)
   83350:	29000054 	ori	r4,r5,1
   83354:	1147883a 	add	r3,r2,r5
   83358:	84400115 	stw	r17,4(r16)
   8335c:	11000115 	stw	r4,4(r2)
   83360:	12400315 	stw	r9,12(r2)
   83364:	12400215 	stw	r9,8(r2)
   83368:	19400015 	stw	r5,0(r3)
   8336c:	9009883a 	mov	r4,r18
   83370:	0083e380 	call	83e38 <__malloc_unlock>
   83374:	80800204 	addi	r2,r16,8
   83378:	003ecd06 	br	82eb0 <_malloc_r+0xb8>
   8337c:	18800117 	ldw	r2,4(r3)
   83380:	003f1a06 	br	82fec <_malloc_r+0x1f4>
   83384:	5ac00044 	addi	r11,r11,1
   83388:	588000cc 	andi	r2,r11,3
   8338c:	52800204 	addi	r10,r10,8
   83390:	103f2e1e 	bne	r2,zero,8304c <_malloc_r+0x254>
   83394:	20c000cc 	andi	r3,r4,3
   83398:	60bffe04 	addi	r2,r12,-8
   8339c:	18006f26 	beq	r3,zero,8355c <_malloc_r+0x764>
   833a0:	63000017 	ldw	r12,0(r12)
   833a4:	213fffc4 	addi	r4,r4,-1
   833a8:	60bffa26 	beq	r12,r2,83394 <_malloc_r+0x59c>
   833ac:	98800117 	ldw	r2,4(r19)
   833b0:	294b883a 	add	r5,r5,r5
   833b4:	117f5a36 	bltu	r2,r5,83120 <_malloc_r+0x328>
   833b8:	283f5926 	beq	r5,zero,83120 <_malloc_r+0x328>
   833bc:	1146703a 	and	r3,r2,r5
   833c0:	18001626 	beq	r3,zero,8341c <_malloc_r+0x624>
   833c4:	5809883a 	mov	r4,r11
   833c8:	003f1a06 	br	83034 <_malloc_r+0x23c>
   833cc:	80800204 	addi	r2,r16,8
   833d0:	84000517 	ldw	r16,20(r16)
   833d4:	143ea81e 	bne	r2,r16,82e78 <_malloc_r+0x80>
   833d8:	21000084 	addi	r4,r4,2
   833dc:	003ee306 	br	82f6c <_malloc_r+0x174>
   833e0:	210016c4 	addi	r4,r4,91
   833e4:	210b883a 	add	r5,r4,r4
   833e8:	003eca06 	br	82f14 <_malloc_r+0x11c>
   833ec:	100ad1ba 	srli	r5,r2,6
   833f0:	29400e04 	addi	r5,r5,56
   833f4:	294d883a 	add	r6,r5,r5
   833f8:	003fbd06 	br	832f0 <_malloc_r+0x4f8>
   833fc:	84ff6026 	beq	r16,r19,83180 <_malloc_r+0x388>
   83400:	008004b4 	movhi	r2,18
   83404:	10800404 	addi	r2,r2,16
   83408:	14000217 	ldw	r16,8(r2)
   8340c:	00bfff04 	movi	r2,-4
   83410:	80c00117 	ldw	r3,4(r16)
   83414:	1886703a 	and	r3,r3,r2
   83418:	003f9406 	br	8326c <_malloc_r+0x474>
   8341c:	294b883a 	add	r5,r5,r5
   83420:	1146703a 	and	r3,r2,r5
   83424:	5ac00104 	addi	r11,r11,4
   83428:	183ffc26 	beq	r3,zero,8341c <_malloc_r+0x624>
   8342c:	5809883a 	mov	r4,r11
   83430:	003f0006 	br	83034 <_malloc_r+0x23c>
   83434:	00805504 	movi	r2,340
   83438:	11001336 	bltu	r2,r4,83488 <_malloc_r+0x690>
   8343c:	8808d3fa 	srli	r4,r17,15
   83440:	21001dc4 	addi	r4,r4,119
   83444:	210b883a 	add	r5,r4,r4
   83448:	003eb206 	br	82f14 <_malloc_r+0x11c>
   8344c:	00802004 	movi	r2,128
   83450:	003f5d06 	br	831c8 <_malloc_r+0x3d0>
   83454:	00800044 	movi	r2,1
   83458:	a0800115 	stw	r2,4(r20)
   8345c:	a021883a 	mov	r16,r20
   83460:	0007883a 	mov	r3,zero
   83464:	003f8106 	br	8326c <_malloc_r+0x474>
   83468:	280bd0ba 	srai	r5,r5,2
   8346c:	01800044 	movi	r6,1
   83470:	38800117 	ldw	r2,4(r7)
   83474:	314c983a 	sll	r6,r6,r5
   83478:	180b883a 	mov	r5,r3
   8347c:	3084b03a 	or	r2,r6,r2
   83480:	38800115 	stw	r2,4(r7)
   83484:	003fa906 	br	8332c <_malloc_r+0x534>
   83488:	00815504 	movi	r2,1364
   8348c:	11001836 	bltu	r2,r4,834f0 <_malloc_r+0x6f8>
   83490:	8808d4ba 	srli	r4,r17,18
   83494:	21001f04 	addi	r4,r4,124
   83498:	210b883a 	add	r5,r4,r4
   8349c:	003e9d06 	br	82f14 <_malloc_r+0x11c>
   834a0:	bdc00404 	addi	r23,r23,16
   834a4:	003f2f06 	br	83164 <_malloc_r+0x36c>
   834a8:	01401504 	movi	r5,84
   834ac:	28c01f36 	bltu	r5,r3,8352c <_malloc_r+0x734>
   834b0:	100ad33a 	srli	r5,r2,12
   834b4:	29401b84 	addi	r5,r5,110
   834b8:	294d883a 	add	r6,r5,r5
   834bc:	003f8c06 	br	832f0 <_malloc_r+0x4f8>
   834c0:	9c000217 	ldw	r16,8(r19)
   834c4:	00bfff04 	movi	r2,-4
   834c8:	80c00117 	ldw	r3,4(r16)
   834cc:	1886703a 	and	r3,r3,r2
   834d0:	003f6606 	br	8326c <_malloc_r+0x474>
   834d4:	e0c01fcc 	andi	r3,fp,127
   834d8:	183f2f1e 	bne	r3,zero,83198 <_malloc_r+0x3a0>
   834dc:	98c00217 	ldw	r3,8(r19)
   834e0:	bd49883a 	add	r4,r23,r21
   834e4:	21000054 	ori	r4,r4,1
   834e8:	19000115 	stw	r4,4(r3)
   834ec:	003f5506 	br	83244 <_malloc_r+0x44c>
   834f0:	01403f04 	movi	r5,252
   834f4:	01001f84 	movi	r4,126
   834f8:	003e8606 	br	82f14 <_malloc_r+0x11c>
   834fc:	9009883a 	mov	r4,r18
   83500:	81400204 	addi	r5,r16,8
   83504:	008371c0 	call	8371c <_free_r>
   83508:	008004b4 	movhi	r2,18
   8350c:	10877904 	addi	r2,r2,7652
   83510:	10800017 	ldw	r2,0(r2)
   83514:	003f4b06 	br	83244 <_malloc_r+0x44c>
   83518:	00c00044 	movi	r3,1
   8351c:	002f883a 	mov	r23,zero
   83520:	003f3406 	br	831f4 <_malloc_r+0x3fc>
   83524:	d5200215 	stw	r20,-32760(gp)
   83528:	003f2106 	br	831b0 <_malloc_r+0x3b8>
   8352c:	01405504 	movi	r5,340
   83530:	28c00436 	bltu	r5,r3,83544 <_malloc_r+0x74c>
   83534:	100ad3fa 	srli	r5,r2,15
   83538:	29401dc4 	addi	r5,r5,119
   8353c:	294d883a 	add	r6,r5,r5
   83540:	003f6b06 	br	832f0 <_malloc_r+0x4f8>
   83544:	01415504 	movi	r5,1364
   83548:	28c00936 	bltu	r5,r3,83570 <_malloc_r+0x778>
   8354c:	100ad4ba 	srli	r5,r2,18
   83550:	29401f04 	addi	r5,r5,124
   83554:	294d883a 	add	r6,r5,r5
   83558:	003f6506 	br	832f0 <_malloc_r+0x4f8>
   8355c:	98800117 	ldw	r2,4(r19)
   83560:	0146303a 	nor	r3,zero,r5
   83564:	1884703a 	and	r2,r3,r2
   83568:	98800115 	stw	r2,4(r19)
   8356c:	003f9006 	br	833b0 <_malloc_r+0x5b8>
   83570:	01803f04 	movi	r6,252
   83574:	01401f84 	movi	r5,126
   83578:	003f5d06 	br	832f0 <_malloc_r+0x4f8>

0008357c <_sbrk_r>:
   8357c:	defffd04 	addi	sp,sp,-12
   83580:	dc400115 	stw	r17,4(sp)
   83584:	dc000015 	stw	r16,0(sp)
   83588:	2023883a 	mov	r17,r4
   8358c:	040004b4 	movhi	r16,18
   83590:	8405e504 	addi	r16,r16,6036
   83594:	2809883a 	mov	r4,r5
   83598:	dfc00215 	stw	ra,8(sp)
   8359c:	80000015 	stw	zero,0(r16)
   835a0:	0083e580 	call	83e58 <sbrk>
   835a4:	00ffffc4 	movi	r3,-1
   835a8:	10c00526 	beq	r2,r3,835c0 <_sbrk_r+0x44>
   835ac:	dfc00217 	ldw	ra,8(sp)
   835b0:	dc400117 	ldw	r17,4(sp)
   835b4:	dc000017 	ldw	r16,0(sp)
   835b8:	dec00304 	addi	sp,sp,12
   835bc:	f800283a 	ret
   835c0:	80c00017 	ldw	r3,0(r16)
   835c4:	183ff926 	beq	r3,zero,835ac <_sbrk_r+0x30>
   835c8:	88c00015 	stw	r3,0(r17)
   835cc:	dfc00217 	ldw	ra,8(sp)
   835d0:	dc400117 	ldw	r17,4(sp)
   835d4:	dc000017 	ldw	r16,0(sp)
   835d8:	dec00304 	addi	sp,sp,12
   835dc:	f800283a 	ret

000835e0 <_malloc_trim_r>:
   835e0:	defffb04 	addi	sp,sp,-20
   835e4:	dcc00315 	stw	r19,12(sp)
   835e8:	dc800215 	stw	r18,8(sp)
   835ec:	dc400115 	stw	r17,4(sp)
   835f0:	dc000015 	stw	r16,0(sp)
   835f4:	2827883a 	mov	r19,r5
   835f8:	dfc00415 	stw	ra,16(sp)
   835fc:	044004b4 	movhi	r17,18
   83600:	8c400404 	addi	r17,r17,16
   83604:	2021883a 	mov	r16,r4
   83608:	0083e180 	call	83e18 <__malloc_lock>
   8360c:	88800217 	ldw	r2,8(r17)
   83610:	14800117 	ldw	r18,4(r2)
   83614:	00bfff04 	movi	r2,-4
   83618:	90a4703a 	and	r18,r18,r2
   8361c:	90801bc4 	addi	r2,r18,111
   83620:	14e7c83a 	sub	r19,r2,r19
   83624:	9826d1fa 	srli	r19,r19,7
   83628:	00801fc4 	movi	r2,127
   8362c:	9cffffc4 	addi	r19,r19,-1
   83630:	982691fa 	slli	r19,r19,7
   83634:	14c0060e 	bge	r2,r19,83650 <_malloc_trim_r+0x70>
   83638:	8009883a 	mov	r4,r16
   8363c:	000b883a 	mov	r5,zero
   83640:	008357c0 	call	8357c <_sbrk_r>
   83644:	88c00217 	ldw	r3,8(r17)
   83648:	1c87883a 	add	r3,r3,r18
   8364c:	10c00a26 	beq	r2,r3,83678 <_malloc_trim_r+0x98>
   83650:	8009883a 	mov	r4,r16
   83654:	0083e380 	call	83e38 <__malloc_unlock>
   83658:	0005883a 	mov	r2,zero
   8365c:	dfc00417 	ldw	ra,16(sp)
   83660:	dcc00317 	ldw	r19,12(sp)
   83664:	dc800217 	ldw	r18,8(sp)
   83668:	dc400117 	ldw	r17,4(sp)
   8366c:	dc000017 	ldw	r16,0(sp)
   83670:	dec00504 	addi	sp,sp,20
   83674:	f800283a 	ret
   83678:	8009883a 	mov	r4,r16
   8367c:	04cbc83a 	sub	r5,zero,r19
   83680:	008357c0 	call	8357c <_sbrk_r>
   83684:	00ffffc4 	movi	r3,-1
   83688:	10c01326 	beq	r2,r3,836d8 <_malloc_trim_r+0xf8>
   8368c:	008004b4 	movhi	r2,18
   83690:	10877904 	addi	r2,r2,7652
   83694:	11000017 	ldw	r4,0(r2)
   83698:	88c00217 	ldw	r3,8(r17)
   8369c:	94e5c83a 	sub	r18,r18,r19
   836a0:	94800054 	ori	r18,r18,1
   836a4:	24e7c83a 	sub	r19,r4,r19
   836a8:	1c800115 	stw	r18,4(r3)
   836ac:	8009883a 	mov	r4,r16
   836b0:	14c00015 	stw	r19,0(r2)
   836b4:	0083e380 	call	83e38 <__malloc_unlock>
   836b8:	00800044 	movi	r2,1
   836bc:	dfc00417 	ldw	ra,16(sp)
   836c0:	dcc00317 	ldw	r19,12(sp)
   836c4:	dc800217 	ldw	r18,8(sp)
   836c8:	dc400117 	ldw	r17,4(sp)
   836cc:	dc000017 	ldw	r16,0(sp)
   836d0:	dec00504 	addi	sp,sp,20
   836d4:	f800283a 	ret
   836d8:	8009883a 	mov	r4,r16
   836dc:	000b883a 	mov	r5,zero
   836e0:	008357c0 	call	8357c <_sbrk_r>
   836e4:	88c00217 	ldw	r3,8(r17)
   836e8:	014003c4 	movi	r5,15
   836ec:	10c9c83a 	sub	r4,r2,r3
   836f0:	293fd70e 	bge	r5,r4,83650 <_malloc_trim_r+0x70>
   836f4:	014004b4 	movhi	r5,18
   836f8:	2945c204 	addi	r5,r5,5896
   836fc:	29400017 	ldw	r5,0(r5)
   83700:	21000054 	ori	r4,r4,1
   83704:	19000115 	stw	r4,4(r3)
   83708:	1145c83a 	sub	r2,r2,r5
   8370c:	014004b4 	movhi	r5,18
   83710:	29477904 	addi	r5,r5,7652
   83714:	28800015 	stw	r2,0(r5)
   83718:	003fcd06 	br	83650 <_malloc_trim_r+0x70>

0008371c <_free_r>:
   8371c:	defffd04 	addi	sp,sp,-12
   83720:	dc400115 	stw	r17,4(sp)
   83724:	dc000015 	stw	r16,0(sp)
   83728:	dfc00215 	stw	ra,8(sp)
   8372c:	2821883a 	mov	r16,r5
   83730:	2023883a 	mov	r17,r4
   83734:	28004b26 	beq	r5,zero,83864 <_free_r+0x148>
   83738:	0083e180 	call	83e18 <__malloc_lock>
   8373c:	823fff17 	ldw	r8,-4(r16)
   83740:	00bfff84 	movi	r2,-2
   83744:	81bffe04 	addi	r6,r16,-8
   83748:	4084703a 	and	r2,r8,r2
   8374c:	3087883a 	add	r3,r6,r2
   83750:	014004b4 	movhi	r5,18
   83754:	29400404 	addi	r5,r5,16
   83758:	1a400117 	ldw	r9,4(r3)
   8375c:	29000217 	ldw	r4,8(r5)
   83760:	01ffff04 	movi	r7,-4
   83764:	49ce703a 	and	r7,r9,r7
   83768:	20c06526 	beq	r4,r3,83900 <_free_r+0x1e4>
   8376c:	19c00115 	stw	r7,4(r3)
   83770:	4200004c 	andi	r8,r8,1
   83774:	40003026 	beq	r8,zero,83838 <_free_r+0x11c>
   83778:	0009883a 	mov	r4,zero
   8377c:	19d1883a 	add	r8,r3,r7
   83780:	42000117 	ldw	r8,4(r8)
   83784:	4200004c 	andi	r8,r8,1
   83788:	4000061e 	bne	r8,zero,837a4 <_free_r+0x88>
   8378c:	11c5883a 	add	r2,r2,r7
   83790:	19c00217 	ldw	r7,8(r3)
   83794:	20004e26 	beq	r4,zero,838d0 <_free_r+0x1b4>
   83798:	18c00317 	ldw	r3,12(r3)
   8379c:	38c00315 	stw	r3,12(r7)
   837a0:	19c00215 	stw	r7,8(r3)
   837a4:	11c00054 	ori	r7,r2,1
   837a8:	3087883a 	add	r3,r6,r2
   837ac:	31c00115 	stw	r7,4(r6)
   837b0:	18800015 	stw	r2,0(r3)
   837b4:	20001a1e 	bne	r4,zero,83820 <_free_r+0x104>
   837b8:	00c07fc4 	movi	r3,511
   837bc:	18802e2e 	bgeu	r3,r2,83878 <_free_r+0x15c>
   837c0:	1006d27a 	srli	r3,r2,9
   837c4:	01000104 	movi	r4,4
   837c8:	20c06636 	bltu	r4,r3,83964 <_free_r+0x248>
   837cc:	1008d1ba 	srli	r4,r2,6
   837d0:	21000e04 	addi	r4,r4,56
   837d4:	210f883a 	add	r7,r4,r4
   837d8:	39cf883a 	add	r7,r7,r7
   837dc:	39cf883a 	add	r7,r7,r7
   837e0:	29cf883a 	add	r7,r5,r7
   837e4:	38c00217 	ldw	r3,8(r7)
   837e8:	014004b4 	movhi	r5,18
   837ec:	29400404 	addi	r5,r5,16
   837f0:	19c06126 	beq	r3,r7,83978 <_free_r+0x25c>
   837f4:	013fff04 	movi	r4,-4
   837f8:	19400117 	ldw	r5,4(r3)
   837fc:	290a703a 	and	r5,r5,r4
   83800:	1140022e 	bgeu	r2,r5,8380c <_free_r+0xf0>
   83804:	18c00217 	ldw	r3,8(r3)
   83808:	38fffb1e 	bne	r7,r3,837f8 <_free_r+0xdc>
   8380c:	18800317 	ldw	r2,12(r3)
   83810:	30800315 	stw	r2,12(r6)
   83814:	30c00215 	stw	r3,8(r6)
   83818:	11800215 	stw	r6,8(r2)
   8381c:	19800315 	stw	r6,12(r3)
   83820:	8809883a 	mov	r4,r17
   83824:	dfc00217 	ldw	ra,8(sp)
   83828:	dc400117 	ldw	r17,4(sp)
   8382c:	dc000017 	ldw	r16,0(sp)
   83830:	dec00304 	addi	sp,sp,12
   83834:	0083e381 	jmpi	83e38 <__malloc_unlock>
   83838:	813ffe17 	ldw	r4,-8(r16)
   8383c:	2a400204 	addi	r9,r5,8
   83840:	310dc83a 	sub	r6,r6,r4
   83844:	32000217 	ldw	r8,8(r6)
   83848:	1105883a 	add	r2,r2,r4
   8384c:	42404326 	beq	r8,r9,8395c <_free_r+0x240>
   83850:	32400317 	ldw	r9,12(r6)
   83854:	0009883a 	mov	r4,zero
   83858:	42400315 	stw	r9,12(r8)
   8385c:	4a000215 	stw	r8,8(r9)
   83860:	003fc606 	br	8377c <_free_r+0x60>
   83864:	dfc00217 	ldw	ra,8(sp)
   83868:	dc400117 	ldw	r17,4(sp)
   8386c:	dc000017 	ldw	r16,0(sp)
   83870:	dec00304 	addi	sp,sp,12
   83874:	f800283a 	ret
   83878:	1004d0fa 	srli	r2,r2,3
   8387c:	02000044 	movi	r8,1
   83880:	29c00117 	ldw	r7,4(r5)
   83884:	1087883a 	add	r3,r2,r2
   83888:	18c7883a 	add	r3,r3,r3
   8388c:	1005d0ba 	srai	r2,r2,2
   83890:	18c7883a 	add	r3,r3,r3
   83894:	28c7883a 	add	r3,r5,r3
   83898:	19000217 	ldw	r4,8(r3)
   8389c:	4084983a 	sll	r2,r8,r2
   838a0:	30c00315 	stw	r3,12(r6)
   838a4:	31000215 	stw	r4,8(r6)
   838a8:	11c4b03a 	or	r2,r2,r7
   838ac:	21800315 	stw	r6,12(r4)
   838b0:	8809883a 	mov	r4,r17
   838b4:	28800115 	stw	r2,4(r5)
   838b8:	19800215 	stw	r6,8(r3)
   838bc:	dfc00217 	ldw	ra,8(sp)
   838c0:	dc400117 	ldw	r17,4(sp)
   838c4:	dc000017 	ldw	r16,0(sp)
   838c8:	dec00304 	addi	sp,sp,12
   838cc:	0083e381 	jmpi	83e38 <__malloc_unlock>
   838d0:	020004b4 	movhi	r8,18
   838d4:	42000604 	addi	r8,r8,24
   838d8:	3a3faf1e 	bne	r7,r8,83798 <_free_r+0x7c>
   838dc:	29800515 	stw	r6,20(r5)
   838e0:	29800415 	stw	r6,16(r5)
   838e4:	11000054 	ori	r4,r2,1
   838e8:	3087883a 	add	r3,r6,r2
   838ec:	31c00315 	stw	r7,12(r6)
   838f0:	31c00215 	stw	r7,8(r6)
   838f4:	31000115 	stw	r4,4(r6)
   838f8:	18800015 	stw	r2,0(r3)
   838fc:	003fc806 	br	83820 <_free_r+0x104>
   83900:	4200004c 	andi	r8,r8,1
   83904:	3885883a 	add	r2,r7,r2
   83908:	4000071e 	bne	r8,zero,83928 <_free_r+0x20c>
   8390c:	81fffe17 	ldw	r7,-8(r16)
   83910:	31cdc83a 	sub	r6,r6,r7
   83914:	30c00317 	ldw	r3,12(r6)
   83918:	31000217 	ldw	r4,8(r6)
   8391c:	11c5883a 	add	r2,r2,r7
   83920:	20c00315 	stw	r3,12(r4)
   83924:	19000215 	stw	r4,8(r3)
   83928:	00c004b4 	movhi	r3,18
   8392c:	18c5c304 	addi	r3,r3,5900
   83930:	18c00017 	ldw	r3,0(r3)
   83934:	11000054 	ori	r4,r2,1
   83938:	31000115 	stw	r4,4(r6)
   8393c:	29800215 	stw	r6,8(r5)
   83940:	10ffb736 	bltu	r2,r3,83820 <_free_r+0x104>
   83944:	008004b4 	movhi	r2,18
   83948:	1085e404 	addi	r2,r2,6032
   8394c:	11400017 	ldw	r5,0(r2)
   83950:	8809883a 	mov	r4,r17
   83954:	00835e00 	call	835e0 <_malloc_trim_r>
   83958:	003fb106 	br	83820 <_free_r+0x104>
   8395c:	01000044 	movi	r4,1
   83960:	003f8606 	br	8377c <_free_r+0x60>
   83964:	01000504 	movi	r4,20
   83968:	20c00b36 	bltu	r4,r3,83998 <_free_r+0x27c>
   8396c:	190016c4 	addi	r4,r3,91
   83970:	210f883a 	add	r7,r4,r4
   83974:	003f9806 	br	837d8 <_free_r+0xbc>
   83978:	2009d0ba 	srai	r4,r4,2
   8397c:	00800044 	movi	r2,1
   83980:	29c00117 	ldw	r7,4(r5)
   83984:	1108983a 	sll	r4,r2,r4
   83988:	1805883a 	mov	r2,r3
   8398c:	21c8b03a 	or	r4,r4,r7
   83990:	29000115 	stw	r4,4(r5)
   83994:	003f9e06 	br	83810 <_free_r+0xf4>
   83998:	01001504 	movi	r4,84
   8399c:	20c00436 	bltu	r4,r3,839b0 <_free_r+0x294>
   839a0:	1008d33a 	srli	r4,r2,12
   839a4:	21001b84 	addi	r4,r4,110
   839a8:	210f883a 	add	r7,r4,r4
   839ac:	003f8a06 	br	837d8 <_free_r+0xbc>
   839b0:	01005504 	movi	r4,340
   839b4:	20c00436 	bltu	r4,r3,839c8 <_free_r+0x2ac>
   839b8:	1008d3fa 	srli	r4,r2,15
   839bc:	21001dc4 	addi	r4,r4,119
   839c0:	210f883a 	add	r7,r4,r4
   839c4:	003f8406 	br	837d8 <_free_r+0xbc>
   839c8:	01015504 	movi	r4,1364
   839cc:	20c00436 	bltu	r4,r3,839e0 <_free_r+0x2c4>
   839d0:	1008d4ba 	srli	r4,r2,18
   839d4:	21001f04 	addi	r4,r4,124
   839d8:	210f883a 	add	r7,r4,r4
   839dc:	003f7e06 	br	837d8 <_free_r+0xbc>
   839e0:	01c03f04 	movi	r7,252
   839e4:	01001f84 	movi	r4,126
   839e8:	003f7b06 	br	837d8 <_free_r+0xbc>

000839ec <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   839ec:	defff904 	addi	sp,sp,-28
   839f0:	dfc00615 	stw	ra,24(sp)
   839f4:	df000515 	stw	fp,20(sp)
   839f8:	df000504 	addi	fp,sp,20
   839fc:	e13ffc15 	stw	r4,-16(fp)
   83a00:	e17ffd15 	stw	r5,-12(fp)
   83a04:	e1bffe15 	stw	r6,-8(fp)
   83a08:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   83a0c:	e0800217 	ldw	r2,8(fp)
   83a10:	d8800015 	stw	r2,0(sp)
   83a14:	e13ffc17 	ldw	r4,-16(fp)
   83a18:	e17ffd17 	ldw	r5,-12(fp)
   83a1c:	e1bffe17 	ldw	r6,-8(fp)
   83a20:	e1ffff17 	ldw	r7,-4(fp)
   83a24:	0083bc40 	call	83bc4 <alt_iic_isr_register>
}  
   83a28:	e037883a 	mov	sp,fp
   83a2c:	dfc00117 	ldw	ra,4(sp)
   83a30:	df000017 	ldw	fp,0(sp)
   83a34:	dec00204 	addi	sp,sp,8
   83a38:	f800283a 	ret

00083a3c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   83a3c:	defff904 	addi	sp,sp,-28
   83a40:	df000615 	stw	fp,24(sp)
   83a44:	df000604 	addi	fp,sp,24
   83a48:	e13ffe15 	stw	r4,-8(fp)
   83a4c:	e17fff15 	stw	r5,-4(fp)
   83a50:	e0bfff17 	ldw	r2,-4(fp)
   83a54:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83a58:	0005303a 	rdctl	r2,status
   83a5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83a60:	e0fffb17 	ldw	r3,-20(fp)
   83a64:	00bfff84 	movi	r2,-2
   83a68:	1884703a 	and	r2,r3,r2
   83a6c:	1001703a 	wrctl	status,r2
  
  return context;
   83a70:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   83a74:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   83a78:	e0bffa17 	ldw	r2,-24(fp)
   83a7c:	00c00044 	movi	r3,1
   83a80:	1884983a 	sll	r2,r3,r2
   83a84:	1007883a 	mov	r3,r2
   83a88:	008004b4 	movhi	r2,18
   83a8c:	1085e604 	addi	r2,r2,6040
   83a90:	10800017 	ldw	r2,0(r2)
   83a94:	1886b03a 	or	r3,r3,r2
   83a98:	008004b4 	movhi	r2,18
   83a9c:	1085e604 	addi	r2,r2,6040
   83aa0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   83aa4:	008004b4 	movhi	r2,18
   83aa8:	1085e604 	addi	r2,r2,6040
   83aac:	10800017 	ldw	r2,0(r2)
   83ab0:	100170fa 	wrctl	ienable,r2
   83ab4:	e0bffc17 	ldw	r2,-16(fp)
   83ab8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   83abc:	e0bffd17 	ldw	r2,-12(fp)
   83ac0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   83ac4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   83ac8:	e037883a 	mov	sp,fp
   83acc:	df000017 	ldw	fp,0(sp)
   83ad0:	dec00104 	addi	sp,sp,4
   83ad4:	f800283a 	ret

00083ad8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   83ad8:	defff904 	addi	sp,sp,-28
   83adc:	df000615 	stw	fp,24(sp)
   83ae0:	df000604 	addi	fp,sp,24
   83ae4:	e13ffe15 	stw	r4,-8(fp)
   83ae8:	e17fff15 	stw	r5,-4(fp)
   83aec:	e0bfff17 	ldw	r2,-4(fp)
   83af0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83af4:	0005303a 	rdctl	r2,status
   83af8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83afc:	e0fffb17 	ldw	r3,-20(fp)
   83b00:	00bfff84 	movi	r2,-2
   83b04:	1884703a 	and	r2,r3,r2
   83b08:	1001703a 	wrctl	status,r2
  
  return context;
   83b0c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   83b10:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   83b14:	e0bffa17 	ldw	r2,-24(fp)
   83b18:	00c00044 	movi	r3,1
   83b1c:	1884983a 	sll	r2,r3,r2
   83b20:	0084303a 	nor	r2,zero,r2
   83b24:	1007883a 	mov	r3,r2
   83b28:	008004b4 	movhi	r2,18
   83b2c:	1085e604 	addi	r2,r2,6040
   83b30:	10800017 	ldw	r2,0(r2)
   83b34:	1886703a 	and	r3,r3,r2
   83b38:	008004b4 	movhi	r2,18
   83b3c:	1085e604 	addi	r2,r2,6040
   83b40:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   83b44:	008004b4 	movhi	r2,18
   83b48:	1085e604 	addi	r2,r2,6040
   83b4c:	10800017 	ldw	r2,0(r2)
   83b50:	100170fa 	wrctl	ienable,r2
   83b54:	e0bffc17 	ldw	r2,-16(fp)
   83b58:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   83b5c:	e0bffd17 	ldw	r2,-12(fp)
   83b60:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   83b64:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   83b68:	e037883a 	mov	sp,fp
   83b6c:	df000017 	ldw	fp,0(sp)
   83b70:	dec00104 	addi	sp,sp,4
   83b74:	f800283a 	ret

00083b78 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   83b78:	defffc04 	addi	sp,sp,-16
   83b7c:	df000315 	stw	fp,12(sp)
   83b80:	df000304 	addi	fp,sp,12
   83b84:	e13ffe15 	stw	r4,-8(fp)
   83b88:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   83b8c:	000530fa 	rdctl	r2,ienable
   83b90:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   83b94:	e0bfff17 	ldw	r2,-4(fp)
   83b98:	00c00044 	movi	r3,1
   83b9c:	1884983a 	sll	r2,r3,r2
   83ba0:	1007883a 	mov	r3,r2
   83ba4:	e0bffd17 	ldw	r2,-12(fp)
   83ba8:	1884703a 	and	r2,r3,r2
   83bac:	1004c03a 	cmpne	r2,r2,zero
   83bb0:	10803fcc 	andi	r2,r2,255
}
   83bb4:	e037883a 	mov	sp,fp
   83bb8:	df000017 	ldw	fp,0(sp)
   83bbc:	dec00104 	addi	sp,sp,4
   83bc0:	f800283a 	ret

00083bc4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   83bc4:	defff504 	addi	sp,sp,-44
   83bc8:	dfc00a15 	stw	ra,40(sp)
   83bcc:	df000915 	stw	fp,36(sp)
   83bd0:	df000904 	addi	fp,sp,36
   83bd4:	e13ffc15 	stw	r4,-16(fp)
   83bd8:	e17ffd15 	stw	r5,-12(fp)
   83bdc:	e1bffe15 	stw	r6,-8(fp)
   83be0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   83be4:	00bffa84 	movi	r2,-22
   83be8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   83bec:	e0bffd17 	ldw	r2,-12(fp)
   83bf0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   83bf4:	e0bff817 	ldw	r2,-32(fp)
   83bf8:	10800808 	cmpgei	r2,r2,32
   83bfc:	1000271e 	bne	r2,zero,83c9c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83c00:	0005303a 	rdctl	r2,status
   83c04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83c08:	e0fffa17 	ldw	r3,-24(fp)
   83c0c:	00bfff84 	movi	r2,-2
   83c10:	1884703a 	and	r2,r3,r2
   83c14:	1001703a 	wrctl	status,r2
  
  return context;
   83c18:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   83c1c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   83c20:	00c004b4 	movhi	r3,18
   83c24:	18c78304 	addi	r3,r3,7692
   83c28:	e0bff817 	ldw	r2,-32(fp)
   83c2c:	100490fa 	slli	r2,r2,3
   83c30:	1885883a 	add	r2,r3,r2
   83c34:	e0fffe17 	ldw	r3,-8(fp)
   83c38:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   83c3c:	00c004b4 	movhi	r3,18
   83c40:	18c78304 	addi	r3,r3,7692
   83c44:	e0bff817 	ldw	r2,-32(fp)
   83c48:	100490fa 	slli	r2,r2,3
   83c4c:	1885883a 	add	r2,r3,r2
   83c50:	10800104 	addi	r2,r2,4
   83c54:	e0ffff17 	ldw	r3,-4(fp)
   83c58:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   83c5c:	e0bffe17 	ldw	r2,-8(fp)
   83c60:	10000526 	beq	r2,zero,83c78 <alt_iic_isr_register+0xb4>
   83c64:	e0bff817 	ldw	r2,-32(fp)
   83c68:	e13ffc17 	ldw	r4,-16(fp)
   83c6c:	100b883a 	mov	r5,r2
   83c70:	0083a3c0 	call	83a3c <alt_ic_irq_enable>
   83c74:	00000406 	br	83c88 <alt_iic_isr_register+0xc4>
   83c78:	e0bff817 	ldw	r2,-32(fp)
   83c7c:	e13ffc17 	ldw	r4,-16(fp)
   83c80:	100b883a 	mov	r5,r2
   83c84:	0083ad80 	call	83ad8 <alt_ic_irq_disable>
   83c88:	e0bff715 	stw	r2,-36(fp)
   83c8c:	e0bff917 	ldw	r2,-28(fp)
   83c90:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   83c94:	e0bffb17 	ldw	r2,-20(fp)
   83c98:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   83c9c:	e0bff717 	ldw	r2,-36(fp)
}
   83ca0:	e037883a 	mov	sp,fp
   83ca4:	dfc00117 	ldw	ra,4(sp)
   83ca8:	df000017 	ldw	fp,0(sp)
   83cac:	dec00204 	addi	sp,sp,8
   83cb0:	f800283a 	ret

00083cb4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   83cb4:	defffc04 	addi	sp,sp,-16
   83cb8:	df000315 	stw	fp,12(sp)
   83cbc:	df000304 	addi	fp,sp,12
   83cc0:	e13ffd15 	stw	r4,-12(fp)
   83cc4:	e17ffe15 	stw	r5,-8(fp)
   83cc8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   83ccc:	e0fffe17 	ldw	r3,-8(fp)
   83cd0:	e0bffd17 	ldw	r2,-12(fp)
   83cd4:	18800e26 	beq	r3,r2,83d10 <alt_load_section+0x5c>
  {
    while( to != end )
   83cd8:	00000a06 	br	83d04 <alt_load_section+0x50>
    {
      *to++ = *from++;
   83cdc:	e0bffd17 	ldw	r2,-12(fp)
   83ce0:	10c00017 	ldw	r3,0(r2)
   83ce4:	e0bffe17 	ldw	r2,-8(fp)
   83ce8:	10c00015 	stw	r3,0(r2)
   83cec:	e0bffe17 	ldw	r2,-8(fp)
   83cf0:	10800104 	addi	r2,r2,4
   83cf4:	e0bffe15 	stw	r2,-8(fp)
   83cf8:	e0bffd17 	ldw	r2,-12(fp)
   83cfc:	10800104 	addi	r2,r2,4
   83d00:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   83d04:	e0fffe17 	ldw	r3,-8(fp)
   83d08:	e0bfff17 	ldw	r2,-4(fp)
   83d0c:	18bff31e 	bne	r3,r2,83cdc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   83d10:	e037883a 	mov	sp,fp
   83d14:	df000017 	ldw	fp,0(sp)
   83d18:	dec00104 	addi	sp,sp,4
   83d1c:	f800283a 	ret

00083d20 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   83d20:	defffe04 	addi	sp,sp,-8
   83d24:	dfc00115 	stw	ra,4(sp)
   83d28:	df000015 	stw	fp,0(sp)
   83d2c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   83d30:	01000234 	movhi	r4,8
   83d34:	21190204 	addi	r4,r4,25608
   83d38:	014004b4 	movhi	r5,18
   83d3c:	29400004 	addi	r5,r5,0
   83d40:	018004b4 	movhi	r6,18
   83d44:	3185d004 	addi	r6,r6,5952
   83d48:	0083cb40 	call	83cb4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   83d4c:	01000234 	movhi	r4,8
   83d50:	21000804 	addi	r4,r4,32
   83d54:	01400234 	movhi	r5,8
   83d58:	29400804 	addi	r5,r5,32
   83d5c:	01800234 	movhi	r6,8
   83d60:	31806e04 	addi	r6,r6,440
   83d64:	0083cb40 	call	83cb4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   83d68:	01000234 	movhi	r4,8
   83d6c:	2116f304 	addi	r4,r4,23500
   83d70:	01400234 	movhi	r5,8
   83d74:	2956f304 	addi	r5,r5,23500
   83d78:	01800234 	movhi	r6,8
   83d7c:	31990204 	addi	r6,r6,25608
   83d80:	0083cb40 	call	83cb4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   83d84:	0084c740 	call	84c74 <alt_dcache_flush_all>
  alt_icache_flush_all();
   83d88:	0084e8c0 	call	84e8c <alt_icache_flush_all>
}
   83d8c:	e037883a 	mov	sp,fp
   83d90:	dfc00117 	ldw	ra,4(sp)
   83d94:	df000017 	ldw	fp,0(sp)
   83d98:	dec00204 	addi	sp,sp,8
   83d9c:	f800283a 	ret

00083da0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   83da0:	defffd04 	addi	sp,sp,-12
   83da4:	dfc00215 	stw	ra,8(sp)
   83da8:	df000115 	stw	fp,4(sp)
   83dac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   83db0:	0009883a 	mov	r4,zero
   83db4:	0083f400 	call	83f40 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   83db8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   83dbc:	0083f740 	call	83f74 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   83dc0:	01000234 	movhi	r4,8
   83dc4:	2118f504 	addi	r4,r4,25556
   83dc8:	01400234 	movhi	r5,8
   83dcc:	2958f504 	addi	r5,r5,25556
   83dd0:	01800234 	movhi	r6,8
   83dd4:	3198f504 	addi	r6,r6,25556
   83dd8:	0084f7c0 	call	84f7c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   83ddc:	0084dd40 	call	84dd4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   83de0:	01000234 	movhi	r4,8
   83de4:	21138c04 	addi	r4,r4,20016
   83de8:	00857640 	call	85764 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   83dec:	d1202717 	ldw	r4,-32612(gp)
   83df0:	d0e02817 	ldw	r3,-32608(gp)
   83df4:	d0a02917 	ldw	r2,-32604(gp)
   83df8:	180b883a 	mov	r5,r3
   83dfc:	100d883a 	mov	r6,r2
   83e00:	00807400 	call	80740 <main>
   83e04:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   83e08:	01000044 	movi	r4,1
   83e0c:	0084bac0 	call	84bac <close>
  exit (result);
   83e10:	e13fff17 	ldw	r4,-4(fp)
   83e14:	00857780 	call	85778 <exit>

00083e18 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   83e18:	defffe04 	addi	sp,sp,-8
   83e1c:	df000115 	stw	fp,4(sp)
   83e20:	df000104 	addi	fp,sp,4
   83e24:	e13fff15 	stw	r4,-4(fp)
}
   83e28:	e037883a 	mov	sp,fp
   83e2c:	df000017 	ldw	fp,0(sp)
   83e30:	dec00104 	addi	sp,sp,4
   83e34:	f800283a 	ret

00083e38 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   83e38:	defffe04 	addi	sp,sp,-8
   83e3c:	df000115 	stw	fp,4(sp)
   83e40:	df000104 	addi	fp,sp,4
   83e44:	e13fff15 	stw	r4,-4(fp)
}
   83e48:	e037883a 	mov	sp,fp
   83e4c:	df000017 	ldw	fp,0(sp)
   83e50:	dec00104 	addi	sp,sp,4
   83e54:	f800283a 	ret

00083e58 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   83e58:	defff904 	addi	sp,sp,-28
   83e5c:	df000615 	stw	fp,24(sp)
   83e60:	df000604 	addi	fp,sp,24
   83e64:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83e68:	0005303a 	rdctl	r2,status
   83e6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83e70:	e0fffc17 	ldw	r3,-16(fp)
   83e74:	00bfff84 	movi	r2,-2
   83e78:	1884703a 	and	r2,r3,r2
   83e7c:	1001703a 	wrctl	status,r2
  
  return context;
   83e80:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   83e84:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   83e88:	d0a00717 	ldw	r2,-32740(gp)
   83e8c:	10c000c4 	addi	r3,r2,3
   83e90:	00bfff04 	movi	r2,-4
   83e94:	1884703a 	and	r2,r3,r2
   83e98:	d0a00715 	stw	r2,-32740(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   83e9c:	d0e00717 	ldw	r3,-32740(gp)
   83ea0:	e0bfff17 	ldw	r2,-4(fp)
   83ea4:	1885883a 	add	r2,r3,r2
   83ea8:	00c00534 	movhi	r3,20
   83eac:	18c00004 	addi	r3,r3,0
   83eb0:	1880062e 	bgeu	r3,r2,83ecc <sbrk+0x74>
   83eb4:	e0bffa17 	ldw	r2,-24(fp)
   83eb8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   83ebc:	e0bffd17 	ldw	r2,-12(fp)
   83ec0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   83ec4:	00bfffc4 	movi	r2,-1
   83ec8:	00000b06 	br	83ef8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   83ecc:	d0a00717 	ldw	r2,-32740(gp)
   83ed0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   83ed4:	d0e00717 	ldw	r3,-32740(gp)
   83ed8:	e0bfff17 	ldw	r2,-4(fp)
   83edc:	1885883a 	add	r2,r3,r2
   83ee0:	d0a00715 	stw	r2,-32740(gp)
   83ee4:	e0bffa17 	ldw	r2,-24(fp)
   83ee8:	e0bffe15 	stw	r2,-8(fp)
   83eec:	e0bffe17 	ldw	r2,-8(fp)
   83ef0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   83ef4:	e0bffb17 	ldw	r2,-20(fp)
} 
   83ef8:	e037883a 	mov	sp,fp
   83efc:	df000017 	ldw	fp,0(sp)
   83f00:	dec00104 	addi	sp,sp,4
   83f04:	f800283a 	ret

00083f08 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   83f08:	defffd04 	addi	sp,sp,-12
   83f0c:	dfc00215 	stw	ra,8(sp)
   83f10:	df000115 	stw	fp,4(sp)
   83f14:	df000104 	addi	fp,sp,4
   83f18:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   83f1c:	e13fff17 	ldw	r4,-4(fp)
   83f20:	014004b4 	movhi	r5,18
   83f24:	2945ca04 	addi	r5,r5,5928
   83f28:	0084d340 	call	84d34 <alt_dev_llist_insert>
}
   83f2c:	e037883a 	mov	sp,fp
   83f30:	dfc00117 	ldw	ra,4(sp)
   83f34:	df000017 	ldw	fp,0(sp)
   83f38:	dec00204 	addi	sp,sp,8
   83f3c:	f800283a 	ret

00083f40 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   83f40:	defffd04 	addi	sp,sp,-12
   83f44:	dfc00215 	stw	ra,8(sp)
   83f48:	df000115 	stw	fp,4(sp)
   83f4c:	df000104 	addi	fp,sp,4
   83f50:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   83f54:	00854600 	call	85460 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   83f58:	00800044 	movi	r2,1
   83f5c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   83f60:	e037883a 	mov	sp,fp
   83f64:	dfc00117 	ldw	ra,4(sp)
   83f68:	df000017 	ldw	fp,0(sp)
   83f6c:	dec00204 	addi	sp,sp,8
   83f70:	f800283a 	ret

00083f74 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   83f74:	defffe04 	addi	sp,sp,-8
   83f78:	dfc00115 	stw	ra,4(sp)
   83f7c:	df000015 	stw	fp,0(sp)
   83f80:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   83f84:	010004b4 	movhi	r4,18
   83f88:	21014804 	addi	r4,r4,1312
   83f8c:	000b883a 	mov	r5,zero
   83f90:	000d883a 	mov	r6,zero
   83f94:	008411c0 	call	8411c <altera_avalon_jtag_uart_init>
   83f98:	010004b4 	movhi	r4,18
   83f9c:	21013e04 	addi	r4,r4,1272
   83fa0:	0083f080 	call	83f08 <alt_dev_reg>
}
   83fa4:	e037883a 	mov	sp,fp
   83fa8:	dfc00117 	ldw	ra,4(sp)
   83fac:	df000017 	ldw	fp,0(sp)
   83fb0:	dec00204 	addi	sp,sp,8
   83fb4:	f800283a 	ret

00083fb8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   83fb8:	defffa04 	addi	sp,sp,-24
   83fbc:	dfc00515 	stw	ra,20(sp)
   83fc0:	df000415 	stw	fp,16(sp)
   83fc4:	df000404 	addi	fp,sp,16
   83fc8:	e13ffd15 	stw	r4,-12(fp)
   83fcc:	e17ffe15 	stw	r5,-8(fp)
   83fd0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83fd4:	e0bffd17 	ldw	r2,-12(fp)
   83fd8:	10800017 	ldw	r2,0(r2)
   83fdc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   83fe0:	e0bffc17 	ldw	r2,-16(fp)
   83fe4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   83fe8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   83fec:	10800217 	ldw	r2,8(r2)
   83ff0:	1809883a 	mov	r4,r3
   83ff4:	e17ffe17 	ldw	r5,-8(fp)
   83ff8:	e1bfff17 	ldw	r6,-4(fp)
   83ffc:	100f883a 	mov	r7,r2
   84000:	00845e00 	call	845e0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   84004:	e037883a 	mov	sp,fp
   84008:	dfc00117 	ldw	ra,4(sp)
   8400c:	df000017 	ldw	fp,0(sp)
   84010:	dec00204 	addi	sp,sp,8
   84014:	f800283a 	ret

00084018 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   84018:	defffa04 	addi	sp,sp,-24
   8401c:	dfc00515 	stw	ra,20(sp)
   84020:	df000415 	stw	fp,16(sp)
   84024:	df000404 	addi	fp,sp,16
   84028:	e13ffd15 	stw	r4,-12(fp)
   8402c:	e17ffe15 	stw	r5,-8(fp)
   84030:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   84034:	e0bffd17 	ldw	r2,-12(fp)
   84038:	10800017 	ldw	r2,0(r2)
   8403c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   84040:	e0bffc17 	ldw	r2,-16(fp)
   84044:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   84048:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8404c:	10800217 	ldw	r2,8(r2)
   84050:	1809883a 	mov	r4,r3
   84054:	e17ffe17 	ldw	r5,-8(fp)
   84058:	e1bfff17 	ldw	r6,-4(fp)
   8405c:	100f883a 	mov	r7,r2
   84060:	00847f80 	call	847f8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   84064:	e037883a 	mov	sp,fp
   84068:	dfc00117 	ldw	ra,4(sp)
   8406c:	df000017 	ldw	fp,0(sp)
   84070:	dec00204 	addi	sp,sp,8
   84074:	f800283a 	ret

00084078 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   84078:	defffc04 	addi	sp,sp,-16
   8407c:	dfc00315 	stw	ra,12(sp)
   84080:	df000215 	stw	fp,8(sp)
   84084:	df000204 	addi	fp,sp,8
   84088:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8408c:	e0bfff17 	ldw	r2,-4(fp)
   84090:	10800017 	ldw	r2,0(r2)
   84094:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   84098:	e0bffe17 	ldw	r2,-8(fp)
   8409c:	10c00a04 	addi	r3,r2,40
   840a0:	e0bfff17 	ldw	r2,-4(fp)
   840a4:	10800217 	ldw	r2,8(r2)
   840a8:	1809883a 	mov	r4,r3
   840ac:	100b883a 	mov	r5,r2
   840b0:	00844840 	call	84484 <altera_avalon_jtag_uart_close>
}
   840b4:	e037883a 	mov	sp,fp
   840b8:	dfc00117 	ldw	ra,4(sp)
   840bc:	df000017 	ldw	fp,0(sp)
   840c0:	dec00204 	addi	sp,sp,8
   840c4:	f800283a 	ret

000840c8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   840c8:	defffa04 	addi	sp,sp,-24
   840cc:	dfc00515 	stw	ra,20(sp)
   840d0:	df000415 	stw	fp,16(sp)
   840d4:	df000404 	addi	fp,sp,16
   840d8:	e13ffd15 	stw	r4,-12(fp)
   840dc:	e17ffe15 	stw	r5,-8(fp)
   840e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   840e4:	e0bffd17 	ldw	r2,-12(fp)
   840e8:	10800017 	ldw	r2,0(r2)
   840ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   840f0:	e0bffc17 	ldw	r2,-16(fp)
   840f4:	10800a04 	addi	r2,r2,40
   840f8:	1009883a 	mov	r4,r2
   840fc:	e17ffe17 	ldw	r5,-8(fp)
   84100:	e1bfff17 	ldw	r6,-4(fp)
   84104:	00844ec0 	call	844ec <altera_avalon_jtag_uart_ioctl>
}
   84108:	e037883a 	mov	sp,fp
   8410c:	dfc00117 	ldw	ra,4(sp)
   84110:	df000017 	ldw	fp,0(sp)
   84114:	dec00204 	addi	sp,sp,8
   84118:	f800283a 	ret

0008411c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8411c:	defffa04 	addi	sp,sp,-24
   84120:	dfc00515 	stw	ra,20(sp)
   84124:	df000415 	stw	fp,16(sp)
   84128:	df000404 	addi	fp,sp,16
   8412c:	e13ffd15 	stw	r4,-12(fp)
   84130:	e17ffe15 	stw	r5,-8(fp)
   84134:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   84138:	e0bffd17 	ldw	r2,-12(fp)
   8413c:	00c00044 	movi	r3,1
   84140:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   84144:	e0bffd17 	ldw	r2,-12(fp)
   84148:	10800017 	ldw	r2,0(r2)
   8414c:	10800104 	addi	r2,r2,4
   84150:	e0fffd17 	ldw	r3,-12(fp)
   84154:	18c00817 	ldw	r3,32(r3)
   84158:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8415c:	e0fffe17 	ldw	r3,-8(fp)
   84160:	e0bfff17 	ldw	r2,-4(fp)
   84164:	d8000015 	stw	zero,0(sp)
   84168:	1809883a 	mov	r4,r3
   8416c:	100b883a 	mov	r5,r2
   84170:	01800234 	movhi	r6,8
   84174:	31907704 	addi	r6,r6,16860
   84178:	e1fffd17 	ldw	r7,-12(fp)
   8417c:	00839ec0 	call	839ec <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   84180:	e0bffd17 	ldw	r2,-12(fp)
   84184:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   84188:	e0bffd17 	ldw	r2,-12(fp)
   8418c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   84190:	008004b4 	movhi	r2,18
   84194:	1085ea04 	addi	r2,r2,6056
   84198:	10800017 	ldw	r2,0(r2)
   8419c:	1809883a 	mov	r4,r3
   841a0:	100b883a 	mov	r5,r2
   841a4:	01800234 	movhi	r6,8
   841a8:	3190f804 	addi	r6,r6,17376
   841ac:	e1fffd17 	ldw	r7,-12(fp)
   841b0:	0084a1c0 	call	84a1c <alt_alarm_start>
   841b4:	1000040e 	bge	r2,zero,841c8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   841b8:	e0bffd17 	ldw	r2,-12(fp)
   841bc:	00e00034 	movhi	r3,32768
   841c0:	18ffffc4 	addi	r3,r3,-1
   841c4:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   841c8:	e037883a 	mov	sp,fp
   841cc:	dfc00117 	ldw	ra,4(sp)
   841d0:	df000017 	ldw	fp,0(sp)
   841d4:	dec00204 	addi	sp,sp,8
   841d8:	f800283a 	ret

000841dc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   841dc:	defff804 	addi	sp,sp,-32
   841e0:	df000715 	stw	fp,28(sp)
   841e4:	df000704 	addi	fp,sp,28
   841e8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   841ec:	e0bfff17 	ldw	r2,-4(fp)
   841f0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   841f4:	e0bffb17 	ldw	r2,-20(fp)
   841f8:	10800017 	ldw	r2,0(r2)
   841fc:	e0bffc15 	stw	r2,-16(fp)
   84200:	00000106 	br	84208 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   84204:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   84208:	e0bffc17 	ldw	r2,-16(fp)
   8420c:	10800104 	addi	r2,r2,4
   84210:	10800037 	ldwio	r2,0(r2)
   84214:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   84218:	e0bffd17 	ldw	r2,-12(fp)
   8421c:	1080c00c 	andi	r2,r2,768
   84220:	10006a26 	beq	r2,zero,843cc <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   84224:	e0bffd17 	ldw	r2,-12(fp)
   84228:	1080400c 	andi	r2,r2,256
   8422c:	10003326 	beq	r2,zero,842fc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   84230:	00800074 	movhi	r2,1
   84234:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   84238:	e0bffb17 	ldw	r2,-20(fp)
   8423c:	10800a17 	ldw	r2,40(r2)
   84240:	10800044 	addi	r2,r2,1
   84244:	1081ffcc 	andi	r2,r2,2047
   84248:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   8424c:	e0bffb17 	ldw	r2,-20(fp)
   84250:	10c00b17 	ldw	r3,44(r2)
   84254:	e0bffe17 	ldw	r2,-8(fp)
   84258:	18801426 	beq	r3,r2,842ac <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8425c:	e0bffc17 	ldw	r2,-16(fp)
   84260:	10800037 	ldwio	r2,0(r2)
   84264:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   84268:	e0bff917 	ldw	r2,-28(fp)
   8426c:	10a0000c 	andi	r2,r2,32768
   84270:	10001026 	beq	r2,zero,842b4 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   84274:	e0bffb17 	ldw	r2,-20(fp)
   84278:	10800a17 	ldw	r2,40(r2)
   8427c:	e0fff917 	ldw	r3,-28(fp)
   84280:	e13ffb17 	ldw	r4,-20(fp)
   84284:	2085883a 	add	r2,r4,r2
   84288:	10800e04 	addi	r2,r2,56
   8428c:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   84290:	e0bffb17 	ldw	r2,-20(fp)
   84294:	10800a17 	ldw	r2,40(r2)
   84298:	10800044 	addi	r2,r2,1
   8429c:	10c1ffcc 	andi	r3,r2,2047
   842a0:	e0bffb17 	ldw	r2,-20(fp)
   842a4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   842a8:	003fe306 	br	84238 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   842ac:	0001883a 	nop
   842b0:	00000106 	br	842b8 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   842b4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   842b8:	e0bff917 	ldw	r2,-28(fp)
   842bc:	10bfffec 	andhi	r2,r2,65535
   842c0:	10000e26 	beq	r2,zero,842fc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   842c4:	e0bffb17 	ldw	r2,-20(fp)
   842c8:	10c00817 	ldw	r3,32(r2)
   842cc:	00bfff84 	movi	r2,-2
   842d0:	1886703a 	and	r3,r3,r2
   842d4:	e0bffb17 	ldw	r2,-20(fp)
   842d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   842dc:	e0bffc17 	ldw	r2,-16(fp)
   842e0:	10800104 	addi	r2,r2,4
   842e4:	e0fffb17 	ldw	r3,-20(fp)
   842e8:	18c00817 	ldw	r3,32(r3)
   842ec:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   842f0:	e0bffc17 	ldw	r2,-16(fp)
   842f4:	10800104 	addi	r2,r2,4
   842f8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   842fc:	e0bffd17 	ldw	r2,-12(fp)
   84300:	1080800c 	andi	r2,r2,512
   84304:	103fbf26 	beq	r2,zero,84204 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   84308:	e0bffd17 	ldw	r2,-12(fp)
   8430c:	1004d43a 	srli	r2,r2,16
   84310:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   84314:	00001406 	br	84368 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   84318:	e0bffc17 	ldw	r2,-16(fp)
   8431c:	e0fffb17 	ldw	r3,-20(fp)
   84320:	18c00d17 	ldw	r3,52(r3)
   84324:	e13ffb17 	ldw	r4,-20(fp)
   84328:	20c7883a 	add	r3,r4,r3
   8432c:	18c20e04 	addi	r3,r3,2104
   84330:	18c00003 	ldbu	r3,0(r3)
   84334:	18c03fcc 	andi	r3,r3,255
   84338:	18c0201c 	xori	r3,r3,128
   8433c:	18ffe004 	addi	r3,r3,-128
   84340:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   84344:	e0bffb17 	ldw	r2,-20(fp)
   84348:	10800d17 	ldw	r2,52(r2)
   8434c:	10800044 	addi	r2,r2,1
   84350:	10c1ffcc 	andi	r3,r2,2047
   84354:	e0bffb17 	ldw	r2,-20(fp)
   84358:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8435c:	e0bffa17 	ldw	r2,-24(fp)
   84360:	10bfffc4 	addi	r2,r2,-1
   84364:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   84368:	e0bffa17 	ldw	r2,-24(fp)
   8436c:	10000526 	beq	r2,zero,84384 <altera_avalon_jtag_uart_irq+0x1a8>
   84370:	e0bffb17 	ldw	r2,-20(fp)
   84374:	10c00d17 	ldw	r3,52(r2)
   84378:	e0bffb17 	ldw	r2,-20(fp)
   8437c:	10800c17 	ldw	r2,48(r2)
   84380:	18bfe51e 	bne	r3,r2,84318 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   84384:	e0bffa17 	ldw	r2,-24(fp)
   84388:	103f9e26 	beq	r2,zero,84204 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8438c:	e0bffb17 	ldw	r2,-20(fp)
   84390:	10c00817 	ldw	r3,32(r2)
   84394:	00bfff44 	movi	r2,-3
   84398:	1886703a 	and	r3,r3,r2
   8439c:	e0bffb17 	ldw	r2,-20(fp)
   843a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   843a4:	e0bffb17 	ldw	r2,-20(fp)
   843a8:	10800017 	ldw	r2,0(r2)
   843ac:	10800104 	addi	r2,r2,4
   843b0:	e0fffb17 	ldw	r3,-20(fp)
   843b4:	18c00817 	ldw	r3,32(r3)
   843b8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   843bc:	e0bffc17 	ldw	r2,-16(fp)
   843c0:	10800104 	addi	r2,r2,4
   843c4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   843c8:	003f8e06 	br	84204 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   843cc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   843d0:	e037883a 	mov	sp,fp
   843d4:	df000017 	ldw	fp,0(sp)
   843d8:	dec00104 	addi	sp,sp,4
   843dc:	f800283a 	ret

000843e0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   843e0:	defffc04 	addi	sp,sp,-16
   843e4:	df000315 	stw	fp,12(sp)
   843e8:	df000304 	addi	fp,sp,12
   843ec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   843f0:	e0bfff17 	ldw	r2,-4(fp)
   843f4:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   843f8:	e0bffd17 	ldw	r2,-12(fp)
   843fc:	10800017 	ldw	r2,0(r2)
   84400:	10800104 	addi	r2,r2,4
   84404:	10800037 	ldwio	r2,0(r2)
   84408:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8440c:	e0bffe17 	ldw	r2,-8(fp)
   84410:	1081000c 	andi	r2,r2,1024
   84414:	10000a26 	beq	r2,zero,84440 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   84418:	e0bffd17 	ldw	r2,-12(fp)
   8441c:	10800017 	ldw	r2,0(r2)
   84420:	10800104 	addi	r2,r2,4
   84424:	e0fffd17 	ldw	r3,-12(fp)
   84428:	18c00817 	ldw	r3,32(r3)
   8442c:	18c10014 	ori	r3,r3,1024
   84430:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   84434:	e0bffd17 	ldw	r2,-12(fp)
   84438:	10000915 	stw	zero,36(r2)
   8443c:	00000a06 	br	84468 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   84440:	e0bffd17 	ldw	r2,-12(fp)
   84444:	10800917 	ldw	r2,36(r2)
   84448:	00e00034 	movhi	r3,32768
   8444c:	18ffff04 	addi	r3,r3,-4
   84450:	18800536 	bltu	r3,r2,84468 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   84454:	e0bffd17 	ldw	r2,-12(fp)
   84458:	10800917 	ldw	r2,36(r2)
   8445c:	10c00044 	addi	r3,r2,1
   84460:	e0bffd17 	ldw	r2,-12(fp)
   84464:	10c00915 	stw	r3,36(r2)
   84468:	008004b4 	movhi	r2,18
   8446c:	1085ea04 	addi	r2,r2,6056
   84470:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   84474:	e037883a 	mov	sp,fp
   84478:	df000017 	ldw	fp,0(sp)
   8447c:	dec00104 	addi	sp,sp,4
   84480:	f800283a 	ret

00084484 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   84484:	defffd04 	addi	sp,sp,-12
   84488:	df000215 	stw	fp,8(sp)
   8448c:	df000204 	addi	fp,sp,8
   84490:	e13ffe15 	stw	r4,-8(fp)
   84494:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   84498:	00000506 	br	844b0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   8449c:	e0bfff17 	ldw	r2,-4(fp)
   844a0:	1090000c 	andi	r2,r2,16384
   844a4:	10000226 	beq	r2,zero,844b0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   844a8:	00bffd44 	movi	r2,-11
   844ac:	00000b06 	br	844dc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   844b0:	e0bffe17 	ldw	r2,-8(fp)
   844b4:	10c00d17 	ldw	r3,52(r2)
   844b8:	e0bffe17 	ldw	r2,-8(fp)
   844bc:	10800c17 	ldw	r2,48(r2)
   844c0:	18800526 	beq	r3,r2,844d8 <altera_avalon_jtag_uart_close+0x54>
   844c4:	e0bffe17 	ldw	r2,-8(fp)
   844c8:	10c00917 	ldw	r3,36(r2)
   844cc:	e0bffe17 	ldw	r2,-8(fp)
   844d0:	10800117 	ldw	r2,4(r2)
   844d4:	18bff136 	bltu	r3,r2,8449c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   844d8:	0005883a 	mov	r2,zero
}
   844dc:	e037883a 	mov	sp,fp
   844e0:	df000017 	ldw	fp,0(sp)
   844e4:	dec00104 	addi	sp,sp,4
   844e8:	f800283a 	ret

000844ec <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   844ec:	defffa04 	addi	sp,sp,-24
   844f0:	df000515 	stw	fp,20(sp)
   844f4:	df000504 	addi	fp,sp,20
   844f8:	e13ffd15 	stw	r4,-12(fp)
   844fc:	e17ffe15 	stw	r5,-8(fp)
   84500:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   84504:	00bff9c4 	movi	r2,-25
   84508:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   8450c:	e0bffe17 	ldw	r2,-8(fp)
   84510:	10da8060 	cmpeqi	r3,r2,27137
   84514:	1800031e 	bne	r3,zero,84524 <altera_avalon_jtag_uart_ioctl+0x38>
   84518:	109a80a0 	cmpeqi	r2,r2,27138
   8451c:	1000181e 	bne	r2,zero,84580 <altera_avalon_jtag_uart_ioctl+0x94>
   84520:	00002606 	br	845bc <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   84524:	e0bffd17 	ldw	r2,-12(fp)
   84528:	10c00117 	ldw	r3,4(r2)
   8452c:	00a00034 	movhi	r2,32768
   84530:	10bfffc4 	addi	r2,r2,-1
   84534:	18802226 	beq	r3,r2,845c0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   84538:	e0bfff17 	ldw	r2,-4(fp)
   8453c:	10800017 	ldw	r2,0(r2)
   84540:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   84544:	e0bffc17 	ldw	r2,-16(fp)
   84548:	10800090 	cmplti	r2,r2,2
   8454c:	1000061e 	bne	r2,zero,84568 <altera_avalon_jtag_uart_ioctl+0x7c>
   84550:	e0fffc17 	ldw	r3,-16(fp)
   84554:	00a00034 	movhi	r2,32768
   84558:	10bfffc4 	addi	r2,r2,-1
   8455c:	18800226 	beq	r3,r2,84568 <altera_avalon_jtag_uart_ioctl+0x7c>
   84560:	e0bffc17 	ldw	r2,-16(fp)
   84564:	00000206 	br	84570 <altera_avalon_jtag_uart_ioctl+0x84>
   84568:	00a00034 	movhi	r2,32768
   8456c:	10bfff84 	addi	r2,r2,-2
   84570:	e0fffd17 	ldw	r3,-12(fp)
   84574:	18800115 	stw	r2,4(r3)
      rc = 0;
   84578:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8457c:	00001006 	br	845c0 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   84580:	e0bffd17 	ldw	r2,-12(fp)
   84584:	10c00117 	ldw	r3,4(r2)
   84588:	00a00034 	movhi	r2,32768
   8458c:	10bfffc4 	addi	r2,r2,-1
   84590:	18800d26 	beq	r3,r2,845c8 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   84594:	e0bffd17 	ldw	r2,-12(fp)
   84598:	10c00917 	ldw	r3,36(r2)
   8459c:	e0bffd17 	ldw	r2,-12(fp)
   845a0:	10800117 	ldw	r2,4(r2)
   845a4:	1885803a 	cmpltu	r2,r3,r2
   845a8:	10c03fcc 	andi	r3,r2,255
   845ac:	e0bfff17 	ldw	r2,-4(fp)
   845b0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   845b4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   845b8:	00000306 	br	845c8 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   845bc:	00000306 	br	845cc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   845c0:	0001883a 	nop
   845c4:	00000106 	br	845cc <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   845c8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   845cc:	e0bffb17 	ldw	r2,-20(fp)
}
   845d0:	e037883a 	mov	sp,fp
   845d4:	df000017 	ldw	fp,0(sp)
   845d8:	dec00104 	addi	sp,sp,4
   845dc:	f800283a 	ret

000845e0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   845e0:	defff304 	addi	sp,sp,-52
   845e4:	dfc00c15 	stw	ra,48(sp)
   845e8:	df000b15 	stw	fp,44(sp)
   845ec:	df000b04 	addi	fp,sp,44
   845f0:	e13ffc15 	stw	r4,-16(fp)
   845f4:	e17ffd15 	stw	r5,-12(fp)
   845f8:	e1bffe15 	stw	r6,-8(fp)
   845fc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   84600:	e0bffd17 	ldw	r2,-12(fp)
   84604:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   84608:	00004706 	br	84728 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8460c:	e0bffc17 	ldw	r2,-16(fp)
   84610:	10800a17 	ldw	r2,40(r2)
   84614:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   84618:	e0bffc17 	ldw	r2,-16(fp)
   8461c:	10800b17 	ldw	r2,44(r2)
   84620:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   84624:	e0fff717 	ldw	r3,-36(fp)
   84628:	e0bff817 	ldw	r2,-32(fp)
   8462c:	18800536 	bltu	r3,r2,84644 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   84630:	e0fff717 	ldw	r3,-36(fp)
   84634:	e0bff817 	ldw	r2,-32(fp)
   84638:	1885c83a 	sub	r2,r3,r2
   8463c:	e0bff615 	stw	r2,-40(fp)
   84640:	00000406 	br	84654 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   84644:	00c20004 	movi	r3,2048
   84648:	e0bff817 	ldw	r2,-32(fp)
   8464c:	1885c83a 	sub	r2,r3,r2
   84650:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   84654:	e0bff617 	ldw	r2,-40(fp)
   84658:	10001e26 	beq	r2,zero,846d4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   8465c:	e0fffe17 	ldw	r3,-8(fp)
   84660:	e0bff617 	ldw	r2,-40(fp)
   84664:	1880022e 	bgeu	r3,r2,84670 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   84668:	e0bffe17 	ldw	r2,-8(fp)
   8466c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   84670:	e0bff817 	ldw	r2,-32(fp)
   84674:	10800e04 	addi	r2,r2,56
   84678:	e0fffc17 	ldw	r3,-16(fp)
   8467c:	1885883a 	add	r2,r3,r2
   84680:	e13ff517 	ldw	r4,-44(fp)
   84684:	100b883a 	mov	r5,r2
   84688:	e1bff617 	ldw	r6,-40(fp)
   8468c:	00857e00 	call	857e0 <memcpy>
      ptr   += n;
   84690:	e0fff517 	ldw	r3,-44(fp)
   84694:	e0bff617 	ldw	r2,-40(fp)
   84698:	1885883a 	add	r2,r3,r2
   8469c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   846a0:	e0fffe17 	ldw	r3,-8(fp)
   846a4:	e0bff617 	ldw	r2,-40(fp)
   846a8:	1885c83a 	sub	r2,r3,r2
   846ac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   846b0:	e0fff817 	ldw	r3,-32(fp)
   846b4:	e0bff617 	ldw	r2,-40(fp)
   846b8:	1885883a 	add	r2,r3,r2
   846bc:	10c1ffcc 	andi	r3,r2,2047
   846c0:	e0bffc17 	ldw	r2,-16(fp)
   846c4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   846c8:	e0bffe17 	ldw	r2,-8(fp)
   846cc:	00bfcf16 	blt	zero,r2,8460c <altera_avalon_jtag_uart_read+0x2c>
   846d0:	00000106 	br	846d8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   846d4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   846d8:	e0fff517 	ldw	r3,-44(fp)
   846dc:	e0bffd17 	ldw	r2,-12(fp)
   846e0:	1880141e 	bne	r3,r2,84734 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   846e4:	e0bfff17 	ldw	r2,-4(fp)
   846e8:	1090000c 	andi	r2,r2,16384
   846ec:	1000131e 	bne	r2,zero,8473c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   846f0:	0001883a 	nop
   846f4:	e0bffc17 	ldw	r2,-16(fp)
   846f8:	10c00a17 	ldw	r3,40(r2)
   846fc:	e0bff717 	ldw	r2,-36(fp)
   84700:	1880051e 	bne	r3,r2,84718 <altera_avalon_jtag_uart_read+0x138>
   84704:	e0bffc17 	ldw	r2,-16(fp)
   84708:	10c00917 	ldw	r3,36(r2)
   8470c:	e0bffc17 	ldw	r2,-16(fp)
   84710:	10800117 	ldw	r2,4(r2)
   84714:	18bff736 	bltu	r3,r2,846f4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   84718:	e0bffc17 	ldw	r2,-16(fp)
   8471c:	10c00a17 	ldw	r3,40(r2)
   84720:	e0bff717 	ldw	r2,-36(fp)
   84724:	18800726 	beq	r3,r2,84744 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   84728:	e0bffe17 	ldw	r2,-8(fp)
   8472c:	00bfb716 	blt	zero,r2,8460c <altera_avalon_jtag_uart_read+0x2c>
   84730:	00000506 	br	84748 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   84734:	0001883a 	nop
   84738:	00000306 	br	84748 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   8473c:	0001883a 	nop
   84740:	00000106 	br	84748 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   84744:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   84748:	e0fff517 	ldw	r3,-44(fp)
   8474c:	e0bffd17 	ldw	r2,-12(fp)
   84750:	18801726 	beq	r3,r2,847b0 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84754:	0005303a 	rdctl	r2,status
   84758:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8475c:	e0fffa17 	ldw	r3,-24(fp)
   84760:	00bfff84 	movi	r2,-2
   84764:	1884703a 	and	r2,r3,r2
   84768:	1001703a 	wrctl	status,r2
  
  return context;
   8476c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   84770:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   84774:	e0bffc17 	ldw	r2,-16(fp)
   84778:	10800817 	ldw	r2,32(r2)
   8477c:	10c00054 	ori	r3,r2,1
   84780:	e0bffc17 	ldw	r2,-16(fp)
   84784:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   84788:	e0bffc17 	ldw	r2,-16(fp)
   8478c:	10800017 	ldw	r2,0(r2)
   84790:	10800104 	addi	r2,r2,4
   84794:	e0fffc17 	ldw	r3,-16(fp)
   84798:	18c00817 	ldw	r3,32(r3)
   8479c:	10c00035 	stwio	r3,0(r2)
   847a0:	e0bff917 	ldw	r2,-28(fp)
   847a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   847a8:	e0bffb17 	ldw	r2,-20(fp)
   847ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   847b0:	e0fff517 	ldw	r3,-44(fp)
   847b4:	e0bffd17 	ldw	r2,-12(fp)
   847b8:	18800426 	beq	r3,r2,847cc <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   847bc:	e0fff517 	ldw	r3,-44(fp)
   847c0:	e0bffd17 	ldw	r2,-12(fp)
   847c4:	1885c83a 	sub	r2,r3,r2
   847c8:	00000606 	br	847e4 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   847cc:	e0bfff17 	ldw	r2,-4(fp)
   847d0:	1090000c 	andi	r2,r2,16384
   847d4:	10000226 	beq	r2,zero,847e0 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   847d8:	00bffd44 	movi	r2,-11
   847dc:	00000106 	br	847e4 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   847e0:	00bffec4 	movi	r2,-5
}
   847e4:	e037883a 	mov	sp,fp
   847e8:	dfc00117 	ldw	ra,4(sp)
   847ec:	df000017 	ldw	fp,0(sp)
   847f0:	dec00204 	addi	sp,sp,8
   847f4:	f800283a 	ret

000847f8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   847f8:	defff304 	addi	sp,sp,-52
   847fc:	dfc00c15 	stw	ra,48(sp)
   84800:	df000b15 	stw	fp,44(sp)
   84804:	df000b04 	addi	fp,sp,44
   84808:	e13ffc15 	stw	r4,-16(fp)
   8480c:	e17ffd15 	stw	r5,-12(fp)
   84810:	e1bffe15 	stw	r6,-8(fp)
   84814:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   84818:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8481c:	e0bffd17 	ldw	r2,-12(fp)
   84820:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   84824:	00003706 	br	84904 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   84828:	e0bffc17 	ldw	r2,-16(fp)
   8482c:	10800c17 	ldw	r2,48(r2)
   84830:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   84834:	e0bffc17 	ldw	r2,-16(fp)
   84838:	10800d17 	ldw	r2,52(r2)
   8483c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   84840:	e0fff817 	ldw	r3,-32(fp)
   84844:	e0bff517 	ldw	r2,-44(fp)
   84848:	1880062e 	bgeu	r3,r2,84864 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8484c:	e0fff517 	ldw	r3,-44(fp)
   84850:	e0bff817 	ldw	r2,-32(fp)
   84854:	1885c83a 	sub	r2,r3,r2
   84858:	10bfffc4 	addi	r2,r2,-1
   8485c:	e0bff615 	stw	r2,-40(fp)
   84860:	00000b06 	br	84890 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   84864:	e0bff517 	ldw	r2,-44(fp)
   84868:	10000526 	beq	r2,zero,84880 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8486c:	00c20004 	movi	r3,2048
   84870:	e0bff817 	ldw	r2,-32(fp)
   84874:	1885c83a 	sub	r2,r3,r2
   84878:	e0bff615 	stw	r2,-40(fp)
   8487c:	00000406 	br	84890 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   84880:	00c1ffc4 	movi	r3,2047
   84884:	e0bff817 	ldw	r2,-32(fp)
   84888:	1885c83a 	sub	r2,r3,r2
   8488c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   84890:	e0bff617 	ldw	r2,-40(fp)
   84894:	10001e26 	beq	r2,zero,84910 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   84898:	e0fffe17 	ldw	r3,-8(fp)
   8489c:	e0bff617 	ldw	r2,-40(fp)
   848a0:	1880022e 	bgeu	r3,r2,848ac <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   848a4:	e0bffe17 	ldw	r2,-8(fp)
   848a8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   848ac:	e0bff817 	ldw	r2,-32(fp)
   848b0:	10820e04 	addi	r2,r2,2104
   848b4:	e0fffc17 	ldw	r3,-16(fp)
   848b8:	1885883a 	add	r2,r3,r2
   848bc:	1009883a 	mov	r4,r2
   848c0:	e17ffd17 	ldw	r5,-12(fp)
   848c4:	e1bff617 	ldw	r6,-40(fp)
   848c8:	00857e00 	call	857e0 <memcpy>
      ptr   += n;
   848cc:	e0fffd17 	ldw	r3,-12(fp)
   848d0:	e0bff617 	ldw	r2,-40(fp)
   848d4:	1885883a 	add	r2,r3,r2
   848d8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   848dc:	e0fffe17 	ldw	r3,-8(fp)
   848e0:	e0bff617 	ldw	r2,-40(fp)
   848e4:	1885c83a 	sub	r2,r3,r2
   848e8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   848ec:	e0fff817 	ldw	r3,-32(fp)
   848f0:	e0bff617 	ldw	r2,-40(fp)
   848f4:	1885883a 	add	r2,r3,r2
   848f8:	10c1ffcc 	andi	r3,r2,2047
   848fc:	e0bffc17 	ldw	r2,-16(fp)
   84900:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   84904:	e0bffe17 	ldw	r2,-8(fp)
   84908:	00bfc716 	blt	zero,r2,84828 <altera_avalon_jtag_uart_write+0x30>
   8490c:	00000106 	br	84914 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   84910:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84914:	0005303a 	rdctl	r2,status
   84918:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8491c:	e0fffa17 	ldw	r3,-24(fp)
   84920:	00bfff84 	movi	r2,-2
   84924:	1884703a 	and	r2,r3,r2
   84928:	1001703a 	wrctl	status,r2
  
  return context;
   8492c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   84930:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   84934:	e0bffc17 	ldw	r2,-16(fp)
   84938:	10800817 	ldw	r2,32(r2)
   8493c:	10c00094 	ori	r3,r2,2
   84940:	e0bffc17 	ldw	r2,-16(fp)
   84944:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   84948:	e0bffc17 	ldw	r2,-16(fp)
   8494c:	10800017 	ldw	r2,0(r2)
   84950:	10800104 	addi	r2,r2,4
   84954:	e0fffc17 	ldw	r3,-16(fp)
   84958:	18c00817 	ldw	r3,32(r3)
   8495c:	10c00035 	stwio	r3,0(r2)
   84960:	e0bff917 	ldw	r2,-28(fp)
   84964:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84968:	e0bffb17 	ldw	r2,-20(fp)
   8496c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   84970:	e0bffe17 	ldw	r2,-8(fp)
   84974:	0080110e 	bge	zero,r2,849bc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   84978:	e0bfff17 	ldw	r2,-4(fp)
   8497c:	1090000c 	andi	r2,r2,16384
   84980:	1000111e 	bne	r2,zero,849c8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   84984:	0001883a 	nop
   84988:	e0bffc17 	ldw	r2,-16(fp)
   8498c:	10c00d17 	ldw	r3,52(r2)
   84990:	e0bff517 	ldw	r2,-44(fp)
   84994:	1880051e 	bne	r3,r2,849ac <altera_avalon_jtag_uart_write+0x1b4>
   84998:	e0bffc17 	ldw	r2,-16(fp)
   8499c:	10c00917 	ldw	r3,36(r2)
   849a0:	e0bffc17 	ldw	r2,-16(fp)
   849a4:	10800117 	ldw	r2,4(r2)
   849a8:	18bff736 	bltu	r3,r2,84988 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   849ac:	e0bffc17 	ldw	r2,-16(fp)
   849b0:	10c00d17 	ldw	r3,52(r2)
   849b4:	e0bff517 	ldw	r2,-44(fp)
   849b8:	18800526 	beq	r3,r2,849d0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   849bc:	e0bffe17 	ldw	r2,-8(fp)
   849c0:	00bfd016 	blt	zero,r2,84904 <altera_avalon_jtag_uart_write+0x10c>
   849c4:	00000306 	br	849d4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   849c8:	0001883a 	nop
   849cc:	00000106 	br	849d4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   849d0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   849d4:	e0fffd17 	ldw	r3,-12(fp)
   849d8:	e0bff717 	ldw	r2,-36(fp)
   849dc:	18800426 	beq	r3,r2,849f0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   849e0:	e0fffd17 	ldw	r3,-12(fp)
   849e4:	e0bff717 	ldw	r2,-36(fp)
   849e8:	1885c83a 	sub	r2,r3,r2
   849ec:	00000606 	br	84a08 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   849f0:	e0bfff17 	ldw	r2,-4(fp)
   849f4:	1090000c 	andi	r2,r2,16384
   849f8:	10000226 	beq	r2,zero,84a04 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   849fc:	00bffd44 	movi	r2,-11
   84a00:	00000106 	br	84a08 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   84a04:	00bffec4 	movi	r2,-5
}
   84a08:	e037883a 	mov	sp,fp
   84a0c:	dfc00117 	ldw	ra,4(sp)
   84a10:	df000017 	ldw	fp,0(sp)
   84a14:	dec00204 	addi	sp,sp,8
   84a18:	f800283a 	ret

00084a1c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   84a1c:	defff504 	addi	sp,sp,-44
   84a20:	df000a15 	stw	fp,40(sp)
   84a24:	df000a04 	addi	fp,sp,40
   84a28:	e13ffc15 	stw	r4,-16(fp)
   84a2c:	e17ffd15 	stw	r5,-12(fp)
   84a30:	e1bffe15 	stw	r6,-8(fp)
   84a34:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   84a38:	e03ff615 	stw	zero,-40(fp)
   84a3c:	008004b4 	movhi	r2,18
   84a40:	1085ea04 	addi	r2,r2,6056
   84a44:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   84a48:	10003f26 	beq	r2,zero,84b48 <alt_alarm_start+0x12c>
  {
    if (alarm)
   84a4c:	e0bffc17 	ldw	r2,-16(fp)
   84a50:	10003b26 	beq	r2,zero,84b40 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   84a54:	e0bffc17 	ldw	r2,-16(fp)
   84a58:	e0fffe17 	ldw	r3,-8(fp)
   84a5c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   84a60:	e0bffc17 	ldw	r2,-16(fp)
   84a64:	e0ffff17 	ldw	r3,-4(fp)
   84a68:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84a6c:	0005303a 	rdctl	r2,status
   84a70:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84a74:	e0fff817 	ldw	r3,-32(fp)
   84a78:	00bfff84 	movi	r2,-2
   84a7c:	1884703a 	and	r2,r3,r2
   84a80:	1001703a 	wrctl	status,r2
  
  return context;
   84a84:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   84a88:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   84a8c:	008004b4 	movhi	r2,18
   84a90:	1085eb04 	addi	r2,r2,6060
   84a94:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   84a98:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   84a9c:	e0fffd17 	ldw	r3,-12(fp)
   84aa0:	e0bff617 	ldw	r2,-40(fp)
   84aa4:	1885883a 	add	r2,r3,r2
   84aa8:	10c00044 	addi	r3,r2,1
   84aac:	e0bffc17 	ldw	r2,-16(fp)
   84ab0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   84ab4:	e0bffc17 	ldw	r2,-16(fp)
   84ab8:	10c00217 	ldw	r3,8(r2)
   84abc:	e0bff617 	ldw	r2,-40(fp)
   84ac0:	1880042e 	bgeu	r3,r2,84ad4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   84ac4:	e0bffc17 	ldw	r2,-16(fp)
   84ac8:	00c00044 	movi	r3,1
   84acc:	10c00405 	stb	r3,16(r2)
   84ad0:	00000206 	br	84adc <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   84ad4:	e0bffc17 	ldw	r2,-16(fp)
   84ad8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   84adc:	e0bffc17 	ldw	r2,-16(fp)
   84ae0:	00c004b4 	movhi	r3,18
   84ae4:	18c5ce04 	addi	r3,r3,5944
   84ae8:	e0fff915 	stw	r3,-28(fp)
   84aec:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   84af0:	e0bffa17 	ldw	r2,-24(fp)
   84af4:	e0fff917 	ldw	r3,-28(fp)
   84af8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   84afc:	e0bff917 	ldw	r2,-28(fp)
   84b00:	10c00017 	ldw	r3,0(r2)
   84b04:	e0bffa17 	ldw	r2,-24(fp)
   84b08:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   84b0c:	e0bff917 	ldw	r2,-28(fp)
   84b10:	10800017 	ldw	r2,0(r2)
   84b14:	e0fffa17 	ldw	r3,-24(fp)
   84b18:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   84b1c:	e0bff917 	ldw	r2,-28(fp)
   84b20:	e0fffa17 	ldw	r3,-24(fp)
   84b24:	10c00015 	stw	r3,0(r2)
   84b28:	e0bff717 	ldw	r2,-36(fp)
   84b2c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84b30:	e0bffb17 	ldw	r2,-20(fp)
   84b34:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   84b38:	0005883a 	mov	r2,zero
   84b3c:	00000306 	br	84b4c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   84b40:	00bffa84 	movi	r2,-22
   84b44:	00000106 	br	84b4c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   84b48:	00bfde84 	movi	r2,-134
  }
}
   84b4c:	e037883a 	mov	sp,fp
   84b50:	df000017 	ldw	fp,0(sp)
   84b54:	dec00104 	addi	sp,sp,4
   84b58:	f800283a 	ret

00084b5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   84b5c:	defffe04 	addi	sp,sp,-8
   84b60:	dfc00115 	stw	ra,4(sp)
   84b64:	df000015 	stw	fp,0(sp)
   84b68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   84b6c:	008004b4 	movhi	r2,18
   84b70:	1085cd04 	addi	r2,r2,5940
   84b74:	10800017 	ldw	r2,0(r2)
   84b78:	10000526 	beq	r2,zero,84b90 <alt_get_errno+0x34>
   84b7c:	008004b4 	movhi	r2,18
   84b80:	1085cd04 	addi	r2,r2,5940
   84b84:	10800017 	ldw	r2,0(r2)
   84b88:	103ee83a 	callr	r2
   84b8c:	00000206 	br	84b98 <alt_get_errno+0x3c>
   84b90:	008004b4 	movhi	r2,18
   84b94:	1085e504 	addi	r2,r2,6036
}
   84b98:	e037883a 	mov	sp,fp
   84b9c:	dfc00117 	ldw	ra,4(sp)
   84ba0:	df000017 	ldw	fp,0(sp)
   84ba4:	dec00204 	addi	sp,sp,8
   84ba8:	f800283a 	ret

00084bac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   84bac:	defffb04 	addi	sp,sp,-20
   84bb0:	dfc00415 	stw	ra,16(sp)
   84bb4:	df000315 	stw	fp,12(sp)
   84bb8:	df000304 	addi	fp,sp,12
   84bbc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   84bc0:	e0bfff17 	ldw	r2,-4(fp)
   84bc4:	10000616 	blt	r2,zero,84be0 <close+0x34>
   84bc8:	e0bfff17 	ldw	r2,-4(fp)
   84bcc:	10c00324 	muli	r3,r2,12
   84bd0:	008004b4 	movhi	r2,18
   84bd4:	10856004 	addi	r2,r2,5504
   84bd8:	1885883a 	add	r2,r3,r2
   84bdc:	00000106 	br	84be4 <close+0x38>
   84be0:	0005883a 	mov	r2,zero
   84be4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   84be8:	e0bffd17 	ldw	r2,-12(fp)
   84bec:	10001826 	beq	r2,zero,84c50 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   84bf0:	e0bffd17 	ldw	r2,-12(fp)
   84bf4:	10800017 	ldw	r2,0(r2)
   84bf8:	10800417 	ldw	r2,16(r2)
   84bfc:	10000626 	beq	r2,zero,84c18 <close+0x6c>
   84c00:	e0bffd17 	ldw	r2,-12(fp)
   84c04:	10800017 	ldw	r2,0(r2)
   84c08:	10800417 	ldw	r2,16(r2)
   84c0c:	e13ffd17 	ldw	r4,-12(fp)
   84c10:	103ee83a 	callr	r2
   84c14:	00000106 	br	84c1c <close+0x70>
   84c18:	0005883a 	mov	r2,zero
   84c1c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   84c20:	e13fff17 	ldw	r4,-4(fp)
   84c24:	00852640 	call	85264 <alt_release_fd>
    if (rval < 0)
   84c28:	e0bffe17 	ldw	r2,-8(fp)
   84c2c:	1000060e 	bge	r2,zero,84c48 <close+0x9c>
    {
      ALT_ERRNO = -rval;
   84c30:	0084b5c0 	call	84b5c <alt_get_errno>
   84c34:	e0fffe17 	ldw	r3,-8(fp)
   84c38:	00c7c83a 	sub	r3,zero,r3
   84c3c:	10c00015 	stw	r3,0(r2)
      return -1;
   84c40:	00bfffc4 	movi	r2,-1
   84c44:	00000606 	br	84c60 <close+0xb4>
    }
    return 0;
   84c48:	0005883a 	mov	r2,zero
   84c4c:	00000406 	br	84c60 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   84c50:	0084b5c0 	call	84b5c <alt_get_errno>
   84c54:	00c01444 	movi	r3,81
   84c58:	10c00015 	stw	r3,0(r2)
    return -1;
   84c5c:	00bfffc4 	movi	r2,-1
  }
}
   84c60:	e037883a 	mov	sp,fp
   84c64:	dfc00117 	ldw	ra,4(sp)
   84c68:	df000017 	ldw	fp,0(sp)
   84c6c:	dec00204 	addi	sp,sp,8
   84c70:	f800283a 	ret

00084c74 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   84c74:	defffe04 	addi	sp,sp,-8
   84c78:	df000115 	stw	fp,4(sp)
   84c7c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   84c80:	e03fff15 	stw	zero,-4(fp)
   84c84:	00000506 	br	84c9c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   84c88:	e0bfff17 	ldw	r2,-4(fp)
   84c8c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   84c90:	e0bfff17 	ldw	r2,-4(fp)
   84c94:	10800804 	addi	r2,r2,32
   84c98:	e0bfff15 	stw	r2,-4(fp)
   84c9c:	e0bfff17 	ldw	r2,-4(fp)
   84ca0:	10820030 	cmpltui	r2,r2,2048
   84ca4:	103ff81e 	bne	r2,zero,84c88 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   84ca8:	e037883a 	mov	sp,fp
   84cac:	df000017 	ldw	fp,0(sp)
   84cb0:	dec00104 	addi	sp,sp,4
   84cb4:	f800283a 	ret

00084cb8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   84cb8:	defffc04 	addi	sp,sp,-16
   84cbc:	df000315 	stw	fp,12(sp)
   84cc0:	df000304 	addi	fp,sp,12
   84cc4:	e13ffd15 	stw	r4,-12(fp)
   84cc8:	e17ffe15 	stw	r5,-8(fp)
   84ccc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   84cd0:	e0bfff17 	ldw	r2,-4(fp)
}
   84cd4:	e037883a 	mov	sp,fp
   84cd8:	df000017 	ldw	fp,0(sp)
   84cdc:	dec00104 	addi	sp,sp,4
   84ce0:	f800283a 	ret

00084ce4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   84ce4:	defffe04 	addi	sp,sp,-8
   84ce8:	dfc00115 	stw	ra,4(sp)
   84cec:	df000015 	stw	fp,0(sp)
   84cf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   84cf4:	008004b4 	movhi	r2,18
   84cf8:	1085cd04 	addi	r2,r2,5940
   84cfc:	10800017 	ldw	r2,0(r2)
   84d00:	10000526 	beq	r2,zero,84d18 <alt_get_errno+0x34>
   84d04:	008004b4 	movhi	r2,18
   84d08:	1085cd04 	addi	r2,r2,5940
   84d0c:	10800017 	ldw	r2,0(r2)
   84d10:	103ee83a 	callr	r2
   84d14:	00000206 	br	84d20 <alt_get_errno+0x3c>
   84d18:	008004b4 	movhi	r2,18
   84d1c:	1085e504 	addi	r2,r2,6036
}
   84d20:	e037883a 	mov	sp,fp
   84d24:	dfc00117 	ldw	ra,4(sp)
   84d28:	df000017 	ldw	fp,0(sp)
   84d2c:	dec00204 	addi	sp,sp,8
   84d30:	f800283a 	ret

00084d34 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   84d34:	defffa04 	addi	sp,sp,-24
   84d38:	dfc00515 	stw	ra,20(sp)
   84d3c:	df000415 	stw	fp,16(sp)
   84d40:	df000404 	addi	fp,sp,16
   84d44:	e13ffe15 	stw	r4,-8(fp)
   84d48:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   84d4c:	e0bffe17 	ldw	r2,-8(fp)
   84d50:	10000326 	beq	r2,zero,84d60 <alt_dev_llist_insert+0x2c>
   84d54:	e0bffe17 	ldw	r2,-8(fp)
   84d58:	10800217 	ldw	r2,8(r2)
   84d5c:	1000051e 	bne	r2,zero,84d74 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   84d60:	0084ce40 	call	84ce4 <alt_get_errno>
   84d64:	00c00584 	movi	r3,22
   84d68:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   84d6c:	00bffa84 	movi	r2,-22
   84d70:	00001306 	br	84dc0 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   84d74:	e0bffe17 	ldw	r2,-8(fp)
   84d78:	e0ffff17 	ldw	r3,-4(fp)
   84d7c:	e0fffc15 	stw	r3,-16(fp)
   84d80:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   84d84:	e0bffd17 	ldw	r2,-12(fp)
   84d88:	e0fffc17 	ldw	r3,-16(fp)
   84d8c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   84d90:	e0bffc17 	ldw	r2,-16(fp)
   84d94:	10c00017 	ldw	r3,0(r2)
   84d98:	e0bffd17 	ldw	r2,-12(fp)
   84d9c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   84da0:	e0bffc17 	ldw	r2,-16(fp)
   84da4:	10800017 	ldw	r2,0(r2)
   84da8:	e0fffd17 	ldw	r3,-12(fp)
   84dac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   84db0:	e0bffc17 	ldw	r2,-16(fp)
   84db4:	e0fffd17 	ldw	r3,-12(fp)
   84db8:	10c00015 	stw	r3,0(r2)

  return 0;  
   84dbc:	0005883a 	mov	r2,zero
}
   84dc0:	e037883a 	mov	sp,fp
   84dc4:	dfc00117 	ldw	ra,4(sp)
   84dc8:	df000017 	ldw	fp,0(sp)
   84dcc:	dec00204 	addi	sp,sp,8
   84dd0:	f800283a 	ret

00084dd4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   84dd4:	defffd04 	addi	sp,sp,-12
   84dd8:	dfc00215 	stw	ra,8(sp)
   84ddc:	df000115 	stw	fp,4(sp)
   84de0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   84de4:	00800234 	movhi	r2,8
   84de8:	1096f204 	addi	r2,r2,23496
   84dec:	e0bfff15 	stw	r2,-4(fp)
   84df0:	00000606 	br	84e0c <_do_ctors+0x38>
        (*ctor) (); 
   84df4:	e0bfff17 	ldw	r2,-4(fp)
   84df8:	10800017 	ldw	r2,0(r2)
   84dfc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   84e00:	e0bfff17 	ldw	r2,-4(fp)
   84e04:	10bfff04 	addi	r2,r2,-4
   84e08:	e0bfff15 	stw	r2,-4(fp)
   84e0c:	e0ffff17 	ldw	r3,-4(fp)
   84e10:	00800234 	movhi	r2,8
   84e14:	1096f304 	addi	r2,r2,23500
   84e18:	18bff62e 	bgeu	r3,r2,84df4 <_do_ctors+0x20>
        (*ctor) (); 
}
   84e1c:	e037883a 	mov	sp,fp
   84e20:	dfc00117 	ldw	ra,4(sp)
   84e24:	df000017 	ldw	fp,0(sp)
   84e28:	dec00204 	addi	sp,sp,8
   84e2c:	f800283a 	ret

00084e30 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   84e30:	defffd04 	addi	sp,sp,-12
   84e34:	dfc00215 	stw	ra,8(sp)
   84e38:	df000115 	stw	fp,4(sp)
   84e3c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   84e40:	00800234 	movhi	r2,8
   84e44:	1096f204 	addi	r2,r2,23496
   84e48:	e0bfff15 	stw	r2,-4(fp)
   84e4c:	00000606 	br	84e68 <_do_dtors+0x38>
        (*dtor) (); 
   84e50:	e0bfff17 	ldw	r2,-4(fp)
   84e54:	10800017 	ldw	r2,0(r2)
   84e58:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   84e5c:	e0bfff17 	ldw	r2,-4(fp)
   84e60:	10bfff04 	addi	r2,r2,-4
   84e64:	e0bfff15 	stw	r2,-4(fp)
   84e68:	e0ffff17 	ldw	r3,-4(fp)
   84e6c:	00800234 	movhi	r2,8
   84e70:	1096f304 	addi	r2,r2,23500
   84e74:	18bff62e 	bgeu	r3,r2,84e50 <_do_dtors+0x20>
        (*dtor) (); 
}
   84e78:	e037883a 	mov	sp,fp
   84e7c:	dfc00117 	ldw	ra,4(sp)
   84e80:	df000017 	ldw	fp,0(sp)
   84e84:	dec00204 	addi	sp,sp,8
   84e88:	f800283a 	ret

00084e8c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   84e8c:	defffe04 	addi	sp,sp,-8
   84e90:	dfc00115 	stw	ra,4(sp)
   84e94:	df000015 	stw	fp,0(sp)
   84e98:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   84e9c:	0009883a 	mov	r4,zero
   84ea0:	01440004 	movi	r5,4096
   84ea4:	00856d80 	call	856d8 <alt_icache_flush>
#endif
}
   84ea8:	e037883a 	mov	sp,fp
   84eac:	dfc00117 	ldw	ra,4(sp)
   84eb0:	df000017 	ldw	fp,0(sp)
   84eb4:	dec00204 	addi	sp,sp,8
   84eb8:	f800283a 	ret

00084ebc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   84ebc:	defff904 	addi	sp,sp,-28
   84ec0:	dfc00615 	stw	ra,24(sp)
   84ec4:	df000515 	stw	fp,20(sp)
   84ec8:	df000504 	addi	fp,sp,20
   84ecc:	e13ffc15 	stw	r4,-16(fp)
   84ed0:	e17ffd15 	stw	r5,-12(fp)
   84ed4:	e1bffe15 	stw	r6,-8(fp)
   84ed8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   84edc:	e13ffd17 	ldw	r4,-12(fp)
   84ee0:	e17ffe17 	ldw	r5,-8(fp)
   84ee4:	e1bfff17 	ldw	r6,-4(fp)
   84ee8:	00851100 	call	85110 <open>
   84eec:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   84ef0:	e0bffb17 	ldw	r2,-20(fp)
   84ef4:	10001c16 	blt	r2,zero,84f68 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   84ef8:	00c004b4 	movhi	r3,18
   84efc:	18c56004 	addi	r3,r3,5504
   84f00:	e0bffb17 	ldw	r2,-20(fp)
   84f04:	10800324 	muli	r2,r2,12
   84f08:	1885883a 	add	r2,r3,r2
   84f0c:	10c00017 	ldw	r3,0(r2)
   84f10:	e0bffc17 	ldw	r2,-16(fp)
   84f14:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   84f18:	00c004b4 	movhi	r3,18
   84f1c:	18c56004 	addi	r3,r3,5504
   84f20:	e0bffb17 	ldw	r2,-20(fp)
   84f24:	10800324 	muli	r2,r2,12
   84f28:	1885883a 	add	r2,r3,r2
   84f2c:	10800104 	addi	r2,r2,4
   84f30:	10c00017 	ldw	r3,0(r2)
   84f34:	e0bffc17 	ldw	r2,-16(fp)
   84f38:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   84f3c:	00c004b4 	movhi	r3,18
   84f40:	18c56004 	addi	r3,r3,5504
   84f44:	e0bffb17 	ldw	r2,-20(fp)
   84f48:	10800324 	muli	r2,r2,12
   84f4c:	1885883a 	add	r2,r3,r2
   84f50:	10800204 	addi	r2,r2,8
   84f54:	10c00017 	ldw	r3,0(r2)
   84f58:	e0bffc17 	ldw	r2,-16(fp)
   84f5c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   84f60:	e13ffb17 	ldw	r4,-20(fp)
   84f64:	00852640 	call	85264 <alt_release_fd>
  }
} 
   84f68:	e037883a 	mov	sp,fp
   84f6c:	dfc00117 	ldw	ra,4(sp)
   84f70:	df000017 	ldw	fp,0(sp)
   84f74:	dec00204 	addi	sp,sp,8
   84f78:	f800283a 	ret

00084f7c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   84f7c:	defffb04 	addi	sp,sp,-20
   84f80:	dfc00415 	stw	ra,16(sp)
   84f84:	df000315 	stw	fp,12(sp)
   84f88:	df000304 	addi	fp,sp,12
   84f8c:	e13ffd15 	stw	r4,-12(fp)
   84f90:	e17ffe15 	stw	r5,-8(fp)
   84f94:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   84f98:	010004b4 	movhi	r4,18
   84f9c:	21056304 	addi	r4,r4,5516
   84fa0:	e17ffd17 	ldw	r5,-12(fp)
   84fa4:	01800044 	movi	r6,1
   84fa8:	01c07fc4 	movi	r7,511
   84fac:	0084ebc0 	call	84ebc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   84fb0:	010004b4 	movhi	r4,18
   84fb4:	21056004 	addi	r4,r4,5504
   84fb8:	e17ffe17 	ldw	r5,-8(fp)
   84fbc:	000d883a 	mov	r6,zero
   84fc0:	01c07fc4 	movi	r7,511
   84fc4:	0084ebc0 	call	84ebc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   84fc8:	010004b4 	movhi	r4,18
   84fcc:	21056604 	addi	r4,r4,5528
   84fd0:	e17fff17 	ldw	r5,-4(fp)
   84fd4:	01800044 	movi	r6,1
   84fd8:	01c07fc4 	movi	r7,511
   84fdc:	0084ebc0 	call	84ebc <alt_open_fd>
}  
   84fe0:	e037883a 	mov	sp,fp
   84fe4:	dfc00117 	ldw	ra,4(sp)
   84fe8:	df000017 	ldw	fp,0(sp)
   84fec:	dec00204 	addi	sp,sp,8
   84ff0:	f800283a 	ret

00084ff4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   84ff4:	defffe04 	addi	sp,sp,-8
   84ff8:	dfc00115 	stw	ra,4(sp)
   84ffc:	df000015 	stw	fp,0(sp)
   85000:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   85004:	008004b4 	movhi	r2,18
   85008:	1085cd04 	addi	r2,r2,5940
   8500c:	10800017 	ldw	r2,0(r2)
   85010:	10000526 	beq	r2,zero,85028 <alt_get_errno+0x34>
   85014:	008004b4 	movhi	r2,18
   85018:	1085cd04 	addi	r2,r2,5940
   8501c:	10800017 	ldw	r2,0(r2)
   85020:	103ee83a 	callr	r2
   85024:	00000206 	br	85030 <alt_get_errno+0x3c>
   85028:	008004b4 	movhi	r2,18
   8502c:	1085e504 	addi	r2,r2,6036
}
   85030:	e037883a 	mov	sp,fp
   85034:	dfc00117 	ldw	ra,4(sp)
   85038:	df000017 	ldw	fp,0(sp)
   8503c:	dec00204 	addi	sp,sp,8
   85040:	f800283a 	ret

00085044 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   85044:	defffd04 	addi	sp,sp,-12
   85048:	df000215 	stw	fp,8(sp)
   8504c:	df000204 	addi	fp,sp,8
   85050:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   85054:	e0bfff17 	ldw	r2,-4(fp)
   85058:	10800217 	ldw	r2,8(r2)
   8505c:	10d00034 	orhi	r3,r2,16384
   85060:	e0bfff17 	ldw	r2,-4(fp)
   85064:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   85068:	e03ffe15 	stw	zero,-8(fp)
   8506c:	00001d06 	br	850e4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   85070:	00c004b4 	movhi	r3,18
   85074:	18c56004 	addi	r3,r3,5504
   85078:	e0bffe17 	ldw	r2,-8(fp)
   8507c:	10800324 	muli	r2,r2,12
   85080:	1885883a 	add	r2,r3,r2
   85084:	10c00017 	ldw	r3,0(r2)
   85088:	e0bfff17 	ldw	r2,-4(fp)
   8508c:	10800017 	ldw	r2,0(r2)
   85090:	1880111e 	bne	r3,r2,850d8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   85094:	00c004b4 	movhi	r3,18
   85098:	18c56004 	addi	r3,r3,5504
   8509c:	e0bffe17 	ldw	r2,-8(fp)
   850a0:	10800324 	muli	r2,r2,12
   850a4:	1885883a 	add	r2,r3,r2
   850a8:	10800204 	addi	r2,r2,8
   850ac:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   850b0:	1000090e 	bge	r2,zero,850d8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   850b4:	e0bffe17 	ldw	r2,-8(fp)
   850b8:	10c00324 	muli	r3,r2,12
   850bc:	008004b4 	movhi	r2,18
   850c0:	10856004 	addi	r2,r2,5504
   850c4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   850c8:	e0bfff17 	ldw	r2,-4(fp)
   850cc:	18800226 	beq	r3,r2,850d8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   850d0:	00bffcc4 	movi	r2,-13
   850d4:	00000a06 	br	85100 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   850d8:	e0bffe17 	ldw	r2,-8(fp)
   850dc:	10800044 	addi	r2,r2,1
   850e0:	e0bffe15 	stw	r2,-8(fp)
   850e4:	008004b4 	movhi	r2,18
   850e8:	1085cc04 	addi	r2,r2,5936
   850ec:	10800017 	ldw	r2,0(r2)
   850f0:	1007883a 	mov	r3,r2
   850f4:	e0bffe17 	ldw	r2,-8(fp)
   850f8:	18bfdd2e 	bgeu	r3,r2,85070 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   850fc:	0005883a 	mov	r2,zero
}
   85100:	e037883a 	mov	sp,fp
   85104:	df000017 	ldw	fp,0(sp)
   85108:	dec00104 	addi	sp,sp,4
   8510c:	f800283a 	ret

00085110 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   85110:	defff604 	addi	sp,sp,-40
   85114:	dfc00915 	stw	ra,36(sp)
   85118:	df000815 	stw	fp,32(sp)
   8511c:	df000804 	addi	fp,sp,32
   85120:	e13ffd15 	stw	r4,-12(fp)
   85124:	e17ffe15 	stw	r5,-8(fp)
   85128:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8512c:	00bfffc4 	movi	r2,-1
   85130:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   85134:	00bffb44 	movi	r2,-19
   85138:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   8513c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   85140:	e13ffd17 	ldw	r4,-12(fp)
   85144:	014004b4 	movhi	r5,18
   85148:	2945ca04 	addi	r5,r5,5928
   8514c:	00854800 	call	85480 <alt_find_dev>
   85150:	e0bff815 	stw	r2,-32(fp)
   85154:	e0bff817 	ldw	r2,-32(fp)
   85158:	1000051e 	bne	r2,zero,85170 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8515c:	e13ffd17 	ldw	r4,-12(fp)
   85160:	00855100 	call	85510 <alt_find_file>
   85164:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   85168:	00800044 	movi	r2,1
   8516c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   85170:	e0bff817 	ldw	r2,-32(fp)
   85174:	10002926 	beq	r2,zero,8521c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   85178:	e13ff817 	ldw	r4,-32(fp)
   8517c:	00856240 	call	85624 <alt_get_fd>
   85180:	e0bff915 	stw	r2,-28(fp)
   85184:	e0bff917 	ldw	r2,-28(fp)
   85188:	1000030e 	bge	r2,zero,85198 <open+0x88>
    {
      status = index;
   8518c:	e0bff917 	ldw	r2,-28(fp)
   85190:	e0bffa15 	stw	r2,-24(fp)
   85194:	00002306 	br	85224 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   85198:	e0bff917 	ldw	r2,-28(fp)
   8519c:	10c00324 	muli	r3,r2,12
   851a0:	008004b4 	movhi	r2,18
   851a4:	10856004 	addi	r2,r2,5504
   851a8:	1885883a 	add	r2,r3,r2
   851ac:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   851b0:	e0fffe17 	ldw	r3,-8(fp)
   851b4:	00900034 	movhi	r2,16384
   851b8:	10bfffc4 	addi	r2,r2,-1
   851bc:	1886703a 	and	r3,r3,r2
   851c0:	e0bffc17 	ldw	r2,-16(fp)
   851c4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   851c8:	e0bffb17 	ldw	r2,-20(fp)
   851cc:	1000051e 	bne	r2,zero,851e4 <open+0xd4>
   851d0:	e13ffc17 	ldw	r4,-16(fp)
   851d4:	00850440 	call	85044 <alt_file_locked>
   851d8:	e0bffa15 	stw	r2,-24(fp)
   851dc:	e0bffa17 	ldw	r2,-24(fp)
   851e0:	10001016 	blt	r2,zero,85224 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   851e4:	e0bff817 	ldw	r2,-32(fp)
   851e8:	10800317 	ldw	r2,12(r2)
   851ec:	10000826 	beq	r2,zero,85210 <open+0x100>
   851f0:	e0bff817 	ldw	r2,-32(fp)
   851f4:	10800317 	ldw	r2,12(r2)
   851f8:	e13ffc17 	ldw	r4,-16(fp)
   851fc:	e17ffd17 	ldw	r5,-12(fp)
   85200:	e1bffe17 	ldw	r6,-8(fp)
   85204:	e1ffff17 	ldw	r7,-4(fp)
   85208:	103ee83a 	callr	r2
   8520c:	00000106 	br	85214 <open+0x104>
   85210:	0005883a 	mov	r2,zero
   85214:	e0bffa15 	stw	r2,-24(fp)
   85218:	00000206 	br	85224 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8521c:	00bffb44 	movi	r2,-19
   85220:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   85224:	e0bffa17 	ldw	r2,-24(fp)
   85228:	1000080e 	bge	r2,zero,8524c <open+0x13c>
  {
    alt_release_fd (index);  
   8522c:	e13ff917 	ldw	r4,-28(fp)
   85230:	00852640 	call	85264 <alt_release_fd>
    ALT_ERRNO = -status;
   85234:	0084ff40 	call	84ff4 <alt_get_errno>
   85238:	e0fffa17 	ldw	r3,-24(fp)
   8523c:	00c7c83a 	sub	r3,zero,r3
   85240:	10c00015 	stw	r3,0(r2)
    return -1;
   85244:	00bfffc4 	movi	r2,-1
   85248:	00000106 	br	85250 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   8524c:	e0bff917 	ldw	r2,-28(fp)
}
   85250:	e037883a 	mov	sp,fp
   85254:	dfc00117 	ldw	ra,4(sp)
   85258:	df000017 	ldw	fp,0(sp)
   8525c:	dec00204 	addi	sp,sp,8
   85260:	f800283a 	ret

00085264 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   85264:	defffe04 	addi	sp,sp,-8
   85268:	df000115 	stw	fp,4(sp)
   8526c:	df000104 	addi	fp,sp,4
   85270:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   85274:	e0bfff17 	ldw	r2,-4(fp)
   85278:	108000d0 	cmplti	r2,r2,3
   8527c:	10000d1e 	bne	r2,zero,852b4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   85280:	00c004b4 	movhi	r3,18
   85284:	18c56004 	addi	r3,r3,5504
   85288:	e0bfff17 	ldw	r2,-4(fp)
   8528c:	10800324 	muli	r2,r2,12
   85290:	1885883a 	add	r2,r3,r2
   85294:	10800204 	addi	r2,r2,8
   85298:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8529c:	00c004b4 	movhi	r3,18
   852a0:	18c56004 	addi	r3,r3,5504
   852a4:	e0bfff17 	ldw	r2,-4(fp)
   852a8:	10800324 	muli	r2,r2,12
   852ac:	1885883a 	add	r2,r3,r2
   852b0:	10000015 	stw	zero,0(r2)
  }
}
   852b4:	e037883a 	mov	sp,fp
   852b8:	df000017 	ldw	fp,0(sp)
   852bc:	dec00104 	addi	sp,sp,4
   852c0:	f800283a 	ret

000852c4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   852c4:	defffa04 	addi	sp,sp,-24
   852c8:	df000515 	stw	fp,20(sp)
   852cc:	df000504 	addi	fp,sp,20
   852d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   852d4:	0005303a 	rdctl	r2,status
   852d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   852dc:	e0fffc17 	ldw	r3,-16(fp)
   852e0:	00bfff84 	movi	r2,-2
   852e4:	1884703a 	and	r2,r3,r2
   852e8:	1001703a 	wrctl	status,r2
  
  return context;
   852ec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   852f0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   852f4:	e0bfff17 	ldw	r2,-4(fp)
   852f8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   852fc:	e0bffd17 	ldw	r2,-12(fp)
   85300:	10800017 	ldw	r2,0(r2)
   85304:	e0fffd17 	ldw	r3,-12(fp)
   85308:	18c00117 	ldw	r3,4(r3)
   8530c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   85310:	e0bffd17 	ldw	r2,-12(fp)
   85314:	10800117 	ldw	r2,4(r2)
   85318:	e0fffd17 	ldw	r3,-12(fp)
   8531c:	18c00017 	ldw	r3,0(r3)
   85320:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   85324:	e0bffd17 	ldw	r2,-12(fp)
   85328:	e0fffd17 	ldw	r3,-12(fp)
   8532c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   85330:	e0bffd17 	ldw	r2,-12(fp)
   85334:	e0fffd17 	ldw	r3,-12(fp)
   85338:	10c00015 	stw	r3,0(r2)
   8533c:	e0bffb17 	ldw	r2,-20(fp)
   85340:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85344:	e0bffe17 	ldw	r2,-8(fp)
   85348:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8534c:	e037883a 	mov	sp,fp
   85350:	df000017 	ldw	fp,0(sp)
   85354:	dec00104 	addi	sp,sp,4
   85358:	f800283a 	ret

0008535c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8535c:	defffb04 	addi	sp,sp,-20
   85360:	dfc00415 	stw	ra,16(sp)
   85364:	df000315 	stw	fp,12(sp)
   85368:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8536c:	d0a00e17 	ldw	r2,-32712(gp)
   85370:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   85374:	d0a02b17 	ldw	r2,-32596(gp)
   85378:	10800044 	addi	r2,r2,1
   8537c:	d0a02b15 	stw	r2,-32596(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   85380:	00002e06 	br	8543c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   85384:	e0bffd17 	ldw	r2,-12(fp)
   85388:	10800017 	ldw	r2,0(r2)
   8538c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   85390:	e0bffd17 	ldw	r2,-12(fp)
   85394:	10800403 	ldbu	r2,16(r2)
   85398:	10803fcc 	andi	r2,r2,255
   8539c:	10000426 	beq	r2,zero,853b0 <alt_tick+0x54>
   853a0:	d0a02b17 	ldw	r2,-32596(gp)
   853a4:	1000021e 	bne	r2,zero,853b0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   853a8:	e0bffd17 	ldw	r2,-12(fp)
   853ac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   853b0:	e0bffd17 	ldw	r2,-12(fp)
   853b4:	10800217 	ldw	r2,8(r2)
   853b8:	d0e02b17 	ldw	r3,-32596(gp)
   853bc:	18801d36 	bltu	r3,r2,85434 <alt_tick+0xd8>
   853c0:	e0bffd17 	ldw	r2,-12(fp)
   853c4:	10800403 	ldbu	r2,16(r2)
   853c8:	10803fcc 	andi	r2,r2,255
   853cc:	1000191e 	bne	r2,zero,85434 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   853d0:	e0bffd17 	ldw	r2,-12(fp)
   853d4:	10c00317 	ldw	r3,12(r2)
   853d8:	e0bffd17 	ldw	r2,-12(fp)
   853dc:	10800517 	ldw	r2,20(r2)
   853e0:	1009883a 	mov	r4,r2
   853e4:	183ee83a 	callr	r3
   853e8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   853ec:	e0bfff17 	ldw	r2,-4(fp)
   853f0:	1000031e 	bne	r2,zero,85400 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   853f4:	e13ffd17 	ldw	r4,-12(fp)
   853f8:	00852c40 	call	852c4 <alt_alarm_stop>
   853fc:	00000d06 	br	85434 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   85400:	e0bffd17 	ldw	r2,-12(fp)
   85404:	10c00217 	ldw	r3,8(r2)
   85408:	e0bfff17 	ldw	r2,-4(fp)
   8540c:	1887883a 	add	r3,r3,r2
   85410:	e0bffd17 	ldw	r2,-12(fp)
   85414:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   85418:	e0bffd17 	ldw	r2,-12(fp)
   8541c:	10c00217 	ldw	r3,8(r2)
   85420:	d0a02b17 	ldw	r2,-32596(gp)
   85424:	1880032e 	bgeu	r3,r2,85434 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   85428:	e0bffd17 	ldw	r2,-12(fp)
   8542c:	00c00044 	movi	r3,1
   85430:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   85434:	e0bffe17 	ldw	r2,-8(fp)
   85438:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8543c:	e0fffd17 	ldw	r3,-12(fp)
   85440:	d0a00e04 	addi	r2,gp,-32712
   85444:	18bfcf1e 	bne	r3,r2,85384 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   85448:	0001883a 	nop
}
   8544c:	e037883a 	mov	sp,fp
   85450:	dfc00117 	ldw	ra,4(sp)
   85454:	df000017 	ldw	fp,0(sp)
   85458:	dec00204 	addi	sp,sp,8
   8545c:	f800283a 	ret

00085460 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   85460:	deffff04 	addi	sp,sp,-4
   85464:	df000015 	stw	fp,0(sp)
   85468:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8546c:	000170fa 	wrctl	ienable,zero
}
   85470:	e037883a 	mov	sp,fp
   85474:	df000017 	ldw	fp,0(sp)
   85478:	dec00104 	addi	sp,sp,4
   8547c:	f800283a 	ret

00085480 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   85480:	defffa04 	addi	sp,sp,-24
   85484:	dfc00515 	stw	ra,20(sp)
   85488:	df000415 	stw	fp,16(sp)
   8548c:	df000404 	addi	fp,sp,16
   85490:	e13ffe15 	stw	r4,-8(fp)
   85494:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   85498:	e0bfff17 	ldw	r2,-4(fp)
   8549c:	10800017 	ldw	r2,0(r2)
   854a0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   854a4:	e13ffe17 	ldw	r4,-8(fp)
   854a8:	00858080 	call	85808 <strlen>
   854ac:	10800044 	addi	r2,r2,1
   854b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   854b4:	00000d06 	br	854ec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   854b8:	e0bffc17 	ldw	r2,-16(fp)
   854bc:	10c00217 	ldw	r3,8(r2)
   854c0:	e0bffd17 	ldw	r2,-12(fp)
   854c4:	1809883a 	mov	r4,r3
   854c8:	e17ffe17 	ldw	r5,-8(fp)
   854cc:	100d883a 	mov	r6,r2
   854d0:	00857980 	call	85798 <memcmp>
   854d4:	1000021e 	bne	r2,zero,854e0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   854d8:	e0bffc17 	ldw	r2,-16(fp)
   854dc:	00000706 	br	854fc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   854e0:	e0bffc17 	ldw	r2,-16(fp)
   854e4:	10800017 	ldw	r2,0(r2)
   854e8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   854ec:	e0fffc17 	ldw	r3,-16(fp)
   854f0:	e0bfff17 	ldw	r2,-4(fp)
   854f4:	18bff01e 	bne	r3,r2,854b8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   854f8:	0005883a 	mov	r2,zero
}
   854fc:	e037883a 	mov	sp,fp
   85500:	dfc00117 	ldw	ra,4(sp)
   85504:	df000017 	ldw	fp,0(sp)
   85508:	dec00204 	addi	sp,sp,8
   8550c:	f800283a 	ret

00085510 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   85510:	defffb04 	addi	sp,sp,-20
   85514:	dfc00415 	stw	ra,16(sp)
   85518:	df000315 	stw	fp,12(sp)
   8551c:	df000304 	addi	fp,sp,12
   85520:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   85524:	008004b4 	movhi	r2,18
   85528:	1085c804 	addi	r2,r2,5920
   8552c:	10800017 	ldw	r2,0(r2)
   85530:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   85534:	00003106 	br	855fc <alt_find_file+0xec>
  {
    len = strlen(next->name);
   85538:	e0bffd17 	ldw	r2,-12(fp)
   8553c:	10800217 	ldw	r2,8(r2)
   85540:	1009883a 	mov	r4,r2
   85544:	00858080 	call	85808 <strlen>
   85548:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   8554c:	e0bffd17 	ldw	r2,-12(fp)
   85550:	10c00217 	ldw	r3,8(r2)
   85554:	e0bffe17 	ldw	r2,-8(fp)
   85558:	10bfffc4 	addi	r2,r2,-1
   8555c:	1885883a 	add	r2,r3,r2
   85560:	10800003 	ldbu	r2,0(r2)
   85564:	10803fcc 	andi	r2,r2,255
   85568:	1080201c 	xori	r2,r2,128
   8556c:	10bfe004 	addi	r2,r2,-128
   85570:	10800bd8 	cmpnei	r2,r2,47
   85574:	1000031e 	bne	r2,zero,85584 <alt_find_file+0x74>
    {
      len -= 1;
   85578:	e0bffe17 	ldw	r2,-8(fp)
   8557c:	10bfffc4 	addi	r2,r2,-1
   85580:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   85584:	e0bffe17 	ldw	r2,-8(fp)
   85588:	e0ffff17 	ldw	r3,-4(fp)
   8558c:	1885883a 	add	r2,r3,r2
   85590:	10800003 	ldbu	r2,0(r2)
   85594:	10803fcc 	andi	r2,r2,255
   85598:	1080201c 	xori	r2,r2,128
   8559c:	10bfe004 	addi	r2,r2,-128
   855a0:	10800be0 	cmpeqi	r2,r2,47
   855a4:	1000081e 	bne	r2,zero,855c8 <alt_find_file+0xb8>
   855a8:	e0bffe17 	ldw	r2,-8(fp)
   855ac:	e0ffff17 	ldw	r3,-4(fp)
   855b0:	1885883a 	add	r2,r3,r2
   855b4:	10800003 	ldbu	r2,0(r2)
   855b8:	10803fcc 	andi	r2,r2,255
   855bc:	1080201c 	xori	r2,r2,128
   855c0:	10bfe004 	addi	r2,r2,-128
   855c4:	10000a1e 	bne	r2,zero,855f0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   855c8:	e0bffd17 	ldw	r2,-12(fp)
   855cc:	10c00217 	ldw	r3,8(r2)
   855d0:	e0bffe17 	ldw	r2,-8(fp)
   855d4:	1809883a 	mov	r4,r3
   855d8:	e17fff17 	ldw	r5,-4(fp)
   855dc:	100d883a 	mov	r6,r2
   855e0:	00857980 	call	85798 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   855e4:	1000021e 	bne	r2,zero,855f0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   855e8:	e0bffd17 	ldw	r2,-12(fp)
   855ec:	00000806 	br	85610 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   855f0:	e0bffd17 	ldw	r2,-12(fp)
   855f4:	10800017 	ldw	r2,0(r2)
   855f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   855fc:	e0fffd17 	ldw	r3,-12(fp)
   85600:	008004b4 	movhi	r2,18
   85604:	1085c804 	addi	r2,r2,5920
   85608:	18bfcb1e 	bne	r3,r2,85538 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8560c:	0005883a 	mov	r2,zero
}
   85610:	e037883a 	mov	sp,fp
   85614:	dfc00117 	ldw	ra,4(sp)
   85618:	df000017 	ldw	fp,0(sp)
   8561c:	dec00204 	addi	sp,sp,8
   85620:	f800283a 	ret

00085624 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   85624:	defffc04 	addi	sp,sp,-16
   85628:	df000315 	stw	fp,12(sp)
   8562c:	df000304 	addi	fp,sp,12
   85630:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   85634:	00bffa04 	movi	r2,-24
   85638:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8563c:	e03ffd15 	stw	zero,-12(fp)
   85640:	00001d06 	br	856b8 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   85644:	00c004b4 	movhi	r3,18
   85648:	18c56004 	addi	r3,r3,5504
   8564c:	e0bffd17 	ldw	r2,-12(fp)
   85650:	10800324 	muli	r2,r2,12
   85654:	1885883a 	add	r2,r3,r2
   85658:	10800017 	ldw	r2,0(r2)
   8565c:	1000131e 	bne	r2,zero,856ac <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   85660:	00c004b4 	movhi	r3,18
   85664:	18c56004 	addi	r3,r3,5504
   85668:	e0bffd17 	ldw	r2,-12(fp)
   8566c:	10800324 	muli	r2,r2,12
   85670:	1885883a 	add	r2,r3,r2
   85674:	e0ffff17 	ldw	r3,-4(fp)
   85678:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   8567c:	008004b4 	movhi	r2,18
   85680:	1085cc04 	addi	r2,r2,5936
   85684:	10c00017 	ldw	r3,0(r2)
   85688:	e0bffd17 	ldw	r2,-12(fp)
   8568c:	1880040e 	bge	r3,r2,856a0 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   85690:	008004b4 	movhi	r2,18
   85694:	1085cc04 	addi	r2,r2,5936
   85698:	e0fffd17 	ldw	r3,-12(fp)
   8569c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   856a0:	e0bffd17 	ldw	r2,-12(fp)
   856a4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   856a8:	00000606 	br	856c4 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   856ac:	e0bffd17 	ldw	r2,-12(fp)
   856b0:	10800044 	addi	r2,r2,1
   856b4:	e0bffd15 	stw	r2,-12(fp)
   856b8:	e0bffd17 	ldw	r2,-12(fp)
   856bc:	10800810 	cmplti	r2,r2,32
   856c0:	103fe01e 	bne	r2,zero,85644 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   856c4:	e0bffe17 	ldw	r2,-8(fp)
}
   856c8:	e037883a 	mov	sp,fp
   856cc:	df000017 	ldw	fp,0(sp)
   856d0:	dec00104 	addi	sp,sp,4
   856d4:	f800283a 	ret

000856d8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   856d8:	defffb04 	addi	sp,sp,-20
   856dc:	df000415 	stw	fp,16(sp)
   856e0:	df000404 	addi	fp,sp,16
   856e4:	e13ffe15 	stw	r4,-8(fp)
   856e8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   856ec:	e0bfff17 	ldw	r2,-4(fp)
   856f0:	10840070 	cmpltui	r2,r2,4097
   856f4:	1000021e 	bne	r2,zero,85700 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   856f8:	00840004 	movi	r2,4096
   856fc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   85700:	e0fffe17 	ldw	r3,-8(fp)
   85704:	e0bfff17 	ldw	r2,-4(fp)
   85708:	1885883a 	add	r2,r3,r2
   8570c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   85710:	e0bffe17 	ldw	r2,-8(fp)
   85714:	e0bffc15 	stw	r2,-16(fp)
   85718:	00000506 	br	85730 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   8571c:	e0bffc17 	ldw	r2,-16(fp)
   85720:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   85724:	e0bffc17 	ldw	r2,-16(fp)
   85728:	10800804 	addi	r2,r2,32
   8572c:	e0bffc15 	stw	r2,-16(fp)
   85730:	e0fffc17 	ldw	r3,-16(fp)
   85734:	e0bffd17 	ldw	r2,-12(fp)
   85738:	18bff836 	bltu	r3,r2,8571c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   8573c:	e0bffe17 	ldw	r2,-8(fp)
   85740:	108007cc 	andi	r2,r2,31
   85744:	10000226 	beq	r2,zero,85750 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   85748:	e0bffc17 	ldw	r2,-16(fp)
   8574c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   85750:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   85754:	e037883a 	mov	sp,fp
   85758:	df000017 	ldw	fp,0(sp)
   8575c:	dec00104 	addi	sp,sp,4
   85760:	f800283a 	ret

00085764 <atexit>:
   85764:	200b883a 	mov	r5,r4
   85768:	000d883a 	mov	r6,zero
   8576c:	0009883a 	mov	r4,zero
   85770:	000f883a 	mov	r7,zero
   85774:	00858301 	jmpi	85830 <__register_exitproc>

00085778 <exit>:
   85778:	defffe04 	addi	sp,sp,-8
   8577c:	000b883a 	mov	r5,zero
   85780:	dc000015 	stw	r16,0(sp)
   85784:	dfc00115 	stw	ra,4(sp)
   85788:	2021883a 	mov	r16,r4
   8578c:	00859b80 	call	859b8 <__call_exitprocs>
   85790:	8009883a 	mov	r4,r16
   85794:	0085b900 	call	85b90 <_exit>

00085798 <memcmp>:
   85798:	30000d26 	beq	r6,zero,857d0 <memcmp+0x38>
   8579c:	20c00003 	ldbu	r3,0(r4)
   857a0:	28800003 	ldbu	r2,0(r5)
   857a4:	18800c1e 	bne	r3,r2,857d8 <memcmp+0x40>
   857a8:	31bfff84 	addi	r6,r6,-2
   857ac:	01ffffc4 	movi	r7,-1
   857b0:	00000406 	br	857c4 <memcmp+0x2c>
   857b4:	20c00003 	ldbu	r3,0(r4)
   857b8:	28800003 	ldbu	r2,0(r5)
   857bc:	31bfffc4 	addi	r6,r6,-1
   857c0:	1880051e 	bne	r3,r2,857d8 <memcmp+0x40>
   857c4:	21000044 	addi	r4,r4,1
   857c8:	29400044 	addi	r5,r5,1
   857cc:	31fff91e 	bne	r6,r7,857b4 <memcmp+0x1c>
   857d0:	0005883a 	mov	r2,zero
   857d4:	f800283a 	ret
   857d8:	1885c83a 	sub	r2,r3,r2
   857dc:	f800283a 	ret

000857e0 <memcpy>:
   857e0:	2005883a 	mov	r2,r4
   857e4:	30000726 	beq	r6,zero,85804 <memcpy+0x24>
   857e8:	218d883a 	add	r6,r4,r6
   857ec:	2007883a 	mov	r3,r4
   857f0:	29c00003 	ldbu	r7,0(r5)
   857f4:	18c00044 	addi	r3,r3,1
   857f8:	29400044 	addi	r5,r5,1
   857fc:	19ffffc5 	stb	r7,-1(r3)
   85800:	19bffb1e 	bne	r3,r6,857f0 <memcpy+0x10>
   85804:	f800283a 	ret

00085808 <strlen>:
   85808:	20800007 	ldb	r2,0(r4)
   8580c:	10000626 	beq	r2,zero,85828 <strlen+0x20>
   85810:	2005883a 	mov	r2,r4
   85814:	10800044 	addi	r2,r2,1
   85818:	10c00007 	ldb	r3,0(r2)
   8581c:	183ffd1e 	bne	r3,zero,85814 <strlen+0xc>
   85820:	1105c83a 	sub	r2,r2,r4
   85824:	f800283a 	ret
   85828:	0005883a 	mov	r2,zero
   8582c:	f800283a 	ret

00085830 <__register_exitproc>:
   85830:	defff904 	addi	sp,sp,-28
   85834:	008004b4 	movhi	r2,18
   85838:	1085c404 	addi	r2,r2,5904
   8583c:	dc400415 	stw	r17,16(sp)
   85840:	14400017 	ldw	r17,0(r2)
   85844:	dc000315 	stw	r16,12(sp)
   85848:	dc800515 	stw	r18,20(sp)
   8584c:	8c000c17 	ldw	r16,48(r17)
   85850:	dfc00615 	stw	ra,24(sp)
   85854:	2025883a 	mov	r18,r4
   85858:	80004226 	beq	r16,zero,85964 <__register_exitproc+0x134>
   8585c:	80800117 	ldw	r2,4(r16)
   85860:	00c007c4 	movi	r3,31
   85864:	1880180e 	bge	r3,r2,858c8 <__register_exitproc+0x98>
   85868:	00800234 	movhi	r2,8
   8586c:	108b7404 	addi	r2,r2,11728
   85870:	1000071e 	bne	r2,zero,85890 <__register_exitproc+0x60>
   85874:	00bfffc4 	movi	r2,-1
   85878:	dfc00617 	ldw	ra,24(sp)
   8587c:	dc800517 	ldw	r18,20(sp)
   85880:	dc400417 	ldw	r17,16(sp)
   85884:	dc000317 	ldw	r16,12(sp)
   85888:	dec00704 	addi	sp,sp,28
   8588c:	f800283a 	ret
   85890:	01002304 	movi	r4,140
   85894:	d9400015 	stw	r5,0(sp)
   85898:	d9800115 	stw	r6,4(sp)
   8589c:	d9c00215 	stw	r7,8(sp)
   858a0:	0082dd00 	call	82dd0 <malloc>
   858a4:	1021883a 	mov	r16,r2
   858a8:	d9400017 	ldw	r5,0(sp)
   858ac:	d9800117 	ldw	r6,4(sp)
   858b0:	d9c00217 	ldw	r7,8(sp)
   858b4:	103fef26 	beq	r2,zero,85874 <__register_exitproc+0x44>
   858b8:	88800c17 	ldw	r2,48(r17)
   858bc:	80000115 	stw	zero,4(r16)
   858c0:	80800015 	stw	r2,0(r16)
   858c4:	8c000c15 	stw	r16,48(r17)
   858c8:	90001726 	beq	r18,zero,85928 <__register_exitproc+0xf8>
   858cc:	80802217 	ldw	r2,136(r16)
   858d0:	10002826 	beq	r2,zero,85974 <__register_exitproc+0x144>
   858d4:	12804017 	ldw	r10,256(r2)
   858d8:	80c00117 	ldw	r3,4(r16)
   858dc:	02400044 	movi	r9,1
   858e0:	48d2983a 	sll	r9,r9,r3
   858e4:	19000804 	addi	r4,r3,32
   858e8:	18d1883a 	add	r8,r3,r3
   858ec:	2109883a 	add	r4,r4,r4
   858f0:	4211883a 	add	r8,r8,r8
   858f4:	2109883a 	add	r4,r4,r4
   858f8:	1109883a 	add	r4,r2,r4
   858fc:	1211883a 	add	r8,r2,r8
   85900:	5254b03a 	or	r10,r10,r9
   85904:	21c00015 	stw	r7,0(r4)
   85908:	41800015 	stw	r6,0(r8)
   8590c:	12804015 	stw	r10,256(r2)
   85910:	01000084 	movi	r4,2
   85914:	9100051e 	bne	r18,r4,8592c <__register_exitproc+0xfc>
   85918:	11004117 	ldw	r4,260(r2)
   8591c:	2252b03a 	or	r9,r4,r9
   85920:	12404115 	stw	r9,260(r2)
   85924:	00000106 	br	8592c <__register_exitproc+0xfc>
   85928:	80c00117 	ldw	r3,4(r16)
   8592c:	18800084 	addi	r2,r3,2
   85930:	1085883a 	add	r2,r2,r2
   85934:	1085883a 	add	r2,r2,r2
   85938:	8085883a 	add	r2,r16,r2
   8593c:	18c00044 	addi	r3,r3,1
   85940:	11400015 	stw	r5,0(r2)
   85944:	0005883a 	mov	r2,zero
   85948:	80c00115 	stw	r3,4(r16)
   8594c:	dfc00617 	ldw	ra,24(sp)
   85950:	dc800517 	ldw	r18,20(sp)
   85954:	dc400417 	ldw	r17,16(sp)
   85958:	dc000317 	ldw	r16,12(sp)
   8595c:	dec00704 	addi	sp,sp,28
   85960:	f800283a 	ret
   85964:	040004b4 	movhi	r16,18
   85968:	8407c304 	addi	r16,r16,7948
   8596c:	8c000c15 	stw	r16,48(r17)
   85970:	003fba06 	br	8585c <__register_exitproc+0x2c>
   85974:	00800234 	movhi	r2,8
   85978:	108b7404 	addi	r2,r2,11728
   8597c:	103fbd26 	beq	r2,zero,85874 <__register_exitproc+0x44>
   85980:	d9400015 	stw	r5,0(sp)
   85984:	d9800115 	stw	r6,4(sp)
   85988:	d9c00215 	stw	r7,8(sp)
   8598c:	01004204 	movi	r4,264
   85990:	103ee83a 	callr	r2
   85994:	d9400017 	ldw	r5,0(sp)
   85998:	d9800117 	ldw	r6,4(sp)
   8599c:	d9c00217 	ldw	r7,8(sp)
   859a0:	103fb426 	beq	r2,zero,85874 <__register_exitproc+0x44>
   859a4:	10004015 	stw	zero,256(r2)
   859a8:	10004115 	stw	zero,260(r2)
   859ac:	80802215 	stw	r2,136(r16)
   859b0:	0015883a 	mov	r10,zero
   859b4:	003fc806 	br	858d8 <__register_exitproc+0xa8>

000859b8 <__call_exitprocs>:
   859b8:	008004b4 	movhi	r2,18
   859bc:	1085c404 	addi	r2,r2,5904
   859c0:	10800017 	ldw	r2,0(r2)
   859c4:	defff204 	addi	sp,sp,-56
   859c8:	df000c15 	stw	fp,48(sp)
   859cc:	d8800015 	stw	r2,0(sp)
   859d0:	10800c04 	addi	r2,r2,48
   859d4:	dd400915 	stw	r21,36(sp)
   859d8:	dfc00d15 	stw	ra,52(sp)
   859dc:	ddc00b15 	stw	r23,44(sp)
   859e0:	dd800a15 	stw	r22,40(sp)
   859e4:	dd000815 	stw	r20,32(sp)
   859e8:	dcc00715 	stw	r19,28(sp)
   859ec:	dc800615 	stw	r18,24(sp)
   859f0:	dc400515 	stw	r17,20(sp)
   859f4:	dc000415 	stw	r16,16(sp)
   859f8:	d9000115 	stw	r4,4(sp)
   859fc:	2839883a 	mov	fp,r5
   85a00:	d8800215 	stw	r2,8(sp)
   85a04:	057fffc4 	movi	r21,-1
   85a08:	d8800017 	ldw	r2,0(sp)
   85a0c:	dd800217 	ldw	r22,8(sp)
   85a10:	15c00c17 	ldw	r23,48(r2)
   85a14:	b8001b26 	beq	r23,zero,85a84 <__call_exitprocs+0xcc>
   85a18:	b9000117 	ldw	r4,4(r23)
   85a1c:	bd002217 	ldw	r20,136(r23)
   85a20:	243fffc4 	addi	r16,r4,-1
   85a24:	80001416 	blt	r16,zero,85a78 <__call_exitprocs+0xc0>
   85a28:	244007c4 	addi	r17,r4,31
   85a2c:	21000044 	addi	r4,r4,1
   85a30:	8c63883a 	add	r17,r17,r17
   85a34:	8427883a 	add	r19,r16,r16
   85a38:	2109883a 	add	r4,r4,r4
   85a3c:	8c63883a 	add	r17,r17,r17
   85a40:	9ce7883a 	add	r19,r19,r19
   85a44:	2109883a 	add	r4,r4,r4
   85a48:	a463883a 	add	r17,r20,r17
   85a4c:	a4e7883a 	add	r19,r20,r19
   85a50:	b925883a 	add	r18,r23,r4
   85a54:	e0001726 	beq	fp,zero,85ab4 <__call_exitprocs+0xfc>
   85a58:	a0000226 	beq	r20,zero,85a64 <__call_exitprocs+0xac>
   85a5c:	89400017 	ldw	r5,0(r17)
   85a60:	2f001426 	beq	r5,fp,85ab4 <__call_exitprocs+0xfc>
   85a64:	843fffc4 	addi	r16,r16,-1
   85a68:	8c7fff04 	addi	r17,r17,-4
   85a6c:	9cffff04 	addi	r19,r19,-4
   85a70:	94bfff04 	addi	r18,r18,-4
   85a74:	857ff71e 	bne	r16,r21,85a54 <__call_exitprocs+0x9c>
   85a78:	00800234 	movhi	r2,8
   85a7c:	108b7904 	addi	r2,r2,11748
   85a80:	1000311e 	bne	r2,zero,85b48 <__call_exitprocs+0x190>
   85a84:	dfc00d17 	ldw	ra,52(sp)
   85a88:	df000c17 	ldw	fp,48(sp)
   85a8c:	ddc00b17 	ldw	r23,44(sp)
   85a90:	dd800a17 	ldw	r22,40(sp)
   85a94:	dd400917 	ldw	r21,36(sp)
   85a98:	dd000817 	ldw	r20,32(sp)
   85a9c:	dcc00717 	ldw	r19,28(sp)
   85aa0:	dc800617 	ldw	r18,24(sp)
   85aa4:	dc400517 	ldw	r17,20(sp)
   85aa8:	dc000417 	ldw	r16,16(sp)
   85aac:	dec00e04 	addi	sp,sp,56
   85ab0:	f800283a 	ret
   85ab4:	b9000117 	ldw	r4,4(r23)
   85ab8:	92000017 	ldw	r8,0(r18)
   85abc:	213fffc4 	addi	r4,r4,-1
   85ac0:	24001a26 	beq	r4,r16,85b2c <__call_exitprocs+0x174>
   85ac4:	90000015 	stw	zero,0(r18)
   85ac8:	403fe626 	beq	r8,zero,85a64 <__call_exitprocs+0xac>
   85acc:	ba400117 	ldw	r9,4(r23)
   85ad0:	a0001226 	beq	r20,zero,85b1c <__call_exitprocs+0x164>
   85ad4:	00800044 	movi	r2,1
   85ad8:	1408983a 	sll	r4,r2,r16
   85adc:	a1404017 	ldw	r5,256(r20)
   85ae0:	214a703a 	and	r5,r4,r5
   85ae4:	28000d26 	beq	r5,zero,85b1c <__call_exitprocs+0x164>
   85ae8:	a1404117 	ldw	r5,260(r20)
   85aec:	2148703a 	and	r4,r4,r5
   85af0:	2000101e 	bne	r4,zero,85b34 <__call_exitprocs+0x17c>
   85af4:	99400017 	ldw	r5,0(r19)
   85af8:	d9000117 	ldw	r4,4(sp)
   85afc:	da400315 	stw	r9,12(sp)
   85b00:	403ee83a 	callr	r8
   85b04:	da400317 	ldw	r9,12(sp)
   85b08:	b9000117 	ldw	r4,4(r23)
   85b0c:	227fbe1e 	bne	r4,r9,85a08 <__call_exitprocs+0x50>
   85b10:	b1000017 	ldw	r4,0(r22)
   85b14:	25ffd326 	beq	r4,r23,85a64 <__call_exitprocs+0xac>
   85b18:	003fbb06 	br	85a08 <__call_exitprocs+0x50>
   85b1c:	da400315 	stw	r9,12(sp)
   85b20:	403ee83a 	callr	r8
   85b24:	da400317 	ldw	r9,12(sp)
   85b28:	003ff706 	br	85b08 <__call_exitprocs+0x150>
   85b2c:	bc000115 	stw	r16,4(r23)
   85b30:	003fe506 	br	85ac8 <__call_exitprocs+0x110>
   85b34:	99000017 	ldw	r4,0(r19)
   85b38:	da400315 	stw	r9,12(sp)
   85b3c:	403ee83a 	callr	r8
   85b40:	da400317 	ldw	r9,12(sp)
   85b44:	003ff006 	br	85b08 <__call_exitprocs+0x150>
   85b48:	b9000117 	ldw	r4,4(r23)
   85b4c:	20000e1e 	bne	r4,zero,85b88 <__call_exitprocs+0x1d0>
   85b50:	b9000017 	ldw	r4,0(r23)
   85b54:	20000826 	beq	r4,zero,85b78 <__call_exitprocs+0x1c0>
   85b58:	b1000015 	stw	r4,0(r22)
   85b5c:	a0000226 	beq	r20,zero,85b68 <__call_exitprocs+0x1b0>
   85b60:	a009883a 	mov	r4,r20
   85b64:	0082de40 	call	82de4 <free>
   85b68:	b809883a 	mov	r4,r23
   85b6c:	0082de40 	call	82de4 <free>
   85b70:	b5c00017 	ldw	r23,0(r22)
   85b74:	003fa706 	br	85a14 <__call_exitprocs+0x5c>
   85b78:	0007883a 	mov	r3,zero
   85b7c:	b82d883a 	mov	r22,r23
   85b80:	182f883a 	mov	r23,r3
   85b84:	003fa306 	br	85a14 <__call_exitprocs+0x5c>
   85b88:	b8c00017 	ldw	r3,0(r23)
   85b8c:	003ffb06 	br	85b7c <__call_exitprocs+0x1c4>

00085b90 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   85b90:	defffc04 	addi	sp,sp,-16
   85b94:	df000315 	stw	fp,12(sp)
   85b98:	df000304 	addi	fp,sp,12
   85b9c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   85ba0:	0001883a 	nop
   85ba4:	e0bfff17 	ldw	r2,-4(fp)
   85ba8:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   85bac:	e0bffd17 	ldw	r2,-12(fp)
   85bb0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   85bb4:	e0bffe17 	ldw	r2,-8(fp)
   85bb8:	10000226 	beq	r2,zero,85bc4 <_exit+0x34>
    ALT_SIM_FAIL();
   85bbc:	002af070 	cmpltui	zero,zero,43969
   85bc0:	00000106 	br	85bc8 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   85bc4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   85bc8:	003fff06 	br	85bc8 <_exit+0x38>
